[
{"sql": "\nrepeat('Pg', 4) \u2192 ", "source": "https://www.postgresql.org/docs/current/functions.html"},
{"sql": "\nSELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),\n                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts';\n", "source": "https://www.postgresql.org/docs/current/functions-statistics.html"},
{"sql": "\nCREATE FUNCTION test_event_trigger_for_drops()\n        RETURNS event_trigger LANGUAGE plpgsql AS $$\nDECLARE\n    obj record;\nBEGIN\n    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n    LOOP\n        RAISE NOTICE '% dropped object: % %.% %',\n                     tg_tag,\n                     obj.object_type,\n                     obj.schema_name,\n                     obj.object_name,\n                     obj.object_identity;\n    END LOOP;\nEND;\n$$;\nCREATE EVENT TRIGGER test_event_trigger_for_drops\n   ON sql_drop\n   EXECUTE FUNCTION test_event_trigger_for_drops();\n", "source": "https://www.postgresql.org/docs/current/functions-event-triggers.html"},
{"sql": "\nCREATE FUNCTION test_event_trigger_table_rewrite_oid()\n RETURNS event_trigger\n LANGUAGE plpgsql AS\n$$\nBEGIN\n  RAISE NOTICE 'rewriting table % for reason %',\n                pg_event_trigger_table_rewrite_oid()::regclass,\n                pg_event_trigger_table_rewrite_reason();\nEND;\n$$;\n\nCREATE EVENT TRIGGER test_table_rewrite_oid\n                  ON table_rewrite\n   EXECUTE FUNCTION test_event_trigger_table_rewrite_oid();\n", "source": "https://www.postgresql.org/docs/current/functions-event-triggers.html"},
{"sql": "\nSELECT * FROM generate_series(2,4);\n generate_series\n-----------------\n               2\n               3\n               4\n(3 rows)\n\nSELECT * FROM generate_series(5,1,-2);\n generate_series\n-----------------\n               5\n               3\n               1\n(3 rows)\n\nSELECT * FROM generate_series(4,3);\n generate_series\n-----------------\n(0 rows)\n\nSELECT generate_series(1.1, 4, 1.3);\n generate_series\n-----------------\n             1.1\n             2.4\n             3.7\n(3 rows)\n\n-- this example relies on the date-plus-integer operator:\nSELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);\n   dates\n------------\n 2004-02-05\n 2004-02-12\n 2004-02-19\n(3 rows)\n\nSELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n   generate_series\n---------------------\n 2008-03-01 00:00:00\n 2008-03-01 10:00:00\n 2008-03-01 20:00:00\n 2008-03-02 06:00:00\n 2008-03-02 16:00:00\n 2008-03-03 02:00:00\n 2008-03-03 12:00:00\n 2008-03-03 22:00:00\n 2008-03-04 08:00:00\n(9 rows)\n", "source": "https://www.postgresql.org/docs/current/functions-srf.html"},
{"sql": "\n-- basic usage:\nSELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;\n s\n---\n 1\n 2\n 3\n 4\n(4 rows)\n\n-- presenting an array, the subscript and the subscripted\n-- value requires a subquery:\nSELECT * FROM arrays;\n         a\n--------------------\n {-1,-2}\n {100,200,300}\n(2 rows)\n\nSELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;\n     array     | subscript | value\n---------------+-----------+-------\n {-1,-2}       |         1 |    -1\n {-1,-2}       |         2 |    -2\n {100,200,300} |         1 |   100\n {100,200,300} |         2 |   200\n {100,200,300} |         3 |   300\n(5 rows)\n\n-- unnest a 2D array:\nCREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j);\n$$ LANGUAGE sql IMMUTABLE;\nCREATE FUNCTION\nSELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);\n unnest2\n---------\n       1\n       2\n       3\n       4\n(4 rows)\n", "source": "https://www.postgresql.org/docs/current/functions-srf.html"},
{"sql": "\n-- set returning function WITH ORDINALITY:\nSELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);\n       ls        | n\n-----------------+----\n pg_serial       |  1\n pg_twophase     |  2\n postmaster.opts |  3\n pg_notify       |  4\n postgresql.conf |  5\n pg_tblspc       |  6\n logfile         |  7\n base            |  8\n postmaster.pid  |  9\n pg_ident.conf   | 10\n global          | 11\n pg_xact         | 12\n pg_snapshots    | 13\n pg_multixact    | 14\n PG_VERSION      | 15\n pg_wal          | 16\n pg_hba.conf     | 17\n pg_stat_tmp     | 18\n pg_subtrans     | 19\n(19 rows)\n", "source": "https://www.postgresql.org/docs/current/functions-srf.html"},
{"sql": "\nCREATE TRIGGER z_min_update\nBEFORE UPDATE ON tablename\nFOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();\n", "source": "https://www.postgresql.org/docs/current/functions-trigger.html"},
{"sql": "\npostgres=# SELECT pg_log_backend_memory_contexts(pg_backend_pid());\n pg_log_backend_memory_contexts \n--------------------------------\n t\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/functions-admin.html"},
{"sql": "\npostgres=# SELECT * FROM pg_walfile_name_offset(pg_stop_backup());\n        file_name         | file_offset\n--------------------------+-------------\n 00000001000000000000000D |     4039624\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/functions-admin.html"},
{"sql": "\nSELECT pg_size_pretty(sum(pg_relation_size(relid))) AS total_size\n  FROM pg_partition_tree('measurement');\n", "source": "https://www.postgresql.org/docs/current/functions-admin.html"},
{"sql": "\nSELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');\n", "source": "https://www.postgresql.org/docs/current/functions-admin.html"},
{"sql": "\nSELECT has_table_privilege('myschema.mytable', 'select');\nSELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT relname FROM pg_class WHERE pg_table_is_visible(oid);\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT pg_type_is_visible('myschema.widget'::regtype);\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT currval(pg_get_serial_sequence('sometable', 'id'));\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT pg_typeof(33);\n pg_typeof\n-----------\n integer\n\nSELECT typlen FROM pg_type WHERE oid = pg_typeof(33);\n typlen\n--------\n      4\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT collation for (description) FROM pg_description LIMIT 1;\n pg_collation_for\n------------------\n \"default\"\n\nSELECT collation for ('foo' COLLATE \"de_DE\");\n pg_collation_for\n------------------\n \"de_DE\"\n", "source": "https://www.postgresql.org/docs/current/functions-info.html"},
{"sql": "\nSELECT count(*) FROM sometable;\n", "source": "https://www.postgresql.org/docs/current/functions-aggregate.html"},
{"sql": "\n [1,2)\n [3,4)\n", "source": "https://www.postgresql.org/docs/current/functions-range.html"},
{"sql": "\n foo\n bar\n baz\n quux\n", "source": "https://www.postgresql.org/docs/current/functions-array.html"},
{"sql": "\n a |  b\n---+-----\n 1 | foo\n 2 | bar\n   | baz\n", "source": "https://www.postgresql.org/docs/current/functions-array.html"},
{"sql": "\nSELECT * FROM pg_attribute WHERE attrelid = 'mytable'::regclass;\n", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nSELECT * FROM pg_attribute\n  WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'mytable');\n", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('foo')              ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('FOO')              ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('\"Foo\"')            ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('myschema.foo')     ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('\"myschema\".foo')   ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('foo')              ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nnextval('foo'::text)      ", "source": "https://www.postgresql.org/docs/current/datatype-oid.html"},
{"sql": "\nWITH regional_sales AS (\n    SELECT region, SUM(amount) AS total_sales\n    FROM orders\n    GROUP BY region\n), top_regions AS (\n    SELECT region\n    FROM regional_sales\n    WHERE total_sales > (SELECT SUM(total_sales)/10 FROM regional_sales)\n)\nSELECT region,\n       product,\n       SUM(quantity) AS product_units,\n       SUM(amount) AS product_sales\nFROM orders\nWHERE region IN (SELECT region FROM top_regions)\nGROUP BY region, product;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE t(n) AS (\n    VALUES (1)\n  UNION ALL\n    SELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE included_parts(sub_part, part, quantity) AS (\n    SELECT sub_part, part, quantity FROM parts WHERE part = 'our_product'\n  UNION ALL\n    SELECT p.sub_part, p.part, p.quantity\n    FROM included_parts pr, parts p\n    WHERE p.part = pr.sub_part\n)\nSELECT sub_part, SUM(quantity) as total_quantity\nFROM included_parts\nGROUP BY sub_part\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_tree(id, link, data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": ") AS (\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_tree(id, link, data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": ") AS (\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_tree(id, link, data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": ") AS (\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n)\nSELECT * FROM search_tree ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n) ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nSELECT * FROM search_tree ORDER BY ordercol;\n\nWITH RECURSIVE search_tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    FROM tree t\n  UNION ALL\n    SELECT t.id, t.link, t.data\n    FROM tree t, search_tree st\n    WHERE t.id = st.link\n) ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nSELECT * FROM search_tree ORDER BY ordercol;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_graph(id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 0\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link\n)\nSELECT * FROM search_graph;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_graph(id, link, data, depth, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": ") AS (\n    SELECT g.id, g.link, g.data, 0,\n      ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1,\n      ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n)\nSELECT * FROM search_graph;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_graph(id, link, data, depth, ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": ") AS (\n    SELECT g.id, g.link, g.data, 0,\n      ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1,\n      ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\n)\nSELECT * FROM search_graph;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE search_graph(id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 1\n    FROM graph g\n  UNION ALL\n    SELECT g.id, g.link, g.data, sg.depth + 1\n    FROM graph g, search_graph sg\n    WHERE g.id = sg.link\n) ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nSELECT * FROM search_graph;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE t(n) AS (\n    SELECT 1\n  UNION ALL\n    SELECT n+1 FROM t\n)\nSELECT n FROM t ", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH w AS (\n    SELECT * FROM big_table\n)\nSELECT * FROM w WHERE key = 123;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nSELECT * FROM big_table WHERE key = 123;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH w AS (\n    SELECT * FROM big_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref\nWHERE w2.key = 123;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH w AS NOT MATERIALIZED (\n    SELECT * FROM big_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref\nWHERE w2.key = 123;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH w AS (\n    SELECT key, very_expensive_function(val) as f FROM some_table\n)\nSELECT * FROM w AS w1 JOIN w AS w2 ON w1.f = w2.f;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH moved_rows AS (\n    DELETE FROM products\n    WHERE\n        \"date\" >= '2010-10-01' AND\n        \"date\" < '2010-11-01'\n    RETURNING *\n)\nINSERT INTO products_log\nSELECT * FROM moved_rows;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH t AS (\n    DELETE FROM foo\n)\nDELETE FROM bar;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH RECURSIVE included_parts(sub_part, part) AS (\n    SELECT sub_part, part FROM parts WHERE part = 'our_product'\n  UNION ALL\n    SELECT p.sub_part, p.part\n    FROM included_parts pr, parts p\n    WHERE p.part = pr.sub_part\n)\nDELETE FROM parts\n  WHERE part IN (SELECT part FROM included_parts);\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH t AS (\n    UPDATE products SET price = price * 1.05\n    RETURNING *\n)\nSELECT * FROM products;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nWITH t AS (\n    UPDATE products SET price = price * 1.05\n    RETURNING *\n)\nSELECT * FROM t;\n", "source": "https://www.postgresql.org/docs/current/queries-with.html"},
{"sql": "\nDELETE FROM products WHERE price = 10;\n", "source": "https://www.postgresql.org/docs/current/dml-delete.html"},
{"sql": "\nDELETE FROM products;\n", "source": "https://www.postgresql.org/docs/current/dml-delete.html"},
{"sql": "\nVALUES (1, 'one'), (2, 'two'), (3, 'three');\n", "source": "https://www.postgresql.org/docs/current/queries-values.html"},
{"sql": "\nSELECT 1 AS column1, 'one' AS column2\nUNION ALL\nSELECT 2, 'two'\nUNION ALL\nSELECT 3, 'three';\n", "source": "https://www.postgresql.org/docs/current/queries-values.html"},
{"sql": "\n=> SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (3, 'three')) AS t (num,letter);\n num | letter\n-----+--------\n   1 | one\n   2 | two\n   3 | three\n(3 rows)\n", "source": "https://www.postgresql.org/docs/current/queries-values.html"},
{"sql": "\nCREATE TABLE users (firstname text, lastname text, id serial primary key);\n\nINSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;\n", "source": "https://www.postgresql.org/docs/current/dml-returning.html"},
{"sql": "\nUPDATE products SET price = price * 1.10\n  WHERE price <= 99.99\n  RETURNING name, price AS new_price;\n", "source": "https://www.postgresql.org/docs/current/dml-returning.html"},
{"sql": "\nDELETE FROM products\n  WHERE obsoletion_date = 'today'\n  RETURNING *;\n", "source": "https://www.postgresql.org/docs/current/dml-returning.html"},
{"sql": "\nCREATE TABLE capitals (\n  name       text,\n  population real,\n  elevation  int,    -- (in ft)\n  state      char(2)\n);\n\nCREATE TABLE non_capitals (\n  name       text,\n  population real,\n  elevation  int     -- (in ft)\n);\n\nCREATE VIEW cities AS\n  SELECT name, population, elevation FROM capitals\n    UNION\n  SELECT name, population, elevation FROM non_capitals;\n", "source": "https://www.postgresql.org/docs/current/tutorial-inheritance.html"},
{"sql": "\nCREATE TABLE cities (\n  name       text,\n  population real,\n  elevation  int     -- (in ft)\n);\n\nCREATE TABLE capitals (\n  state      char(2) UNIQUE NOT NULL\n) INHERITS (cities);\n", "source": "https://www.postgresql.org/docs/current/tutorial-inheritance.html"},
{"sql": "\nSELECT name, elevation\n  FROM cities\n  WHERE elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/tutorial-inheritance.html"},
{"sql": "\nSELECT name, elevation\n    FROM ONLY cities\n    WHERE elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/tutorial-inheritance.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1;\n\n                         QUERY PLAN\n-------------------------------------------------------------\n Seq Scan on tenk1  (cost=0.00..458.00 rows=10000 width=244)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nSELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';\n\n relpages | reltuples\n----------+-----------\n      358 |     10000\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 WHERE unique1 < 1000;\n\n                                   QUERY PLAN\n-------------------------------------------------------------------\u200b-------------\n Bitmap Heap Scan on tenk1  (cost=24.06..394.64 rows=1007 width=244)\n   Recheck Cond: (unique1 < 1000)\n   ->  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)\n         Index Cond: (unique1 < 1000)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nSELECT histogram_bounds FROM pg_stats\nWHERE tablename='tenk1' AND attname='unique1';\n\n                   histogram_bounds\n------------------------------------------------------\n {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets\n            = (1 + (1000 - 993)/(1997 - 993))/10\n            = 0.100697\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nrows = rel_cardinality * selectivity\n     = 10000 * 0.100697\n     = 1007  (rounding off)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';\n\n                        QUERY PLAN\n----------------------------------------------------------\n Seq Scan on tenk1  (cost=0.00..483.00 rows=30 width=244)\n   Filter: (stringu1 = 'CRAAAA'::name)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nSELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats\nWHERE tablename='tenk1' AND attname='stringu1';\n\nnull_frac         | 0\nn_distinct        | 676\nmost_common_vals  | {EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,\u200bJOAAAA,MCAAAA,NAAAAA,WGAAAA}\nmost_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,\u200b0.003,0.003,0.003,0.003}\n\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = mcf[3]\n            = 0.003\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nrows = 10000 * 0.003\n     = 30\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';\n\n                        QUERY PLAN\n----------------------------------------------------------\n Seq Scan on tenk1  (cost=0.00..483.00 rows=15 width=244)\n   Filter: (stringu1 = 'xxx'::name)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = (1 - sum(mvf))/(num_distinct - num_mcv)\n            = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +\n                    0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)\n            = 0.0014559\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nrows = 10000 * 0.0014559\n     = 15  (rounding off)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 WHERE stringu1 < 'IAAAAA';\n\n                         QUERY PLAN\n------------------------------------------------------------\n Seq Scan on tenk1  (cost=0.00..483.00 rows=3077 width=244)\n   Filter: (stringu1 < 'IAAAAA'::name)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nSELECT histogram_bounds FROM pg_stats\nWHERE tablename='tenk1' AND attname='stringu1';\n\n                                histogram_bounds\n-------------------------------------------------------------------\u200b-------------\n {AAAAAA,CQAAAA,FRAAAA,IBAAAA,KRAAAA,NFAAAA,PSAAAA,SGAAAA,VAAAAA,\u200bXLAAAA,ZZAAAA}\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = sum(relevant mvfs)\n            = 0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003\n            = 0.01833333\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = mcv_selectivity + histogram_selectivity * histogram_fraction\n            = 0.01833333 + 0.298387 * 0.96966667\n            = 0.307669\n\nrows        = 10000 * 0.307669\n            = 3077  (rounding off)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 WHERE unique1 < 1000 AND stringu1 = 'xxx';\n\n                                   QUERY PLAN\n-------------------------------------------------------------------\u200b-------------\n Bitmap Heap Scan on tenk1  (cost=23.80..396.91 rows=1 width=244)\n   Recheck Cond: (unique1 < 1000)\n   Filter: (stringu1 = 'xxx'::name)\n   ->  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)\n         Index Cond: (unique1 < 1000)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = selectivity(unique1 < 1000) * selectivity(stringu1 = 'xxx')\n            = 0.100697 * 0.0014559\n            = 0.0001466\n\nrows        = 10000 * 0.0001466\n            = 1  (rounding off)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nEXPLAIN SELECT * FROM tenk1 t1, tenk2 t2\nWHERE t1.unique1 < 50 AND t1.unique2 = t2.unique2;\n\n                                      QUERY PLAN\n-------------------------------------------------------------------\u200b-------------------\n Nested Loop  (cost=4.64..456.23 rows=50 width=488)\n   ->  Bitmap Heap Scan on tenk1 t1  (cost=4.64..142.17 rows=50 width=244)\n         Recheck Cond: (unique1 < 50)\n         ->  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.63 rows=50 width=0)\n               Index Cond: (unique1 < 50)\n   ->  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.00..6.27 rows=1 width=244)\n         Index Cond: (unique2 = t1.unique2)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = (0 + (50 - bucket[1].min)/(bucket[1].max - bucket[1].min))/num_buckets\n            = (0 + (50 - 0)/(993 - 0))/10\n            = 0.005035\n\nrows        = 10000 * 0.005035\n            = 50  (rounding off)\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nSELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats\nWHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';\n\ntablename  | null_frac | n_distinct | most_common_vals\n-----------+-----------+------------+------------------\n tenk1     |         0 |         -1 |\n tenk2     |         0 |         -1 |\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nselectivity = (1 - null_frac1) * (1 - null_frac2) * min(1/num_distinct1, 1/num_distinct2)\n            = (1 - 0) * (1 - 0) / max(10000, 10000)\n            = 0.0001\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nrows = (outer_cardinality * inner_cardinality) * selectivity\n     = (50 * 10000) * 0.0001\n     = 50\n", "source": "https://www.postgresql.org/docs/current/row-estimation-examples.html"},
{"sql": "\nCREATE TABLE t (a INT, b INT);\nINSERT INTO t SELECT i % 100, i % 100 FROM generate_series(1, 10000) s(i);\nANALYZE t;\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nSELECT relpages, reltuples FROM pg_class WHERE relname = 't';\n\n relpages | reltuples\n----------+-----------\n       45 |     10000\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1;\n                                 QUERY PLAN                                  \n-------------------------------------------------------------------\u200b------------\n Seq Scan on t  (cost=0.00..170.00 rows=100 width=8) (actual rows=100 loops=1)\n   Filter: (a = 1)\n   Rows Removed by Filter: 9900\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;\n                                 QUERY PLAN                                  \n-------------------------------------------------------------------\u200b----------\n Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=100 loops=1)\n   Filter: ((a = 1) AND (b = 1))\n   Rows Removed by Filter: 9900\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nCREATE STATISTICS stts (dependencies) ON a, b FROM t;\nANALYZE t;\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;\n                                  QUERY PLAN                                   \n-------------------------------------------------------------------\u200b------------\n Seq Scan on t  (cost=0.00..195.00 rows=100 width=8) (actual rows=100 loops=1)\n   Filter: ((a = 1) AND (b = 1))\n   Rows Removed by Filter: 9900\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a;\n                                       QUERY PLAN                                        \n-------------------------------------------------------------------\u200b----------------------\n HashAggregate  (cost=195.00..196.00 rows=100 width=12) (actual rows=100 loops=1)\n   Group Key: a\n   ->  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=4) (actual rows=10000 loops=1)\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;\n                                       QUERY PLAN                                        \n-------------------------------------------------------------------\u200b-------------------------\n HashAggregate  (cost=220.00..230.00 rows=1000 width=16) (actual rows=100 loops=1)\n   Group Key: a, b\n   ->  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=8) (actual rows=10000 loops=1)\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nDROP STATISTICS stts;\nCREATE STATISTICS stts (dependencies, ndistinct) ON a, b FROM t;\nANALYZE t;\nEXPLAIN (ANALYZE, TIMING OFF) SELECT COUNT(*) FROM t GROUP BY a, b;\n                                       QUERY PLAN                                        \n-------------------------------------------------------------------\u200b-------------------------\n HashAggregate  (cost=220.00..221.00 rows=100 width=16) (actual rows=100 loops=1)\n   Group Key: a, b\n   ->  Seq Scan on t  (cost=0.00..145.00 rows=10000 width=8) (actual rows=10000 loops=1)\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nDROP STATISTICS stts;\nCREATE STATISTICS stts2 (mcv) ON a, b FROM t;\nANALYZE t;\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 1;\n                                   QUERY PLAN\n-------------------------------------------------------------------\u200b------------\n Seq Scan on t  (cost=0.00..195.00 rows=100 width=8) (actual rows=100 loops=1)\n   Filter: ((a = 1) AND (b = 1))\n   Rows Removed by Filter: 9900\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a = 1 AND b = 10;\n                                 QUERY PLAN\n-------------------------------------------------------------------\u200b--------\n Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=0 loops=1)\n   Filter: ((a = 1) AND (b = 10))\n   Rows Removed by Filter: 10000\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nEXPLAIN (ANALYZE, TIMING OFF) SELECT * FROM t WHERE a <= 49 AND b > 49;\n                                QUERY PLAN\n-------------------------------------------------------------------\u200b--------\n Seq Scan on t  (cost=0.00..195.00 rows=1 width=8) (actual rows=0 loops=1)\n   Filter: ((a <= 49) AND (b > 49))\n   Rows Removed by Filter: 10000\n", "source": "https://www.postgresql.org/docs/current/multivariate-statistics-examples.html"},
{"sql": "\nDELETE FROM weather WHERE city = 'Hayward';\n", "source": "https://www.postgresql.org/docs/current/tutorial-delete.html"},
{"sql": "\nSELECT * FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-delete.html"},
{"sql": "\nUPDATE weather\n    SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2\n    WHERE date > '1994-11-28';\n", "source": "https://www.postgresql.org/docs/current/tutorial-update.html"},
{"sql": "\nSELECT * FROM weather;\n\n     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n San Francisco |      41 |      55 |    0 | 1994-11-29\n Hayward       |      35 |      52 |      | 1994-11-29\n(3 rows)\n", "source": "https://www.postgresql.org/docs/current/tutorial-update.html"},
{"sql": "\nSELECT max(temp_lo) FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nSELECT city FROM weather WHERE temp_lo = max(temp_lo);     ", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nSELECT city FROM weather\n    WHERE temp_lo = (SELECT max(temp_lo) FROM weather);\n", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nSELECT city, max(temp_lo)\n    FROM weather\n    GROUP BY city;\n", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nSELECT city, max(temp_lo)\n    FROM weather\n    GROUP BY city\n    HAVING max(temp_lo) < 40;\n", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nSELECT city, max(temp_lo)\n    FROM weather\n    WHERE city LIKE 'S%'            -- ", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "(1)\n    GROUP BY city\n    HAVING max(temp_lo) < 40;\n", "source": "https://www.postgresql.org/docs/current/tutorial-agg.html"},
{"sql": "\nINSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');\n", "source": "https://www.postgresql.org/docs/current/tutorial-populate.html"},
{"sql": "\nINSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');\n", "source": "https://www.postgresql.org/docs/current/tutorial-populate.html"},
{"sql": "\nINSERT INTO weather (city, temp_lo, temp_hi, prcp, date)\n    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');\n", "source": "https://www.postgresql.org/docs/current/tutorial-populate.html"},
{"sql": "\nINSERT INTO weather (date, city, temp_hi, temp_lo)\n    VALUES ('1994-11-29', 'Hayward', 54, 37);\n", "source": "https://www.postgresql.org/docs/current/tutorial-populate.html"},
{"sql": "\nCOPY weather FROM '/home/user/weather.txt';\n", "source": "https://www.postgresql.org/docs/current/tutorial-populate.html"},
{"sql": "\nSELECT * FROM weather JOIN cities ON city = name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT city, temp_lo, temp_hi, prcp, date, location\n    FROM weather JOIN cities ON city = name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT weather.city, weather.temp_lo, weather.temp_hi,\n       weather.prcp, weather.date, cities.location\n    FROM weather JOIN cities ON weather.city = cities.name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT *\n    FROM weather, cities\n    WHERE city = name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT *\n    FROM weather LEFT OUTER JOIN cities ON weather.city = cities.name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT w1.city, w1.temp_lo AS low, w1.temp_hi AS high,\n       w2.city, w2.temp_lo AS low, w2.temp_hi AS high\n    FROM weather w1 JOIN weather w2\n        ON w1.temp_lo < w2.temp_lo AND w1.temp_hi > w2.temp_hi;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT *\n    FROM weather w JOIN cities c ON w.city = c.name;\n", "source": "https://www.postgresql.org/docs/current/tutorial-join.html"},
{"sql": "\nSELECT * FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT city, temp_lo, temp_hi, prcp, date FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT * FROM weather\n    WHERE city = 'San Francisco' AND prcp > 0.0;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT * FROM weather\n    ORDER BY city;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT * FROM weather\n    ORDER BY city, temp_lo;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT DISTINCT city\n    FROM weather;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nSELECT DISTINCT city\n    FROM weather\n    ORDER BY city;\n", "source": "https://www.postgresql.org/docs/current/tutorial-select.html"},
{"sql": "\nCREATE TABLE weather (\n    city            varchar(80),\n    temp_lo         int,           -- low temperature\n    temp_hi         int,           -- high temperature\n    prcp            real,          -- precipitation\n    date            date\n);\n", "source": "https://www.postgresql.org/docs/current/tutorial-table.html"},
{"sql": "\nCREATE TABLE cities (\n    name            varchar(80),\n    location        point\n);\n", "source": "https://www.postgresql.org/docs/current/tutorial-table.html"},
{"sql": "\nCREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow',\n                             'green', 'blue', 'purple');\n\nCREATE TABLE my_colors (color rainbow, note text);\n\nCREATE FUNCTION get_color_note (rainbow) RETURNS text AS\n  'SELECT note FROM my_colors WHERE color = $1'\n  LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/ddl-depend.html"},
{"sql": "\nCREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n) PARTITION BY RANGE (logdate);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement_y2006m02 PARTITION OF measurement\n    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')\n    PARTITION BY RANGE (peaktemp);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE INDEX ON measurement (logdate);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nDROP TABLE measurement_y2006m02;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nALTER TABLE measurement DETACH PARTITION measurement_y2006m02;\nALTER TABLE measurement DETACH PARTITION measurement_y2006m02 CONCURRENTLY;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement_y2008m02 PARTITION OF measurement\n    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01')\n    TABLESPACE fasttablespace;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement_y2008m02\n  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS)\n  TABLESPACE fasttablespace;\n\nALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02\n   CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' );\n\n\\copy measurement_y2008m02 from 'measurement_y2008m02'\n-- possibly some other data preparation work\n\nALTER TABLE measurement ATTACH PARTITION measurement_y2008m02\n    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01' );\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCHECK ( x = 1 )\nCHECK ( county IN ( 'Oxfordshire', 'Buckinghamshire', 'Warwickshire' ))\nCHECK ( outletID >= 100 AND outletID < 200 )\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCHECK ( outletID BETWEEN 100 AND 200 )\nCHECK ( outletID BETWEEN 200 AND 300 )\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE INDEX measurement_y2006m02_logdate ON measurement_y2006m02 (logdate);\nCREATE INDEX measurement_y2006m03_logdate ON measurement_y2006m03 (logdate);\nCREATE INDEX measurement_y2007m11_logdate ON measurement_y2007m11 (logdate);\nCREATE INDEX measurement_y2007m12_logdate ON measurement_y2007m12 (logdate);\nCREATE INDEX measurement_y2008m01_logdate ON measurement_y2008m01 (logdate);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION measurement_insert_trigger()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO measurement_y2008m01 VALUES (NEW.*);\n    RETURN NULL;\nEND;\n$$\nLANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TRIGGER insert_measurement_trigger\n    BEFORE INSERT ON measurement\n    FOR EACH ROW EXECUTE FUNCTION measurement_insert_trigger();\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nDROP TABLE measurement_y2006m02;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nALTER TABLE measurement_y2006m02 NO INHERIT measurement;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement_y2008m02 (\n    CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' )\n) INHERITS (measurement);\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE TABLE measurement_y2008m02\n  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS);\nALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02\n   CHECK ( logdate >= DATE '2008-02-01' AND logdate < DATE '2008-03-01' );\n\\copy measurement_y2008m02 from 'measurement_y2008m02'\n-- possibly some other data preparation work\nALTER TABLE measurement_y2008m02 INHERIT measurement;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nANALYZE measurement;\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nSET enable_partition_pruning = on;                 -- the default\nSELECT count(*) FROM measurement WHERE logdate >= DATE '2008-01-01';\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nSET enable_partition_pruning = on;\nEXPLAIN SELECT count(*) FROM measurement WHERE logdate >= DATE '2008-01-01';\n                                    QUERY PLAN\n-------------------------------------------------------------------\u200b----------------\n Aggregate  (cost=37.75..37.76 rows=1 width=8)\n   ->  Seq Scan on measurement_y2008m01  (cost=0.00..33.12 rows=617 width=0)\n         Filter: (logdate >= '2008-01-01'::date)\n", "source": "https://www.postgresql.org/docs/current/ddl-partitioning.html"},
{"sql": "\nCREATE SCHEMA myschema;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nDROP SCHEMA myschema;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nDROP SCHEMA myschema CASCADE;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nCREATE SCHEMA ", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": " AUTHORIZATION ", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nSHOW search_path;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nSET search_path TO myschema,public;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nDROP TABLE mytable;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nSET search_path TO myschema;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nSELECT 3 OPERATOR(pg_catalog.+) 4;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nREVOKE CREATE ON SCHEMA public FROM PUBLIC;\n", "source": "https://www.postgresql.org/docs/current/ddl-schemas.html"},
{"sql": "\nCREATE TABLE cities (\n    name            text,\n    population      float,\n    elevation       int     -- in feet\n);\n\nCREATE TABLE capitals (\n    state           char(2)\n) INHERITS (cities);\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT name, elevation\n    FROM cities\n    WHERE elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\n   name    | elevation\n-----------+-----------\n Las Vegas |      2174\n Mariposa  |      1953\n Madison   |       845\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT name, elevation\n    FROM ONLY cities\n    WHERE elevation > 500;\n\n   name    | elevation\n-----------+-----------\n Las Vegas |      2174\n Mariposa  |      1953\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT name, elevation\n    FROM cities*\n    WHERE elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT c.tableoid, c.name, c.elevation\nFROM cities c\nWHERE c.elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\n tableoid |   name    | elevation\n----------+-----------+-----------\n   139793 | Las Vegas |      2174\n   139793 | Mariposa  |      1953\n   139798 | Madison   |       845\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT p.relname, c.name, c.elevation\nFROM cities c, pg_class p\nWHERE c.elevation > 500 AND c.tableoid = p.oid;\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\n relname  |   name    | elevation\n----------+-----------+-----------\n cities   | Las Vegas |      2174\n cities   | Mariposa  |      1953\n capitals | Madison   |       845\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nSELECT c.tableoid::regclass, c.name, c.elevation\nFROM cities c\nWHERE c.elevation > 500;\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nINSERT INTO cities (name, population, elevation, state)\nVALUES ('Albany', NULL, NULL, 'NY');\n", "source": "https://www.postgresql.org/docs/current/ddl-inherit.html"},
{"sql": "\nCREATE TABLE cities (\n        name     varchar(80) primary key,\n        location point\n);\n\nCREATE TABLE weather (\n        city      varchar(80) references cities(name),\n        temp_lo   int,\n        temp_hi   int,\n        prcp      real,\n        date      date\n);\n", "source": "https://www.postgresql.org/docs/current/tutorial-fk.html"},
{"sql": "\nINSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');\n", "source": "https://www.postgresql.org/docs/current/tutorial-fk.html"},
{"sql": "\nCREATE TABLE accounts (manager text, company text, contact_email text);\n\nALTER TABLE accounts ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY account_managers ON accounts TO managers\n    USING (manager = current_user);\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nCREATE POLICY user_policy ON users\n    USING (user_name = current_user);\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nCREATE POLICY user_sel_policy ON users\n    FOR SELECT\n    USING (true);\nCREATE POLICY user_mod_policy ON users\n    USING (user_name = current_user);\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\n-- Simple passwd-file based example\nCREATE TABLE passwd (\n  user_name             text UNIQUE NOT NULL,\n  pwhash                text,\n  uid                   int  PRIMARY KEY,\n  gid                   int  NOT NULL,\n  real_name             text NOT NULL,\n  home_phone            text,\n  extra_info            text,\n  home_dir              text NOT NULL,\n  shell                 text NOT NULL\n);\n\nCREATE ROLE admin;  -- Administrator\nCREATE ROLE bob;    -- Normal user\nCREATE ROLE alice;  -- Normal user\n\n-- Populate the table\nINSERT INTO passwd VALUES\n  ('admin','xxx',0,0,'Admin','111-222-3333',null,'/root','/bin/dash');\nINSERT INTO passwd VALUES\n  ('bob','xxx',1,1,'Bob','123-456-7890',null,'/home/bob','/bin/zsh');\nINSERT INTO passwd VALUES\n  ('alice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh');\n\n-- Be sure to enable row-level security on the table\nALTER TABLE passwd ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\n-- Administrator can see all rows and add any rows\nCREATE POLICY admin_all ON passwd TO admin USING (true) WITH CHECK (true);\n-- Normal users can view all rows\nCREATE POLICY all_view ON passwd FOR SELECT USING (true);\n-- Normal users can update their own records, but\n-- limit which shells a normal user is allowed to set\nCREATE POLICY user_mod ON passwd FOR UPDATE\n  USING (current_user = user_name)\n  WITH CHECK (\n    current_user = user_name AND\n    shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh')\n  );\n\n-- Allow admin all normal rights\nGRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin;\n-- Users only get select access on public columns\nGRANT SELECT\n  (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell)\n  ON passwd TO public;\n-- Allow users to update certain columns\nGRANT UPDATE\n  (pwhash, real_name, home_phone, extra_info, shell)\n  ON passwd TO public;\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\n-- admin can view all rows and fields\npostgres=> set role admin;\nSET\npostgres=> table passwd;\n user_name | pwhash | uid | gid | real_name |  home_phone  | extra_info | home_dir    |   shell\n-----------+--------+-----+-----+-----------+--------------+------------+-------------+-----------\n admin     | xxx    |   0 |   0 | Admin     | 111-222-3333 |            | /root       | /bin/dash\n bob       | xxx    |   1 |   1 | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh\n alice     | xxx    |   2 |   1 | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh\n(3 rows)\n\n-- Test what Alice is able to do\npostgres=> set role alice;\nSET\npostgres=> table passwd;\nERROR:  permission denied for relation passwd\npostgres=> select user_name,real_name,home_phone,extra_info,home_dir,shell from passwd;\n user_name | real_name |  home_phone  | extra_info | home_dir    |   shell\n-----------+-----------+--------------+------------+-------------+-----------\n admin     | Admin     | 111-222-3333 |            | /root       | /bin/dash\n bob       | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh\n alice     | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh\n(3 rows)\n\npostgres=> update passwd set user_name = 'joe';\nERROR:  permission denied for relation passwd\n-- Alice is allowed to change her own real_name, but no others\npostgres=> update passwd set real_name = 'Alice Doe';\nUPDATE 1\npostgres=> update passwd set real_name = 'John Doe' where user_name = 'admin';\nUPDATE 0\npostgres=> update passwd set shell = '/bin/xx';\nERROR:  new row violates WITH CHECK OPTION for \"passwd\"\npostgres=> delete from passwd;\nERROR:  permission denied for relation passwd\npostgres=> insert into passwd (user_name) values ('xxx');\nERROR:  permission denied for relation passwd\n-- Alice can change her own password; RLS silently prevents updating other rows\npostgres=> update passwd set pwhash = 'abc';\nUPDATE 1\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nCREATE POLICY admin_local_only ON passwd AS RESTRICTIVE TO admin\n    USING (pg_catalog.inet_client_addr() IS NULL);\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\n=> SELECT current_user;\n current_user \n--------------\n admin\n(1 row)\n\n=> select inet_client_addr();\n inet_client_addr \n------------------\n 127.0.0.1\n(1 row)\n\n=> TABLE passwd;\n user_name | pwhash | uid | gid | real_name | home_phone | extra_info | home_dir | shell\n-----------+--------+-----+-----+-----------+------------+------------+----------+-------\n(0 rows)\n\n=> UPDATE passwd set pwhash = NULL;\nUPDATE 0\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\n-- definition of privilege groups\nCREATE TABLE groups (group_id int PRIMARY KEY,\n                     group_name text NOT NULL);\n\nINSERT INTO groups VALUES\n  (1, 'low'),\n  (2, 'medium'),\n  (5, 'high');\n\nGRANT ALL ON groups TO alice;  -- alice is the administrator\nGRANT SELECT ON groups TO public;\n\n-- definition of users' privilege levels\nCREATE TABLE users (user_name text PRIMARY KEY,\n                    group_id int NOT NULL REFERENCES groups);\n\nINSERT INTO users VALUES\n  ('alice', 5),\n  ('bob', 2),\n  ('mallory', 2);\n\nGRANT ALL ON users TO alice;\nGRANT SELECT ON users TO public;\n\n-- table holding the information to be protected\nCREATE TABLE information (info text,\n                          group_id int NOT NULL REFERENCES groups);\n\nINSERT INTO information VALUES\n  ('barely secret', 1),\n  ('slightly secret', 2),\n  ('very secret', 5);\n\nALTER TABLE information ENABLE ROW LEVEL SECURITY;\n\n-- a row should be visible to/updatable by users whose security group_id is\n-- greater than or equal to the row's group_id\nCREATE POLICY fp_s ON information FOR SELECT\n  USING (group_id <= (SELECT group_id FROM users WHERE user_name = current_user));\nCREATE POLICY fp_u ON information FOR UPDATE\n  USING (group_id <= (SELECT group_id FROM users WHERE user_name = current_user));\n\n-- we rely only on RLS to protect the information table\nGRANT ALL ON information TO public;\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nBEGIN;\nUPDATE users SET group_id = 1 WHERE user_name = 'mallory';\nUPDATE information SET info = 'secret from mallory' WHERE group_id = 2;\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nSELECT * FROM information WHERE group_id = 2 FOR UPDATE;\n", "source": "https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},
{"sql": "\nSELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nSELECT depname, empno, salary,\n       rank() OVER (PARTITION BY depname ORDER BY salary DESC)\nFROM empsalary;\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nSELECT salary, sum(salary) OVER () FROM empsalary;\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nSELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nSELECT depname, empno, salary, enroll_date\nFROM\n  (SELECT depname, empno, salary, enroll_date,\n          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos\n     FROM empsalary\n  ) AS ss\nWHERE pos < 3;\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nSELECT sum(salary) OVER w, avg(salary) OVER w\n  FROM empsalary\n  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);\n", "source": "https://www.postgresql.org/docs/current/tutorial-window.html"},
{"sql": "\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\nUPDATE branches SET balance = balance - 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';\nUPDATE branches SET balance = balance + 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');\n", "source": "https://www.postgresql.org/docs/current/tutorial-transactions.html"},
{"sql": "\nBEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\n-- etc etc\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/tutorial-transactions.html"},
{"sql": "\nCREATE VIEW myview AS\n    SELECT name, temp_lo, temp_hi, prcp, date, location\n        FROM weather, cities\n        WHERE city = name;\n\nSELECT * FROM myview;\n", "source": "https://www.postgresql.org/docs/current/tutorial-views.html"},
{"sql": "\nALTER TABLE ", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": " OWNER TO ", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": "\nGRANT UPDATE ON accounts TO joe;\n", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": "\nREVOKE ALL ON accounts FROM PUBLIC;\n", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": "\nGRANT SELECT ON mytable TO PUBLIC;\nGRANT SELECT, UPDATE, INSERT ON mytable TO admin;\nGRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;\n", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": "\n=> \\dp mytable\n                                  Access privileges\n Schema |  Name   | Type  |   Access privileges   |   Column privileges   | Policies\n--------+---------+-------+-----------------------+-----------------------+----------\n public | mytable | table | miriam=arwdDxt/miriam+| col1:                +|\n        |         |       | =r/miriam            +|   miriam_rw=rw/miriam |\n        |         |       | admin=arw/miriam      |                       |\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/ddl-priv.html"},
{"sql": "\nALTER TABLE products ADD COLUMN description text;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ADD COLUMN description text CHECK (description <> '');\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products DROP COLUMN description;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products DROP COLUMN description CASCADE;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ADD CHECK (name <> '');\nALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);\nALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ALTER COLUMN product_no SET NOT NULL;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products DROP CONSTRAINT some_name;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ALTER COLUMN product_no DROP NOT NULL;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ALTER COLUMN price DROP DEFAULT;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products RENAME COLUMN product_no TO product_number;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nALTER TABLE products RENAME TO items;\n", "source": "https://www.postgresql.org/docs/current/ddl-alter.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": " CHECK (price > 0)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CHECK (price > 0),\n    discounted_price numeric CHECK (discounted_price > 0),\n    ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0),\n    CHECK (price > discounted_price)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0 AND price > discounted_price)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    CHECK (price > 0),\n    discounted_price numeric,\n    CHECK (discounted_price > 0),\n    ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": " CHECK (price > discounted_price)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    name text ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer NOT NULL,\n    name text NOT NULL,\n    price numeric NOT NULL CHECK (price > 0)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer NULL,\n    name text NULL,\n    price numeric NULL\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric,\n    ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE example (\n    a integer,\n    b integer,\n    c integer,\n    ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": " UNIQUE,\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer UNIQUE NOT NULL,\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE example (\n    a integer,\n    b integer,\n    c integer,\n    ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer PRIMARY KEY,\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    quantity integer\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE orders (\n    order_id integer PRIMARY KEY,\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    quantity integer\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE t1 (\n  a integer PRIMARY KEY,\n  b integer,\n  c integer,\n  ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    order_id integer REFERENCES orders ", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": ",\n    quantity integer,\n    PRIMARY KEY (product_no, order_id)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nCREATE TABLE circles (\n    c circle,\n    EXCLUDE USING gist (c WITH &&)\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-constraints.html"},
{"sql": "\nUPDATE products SET price = 10 WHERE price = 5;\n", "source": "https://www.postgresql.org/docs/current/dml-update.html"},
{"sql": "\nUPDATE products SET price = price * 1.10;\n", "source": "https://www.postgresql.org/docs/current/dml-update.html"},
{"sql": "\nUPDATE mytable SET a = 5, b = 3, c = 1 WHERE a > 0;\n", "source": "https://www.postgresql.org/docs/current/dml-update.html"},
{"sql": "\nCREATE TABLE my_first_table (\n    first_column text,\n    second_column integer\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-basics.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/ddl-basics.html"},
{"sql": "\nDROP TABLE my_first_table;\nDROP TABLE products;\n", "source": "https://www.postgresql.org/docs/current/ddl-basics.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric ", "source": "https://www.postgresql.org/docs/current/ddl-default.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer ", "source": "https://www.postgresql.org/docs/current/ddl-default.html"},
{"sql": "\nCREATE TABLE products (\n    product_no ", "source": "https://www.postgresql.org/docs/current/ddl-default.html"},
{"sql": "\nCREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products VALUES (1, 'Cheese', 9.99);\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);\nINSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products (product_no, name) VALUES (1, 'Cheese');\nINSERT INTO products VALUES (1, 'Cheese');\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);\nINSERT INTO products DEFAULT VALUES;\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products (product_no, name, price) VALUES\n    (1, 'Cheese', 9.99),\n    (2, 'Bread', 1.99),\n    (3, 'Milk', 2.99);\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nINSERT INTO products (product_no, name, price)\n  SELECT product_no, name, price FROM new_products\n    WHERE release_date = 'today';\n", "source": "https://www.postgresql.org/docs/current/dml-insert.html"},
{"sql": "\nCREATE FUNCTION concat_lower_or_upper(a text, b text, uppercase boolean DEFAULT false)\nRETURNS text\nAS\n$$\n SELECT CASE\n        WHEN $3 THEN UPPER($1 || ' ' || $2)\n        ELSE LOWER($1 || ' ' || $2)\n        END;\n$$\nLANGUAGE SQL IMMUTABLE STRICT;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html"},
{"sql": "\nSELECT * FROM MY_TABLE;\nUPDATE MY_TABLE SET A = 5;\nINSERT INTO MY_TABLE VALUES (3, 'hi there');\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nUPDATE MY_TABLE SET A = 5;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nuPDaTE my_TabLE SeT a = 5;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nUPDATE my_table SET a = 5;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nUPDATE \"my_table\" SET \"a\" = 5;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&\"d\\0061t\\+000061\"\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&\"\\0441\\043B\\043E\\043D\"\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&\"d!0061t!+000061\" UESCAPE '!'\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nSELECT 'foo'\n'bar';\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nSELECT 'foobar';\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nSELECT 'foo'      'bar';\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&'d\\0061t\\+000061'\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&'\\0441\\043B\\043E\\043D'\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nU&'d!0061t!+000061' UESCAPE '!'\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\n$$Dianne's horse$$\n$SomeTag$Dianne's horse$SomeTag$\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\n$function$\nBEGIN\n    RETURN ($1 ~ $q$[\\t\\r\\n\\v\\\\]$q$);\nEND;\n$function$\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nREAL '1.23'  -- string style\n1.23::REAL   -- PostgreSQL (historical) style\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\n-- This is a standard SQL comment\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\n/* multiline comment\n * with nesting: /* nested block comment */\n */\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nSELECT 3 OPERATOR(pg_catalog.+) 4;\n", "source": "https://www.postgresql.org/docs/current/sql-syntax-lexical.html"},
{"sql": "\nSELECT a, b FROM table1 ORDER BY a + b, c;\n", "source": "https://www.postgresql.org/docs/current/queries-order.html"},
{"sql": "\nSELECT a + b AS sum, c FROM table1 ORDER BY sum;\nSELECT a, max(b) FROM table1 GROUP BY a ORDER BY 1;\n", "source": "https://www.postgresql.org/docs/current/queries-order.html"},
{"sql": "\nSELECT a + b AS sum, c FROM table1 ORDER BY sum + c;          -- wrong\n", "source": "https://www.postgresql.org/docs/current/queries-order.html"},
{"sql": "\n num | name\n-----+------\n   1 | a\n   2 | b\n   3 | c\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\n num | value\n-----+-------\n   1 | xxx\n   3 | yyy\n   5 | zzz\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM some_very_long_table_name s JOIN another_fairly_long_name a ON s.id = a.num;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM my_table AS m WHERE my_table.a > 5;    -- wrong\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM people AS mother JOIN people AS child ON mother.id = child.mother_id;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nFROM (SELECT * FROM table1) AS alias_name\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nFROM (VALUES ('anne', 'smith'), ('bob', 'jones'), ('joe', 'blow'))\n     AS names(first, last)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nCREATE TABLE foo (fooid int, foosubid int, fooname text);\n\nCREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$\n    SELECT * FROM foo WHERE fooid = $1;\n$$ LANGUAGE SQL;\n\nSELECT * FROM getfoo(1) AS t1;\n\nSELECT * FROM foo\n    WHERE foosubid IN (\n                        SELECT foosubid\n                        FROM getfoo(foo.fooid) z\n                        WHERE z.fooid = foo.fooid\n                      );\n\nCREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);\n\nSELECT * FROM vw_getfoo;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT *\n    FROM dblink('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc')\n      AS t1(proname name, prosrc text)\n    WHERE proname LIKE 'bytea%';\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT *\nFROM ROWS FROM\n    (\n        json_to_recordset('[{\"a\":40,\"b\":\"foo\"},{\"a\":\"100\",\"b\":\"bar\"}]')\n            AS (a INTEGER, b TEXT),\n        generate_series(1, 3)\n    ) AS x (p, q, s)\nORDER BY p;\n\n  p  |  q  | s\n-----+-----+---\n  40 | foo | 1\n 100 | bar | 2\n     |     | 3\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM foo, LATERAL (SELECT * FROM bar WHERE bar.id = foo.bar_id) ss;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM foo, bar WHERE bar.id = foo.bar_id;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT p1.id, p2.id, v1, v2\nFROM polygons p1, polygons p2,\n     LATERAL vertices(p1.poly) v1,\n     LATERAL vertices(p2.poly) v2\nWHERE (v1 <-> v2) < 10 AND p1.id != p2.id;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT p1.id, p2.id, v1, v2\nFROM polygons p1 CROSS JOIN LATERAL vertices(p1.poly) v1,\n     polygons p2 CROSS JOIN LATERAL vertices(p2.poly) v2\nWHERE (v1 <-> v2) < 10 AND p1.id != p2.id;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT m.name\nFROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true\nWHERE pname IS NULL;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nFROM a, b WHERE a.id = b.id AND b.val > 5\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nFROM a INNER JOIN b ON (a.id = b.id) WHERE b.val > 5\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nFROM a NATURAL JOIN b WHERE b.val > 5\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT product_id, p.name, (sum(s.units) * p.price) AS sales\n    FROM products p LEFT JOIN sales s USING (product_id)\n    GROUP BY product_id, p.name, p.price;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT product_id, p.name, (sum(s.units) * (p.price - p.cost)) AS profit\n    FROM products p LEFT JOIN sales s USING (product_id)\n    WHERE s.date > CURRENT_DATE - INTERVAL '4 weeks'\n    GROUP BY product_id, p.name, p.price, p.cost\n    HAVING sum(p.price * s.units) > 5000;\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nROLLUP ( ", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUPING SETS (\n    ( ", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": " ),\n    ( ", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": " ),\n    ( )\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nCUBE ( a, b, c )\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUPING SETS (\n    ( a, b, c ),\n    ( a, b    ),\n    ( a,    c ),\n    ( a       ),\n    (    b, c ),\n    (    b    ),\n    (       c ),\n    (         )\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nCUBE ( (a, b), (c, d) )\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUPING SETS (\n    ( a, b, c, d ),\n    ( a, b       ),\n    (       c, d ),\n    (            )\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nROLLUP ( a, (b, c), d )\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUPING SETS (\n    ( a, b, c, d ),\n    ( a, b, c    ),\n    ( a          ),\n    (            )\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY a, CUBE (b, c), GROUPING SETS ((d), (e))\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY GROUPING SETS (\n    (a, b, c, d), (a, b, c, e),\n    (a, b, d),    (a, b, e),\n    (a, c, d),    (a, c, e),\n    (a, d),       (a, e)\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY ROLLUP (a, b), ROLLUP (a, c)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY GROUPING SETS (\n    (a, b, c),\n    (a, b),\n    (a, b),\n    (a, c),\n    (a),\n    (a),\n    (a, c),\n    (a),\n    ()\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY ", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": " ROLLUP (a, b), ROLLUP (a, c)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nGROUP BY GROUPING SETS (\n    (a, b, c),\n    (a, b),\n    (a, c),\n    (a),\n    ()\n)\n", "source": "https://www.postgresql.org/docs/current/queries-table-expressions.html"},
{"sql": "\nSELECT * FROM table1;\n", "source": "https://www.postgresql.org/docs/current/queries-overview.html"},
{"sql": "\nSELECT a, b + c FROM table1;\n", "source": "https://www.postgresql.org/docs/current/queries-overview.html"},
{"sql": "\nSELECT 3 * 4;\n", "source": "https://www.postgresql.org/docs/current/queries-overview.html"},
{"sql": "\nSELECT random();\n", "source": "https://www.postgresql.org/docs/current/queries-overview.html"},
{"sql": "\nCREATE FUNCTION dept(text) RETURNS dept\n    AS $$ SELECT * FROM dept WHERE name = $1 $$\n    LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nmytable.arraycolumn[4]\nmytable.two_d_column[17][34]\n$1[10:42]\n(arrayfunction(a,b))[42]\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nmytable.mycolumn\n$1.somecolumn\n(rowfunction(a,b)).col3\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\n(compositecol).somefield\n(mytable.compositecol).somefield\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\n(compositecol).*\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT array_agg(a ORDER BY b DESC) FROM table;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT string_agg(a, ',' ORDER BY a) FROM table;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT string_agg(a ORDER BY a, ',') FROM table;  -- incorrect\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY income) FROM households;\n percentile_cont\n-----------------\n           50489\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT\n    count(*) AS unfiltered,\n    count(*) FILTER (WHERE i < 5) AS filtered\nFROM generate_series(1,10) AS s(i);\n unfiltered | filtered\n------------+----------\n         10 |        4\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT * FROM tbl WHERE a > 'foo' COLLATE \"C\";\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT * FROM tbl WHERE a COLLATE \"C\" > 'foo';\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT * FROM tbl WHERE (a > 'foo') COLLATE \"C\";\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT name, (SELECT max(pop) FROM cities WHERE cities.state = states.name)\n    FROM states;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ARRAY[1,2,3+4];\n  array\n---------\n {1,2,7}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ARRAY[1,2,22.7]::integer[];\n  array\n----------\n {1,2,23}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];\n     array\n---------------\n {{1,2},{3,4}}\n(1 row)\n\nSELECT ARRAY[[1,2],[3,4]];\n     array\n---------------\n {{1,2},{3,4}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nCREATE TABLE arr(f1 int[], f2 int[]);\n\nINSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], ARRAY[[5,6],[7,8]]);\n\nSELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;\n                     array\n------------------------------------------------\n {{{1,2},{3,4}},{{5,6},{7,8}},{{9,10},{11,12}}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ARRAY[]::integer[];\n array\n-------\n {}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');\n                              array\n------------------------------------------------------------------\n {2011,1954,1948,1952,1951,1244,1950,2005,1949,1953,2006,31,2412}\n(1 row)\n\nSELECT ARRAY(SELECT ARRAY[i, i*2] FROM generate_series(1,5) AS a(i));\n              array\n----------------------------------\n {{1,2},{2,4},{3,6},{4,8},{5,10}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ROW(1,2.5,'this is a test');\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ROW(t.*, 42) FROM t;\nSELECT ROW(t.f1, t.f2, 42) FROM t;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nCREATE TABLE mytable(f1 int, f2 float, f3 text);\n\nCREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;\n\n-- No cast needed since only one getf1() exists\nSELECT getf1(ROW(1,2.5,'this is a test'));\n getf1\n-------\n     1\n(1 row)\n\nCREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);\n\nCREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;\n\n-- Now we need a cast to indicate which function to call:\nSELECT getf1(ROW(1,2.5,'this is a test'));\nERROR:  function getf1(record) is not unique\n\nSELECT getf1(ROW(1,2.5,'this is a test')::mytable);\n getf1\n-------\n     1\n(1 row)\n\nSELECT getf1(CAST(ROW(11,'this is a test',2.5) AS myrowtype));\n getf1\n-------\n    11\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT ROW(1,2.5,'this is a test') = ROW(1, 3, 'not the same');\n\nSELECT ROW(table.*) IS NULL FROM table;  -- detect all-null rows\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT true OR somefunc();\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT somefunc() OR true;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT CASE WHEN x > 0 THEN x ELSE 1/0 END FROM tab;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nSELECT CASE WHEN min(employees) > 0\n            THEN avg(expenses / employees)\n       END\n    FROM departments;\n", "source": "https://www.postgresql.org/docs/current/sql-expressions.html"},
{"sql": "\nCREATE TEXT SEARCH CONFIGURATION public.english ( COPY = pg_catalog.english );\n\nCREATE TEXT SEARCH DICTIONARY english_ispell (\n    TEMPLATE = ispell,\n    DictFile = english,\n    AffFile = english,\n    StopWords = english\n);\n\nALTER TEXT SEARCH CONFIGURATION public.english\n   ALTER MAPPING FOR asciiword WITH english_ispell, english_stem;\n", "source": "https://www.postgresql.org/docs/current/textsearch-debugging.html"},
{"sql": "\nALTER TEXT SEARCH CONFIGURATION astro_en\n    ADD MAPPING FOR asciiword WITH astrosyn, english_ispell, english_stem;\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY public.simple_dict (\n    TEMPLATE = pg_catalog.simple,\n    STOPWORDS = english\n);\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\npostgres        pgsql\npostgresql      pgsql\npostgre pgsql\ngogle   googl\nindices index*\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\n? one ? two : swsw\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY thesaurus_simple (\n    TEMPLATE = thesaurus,\n    DictFile = mythesaurus,\n    Dictionary = pg_catalog.english_stem\n);\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_simple;\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nsupernovae stars : sn\ncrab nebulae : crab\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY thesaurus_astro (\n    TEMPLATE = thesaurus,\n    DictFile = thesaurus_astro,\n    Dictionary = english_stem\n);\n\nALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_astro, english_stem;\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\niconv -f ISO_8859-1 -t UTF-8 -o nn_no.affix nn_NO.aff\niconv -f ISO_8859-1 -t UTF-8 -o nn_no.dict nn_NO.dic\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY english_hunspell (\n    TEMPLATE = ispell,\n    DictFile = en_us,\n    AffFile = en_us,\n    Stopwords = english);\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nprefixes\nflag *A:\n    .           >   RE      # As in enter > reenter\nsuffixes\nflag T:\n    E           >   ST      # As in late > latest\n    [^AEIOU]Y   >   -Y,IEST # As in dirty > dirtiest\n    [AEIOU]Y    >   EST     # As in gray > grayest\n    [^EY]       >   EST     # As in small > smallest\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nlapse/ADGRS\nlard/DGRS\nlarge/PRTY\nlark/MRS\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nbasic_form/affix_class_name\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\ncondition > [-stripping_letters,] adding_affix\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\ncompoundwords  controlled z\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nSELECT ts_lexize('norwegian_ispell', 'overbuljongterningpakkmesterassistent');\n   {over,buljong,terning,pakk,mester,assistent}\nSELECT ts_lexize('norwegian_ispell', 'sjokoladefabrikk');\n   {sjokoladefabrikk,sjokolade,fabrikk}\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nPFX A Y 1\nPFX A   0     re         .\nSFX T N 4\nSFX T   0     st         e\nSFX T   y     iest       [^aeiou]y\nSFX T   0     est        [aeiou]y\nSFX T   0     est        [^ey]\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nlarder/M\nlardy/RT\nlarge/RSPMYT\nlargehearted\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY english_stem (\n    TEMPLATE = snowball,\n    Language = english,\n    StopWords = english\n);\n", "source": "https://www.postgresql.org/docs/current/textsearch-dictionaries.html"},
{"sql": "\nCREATE FUNCTION messages_trigger() RETURNS trigger AS $$\nbegin\n  new.tsv :=\n     setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A') ||\n     setweight(to_tsvector('pg_catalog.english', coalesce(new.body,'')), 'D');\n  return new;\nend\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE\n    ON messages FOR EACH ROW EXECUTE FUNCTION messages_trigger();\n", "source": "https://www.postgresql.org/docs/current/textsearch-features.html"},
{"sql": "\nSELECT * FROM ts_stat('SELECT vector FROM apod')\nORDER BY nentry DESC, ndoc DESC, word\nLIMIT 10;\n", "source": "https://www.postgresql.org/docs/current/textsearch-features.html"},
{"sql": "\nSELECT * FROM ts_stat('SELECT vector FROM apod', 'ab')\nORDER BY nentry DESC, ndoc DESC, word\nLIMIT 10;\n", "source": "https://www.postgresql.org/docs/current/textsearch-features.html"},
{"sql": "\nCREATE TEXT SEARCH CONFIGURATION public.pg ( COPY = pg_catalog.english );\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\npostgres    pg\npgsql       pg\npostgresql  pg\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY pg_dict (\n    TEMPLATE = synonym,\n    SYNONYMS = pg_dict\n);\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nCREATE TEXT SEARCH DICTIONARY english_ispell (\n    TEMPLATE = ispell,\n    DictFile = english,\n    AffFile = english,\n    StopWords = english\n);\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nALTER TEXT SEARCH CONFIGURATION pg\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,\n                      word, hword, hword_part\n    WITH pg_dict, english_ispell, english_stem;\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nALTER TEXT SEARCH CONFIGURATION pg\n    DROP MAPPING FOR email, url, url_path, sfloat, float;\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nSELECT * FROM ts_debug('public.pg', '\nPostgreSQL, the highly scalable, SQL compliant, open source object-relational\ndatabase management system, is now undergoing beta testing of the next\nversion of our software.\n');\n", "source": "https://www.postgresql.org/docs/current/textsearch-configuration.html"},
{"sql": "\nUPDATE tt SET ti =\n    setweight(to_tsvector(coalesce(title,'')), 'A')    ||\n    setweight(to_tsvector(coalesce(keyword,'')), 'B')  ||\n    setweight(to_tsvector(coalesce(abstract,'')), 'C') ||\n    setweight(to_tsvector(coalesce(body,'')), 'D');\n", "source": "https://www.postgresql.org/docs/current/textsearch-controls.html"},
{"sql": "\n{0.1, 0.2, 0.4, 1.0}\n", "source": "https://www.postgresql.org/docs/current/textsearch-controls.html"},
{"sql": "\nSELECT title\nFROM pgweb\nWHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nSELECT title\nFROM pgweb\nWHERE to_tsvector(body) @@ to_tsquery('friend');\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nSELECT title\nFROM pgweb\nWHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create & table')\nORDER BY last_mod_date DESC\nLIMIT 10;\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nCREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', body));\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nCREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector(config_name, body));\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nCREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nALTER TABLE pgweb\n    ADD COLUMN textsearchable_index_col tsvector\n               GENERATED ALWAYS AS (to_tsvector('english', coalesce(title, '') || ' ' || coalesce(body, ''))) STORED;\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nCREATE INDEX textsearch_idx ON pgweb USING GIN (textsearchable_index_col);\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nSELECT title\nFROM pgweb\nWHERE textsearchable_index_col @@ to_tsquery('create & table')\nORDER BY last_mod_date DESC\nLIMIT 10;\n", "source": "https://www.postgresql.org/docs/current/textsearch-tables.html"},
{"sql": "\nSELECT title || ' ' ||  author || ' ' ||  abstract || ' ' || body AS document\nFROM messages\nWHERE mid = 12;\n\nSELECT m.title || ' ' || m.author || ' ' || m.abstract || ' ' || d.body AS document\nFROM messages m, docs d\nWHERE m.mid = d.did AND m.mid = 12;\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nSELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat & rat'::tsquery;\n ?column?\n----------\n t\n\nSELECT 'fat & cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n ?column?\n----------\n f\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nSELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat & rat');\n ?column? \n----------\n t\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nSELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat & rat');\n ?column? \n----------\n f\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\ntsvector @@ tsquery\ntsquery  @@ tsvector\ntext @@ tsquery\ntext @@ text\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nSELECT to_tsvector('fatal error') @@ to_tsquery('fatal <-> error');\n ?column? \n----------\n t\n\nSELECT to_tsvector('error is not fatal') @@ to_tsquery('fatal <-> error');\n ?column? \n----------\n f\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nSELECT phraseto_tsquery('cats ate rats');\n       phraseto_tsquery        \n-------------------------------\n 'cat' <-> 'ate' <-> 'rat'\n\nSELECT phraseto_tsquery('the cats ate the rats');\n       phraseto_tsquery        \n-------------------------------\n 'cat' <-> 'ate' <2> 'rat'\n", "source": "https://www.postgresql.org/docs/current/textsearch-intro.html"},
{"sql": "\nCREATE TABLE test1c (\n    id integer,\n    content varchar COLLATE \"x\"\n);\n\nCREATE INDEX test1c_content_index ON test1c (content);\n", "source": "https://www.postgresql.org/docs/current/indexes-collations.html"},
{"sql": "\nSELECT * FROM test1c WHERE content > ", "source": "https://www.postgresql.org/docs/current/indexes-collations.html"},
{"sql": "\nSELECT * FROM test1c WHERE content > ", "source": "https://www.postgresql.org/docs/current/indexes-collations.html"},
{"sql": " COLLATE \"y\";\n", "source": "https://www.postgresql.org/docs/current/indexes-collations.html"},
{"sql": "\nCREATE INDEX test1c_content_y_index ON test1c (content COLLATE \"y\");\n", "source": "https://www.postgresql.org/docs/current/indexes-collations.html"},
{"sql": "\nCREATE INDEX test_index ON test_table (col varchar_pattern_ops);\n", "source": "https://www.postgresql.org/docs/current/indexes-opclass.html"},
{"sql": "\nSELECT am.amname AS index_method,\n       opc.opcname AS opclass_name,\n       opc.opcintype::regtype AS indexed_type,\n       opc.opcdefault AS is_default\n    FROM pg_am am, pg_opclass opc\n    WHERE opc.opcmethod = am.oid\n    ORDER BY index_method, opclass_name;\n", "source": "https://www.postgresql.org/docs/current/indexes-opclass.html"},
{"sql": "\nSELECT am.amname AS index_method,\n       opc.opcname AS opclass_name,\n       opf.opfname AS opfamily_name,\n       opc.opcintype::regtype AS indexed_type,\n       opc.opcdefault AS is_default\n    FROM pg_am am, pg_opclass opc, pg_opfamily opf\n    WHERE opc.opcmethod = am.oid AND\n          opc.opcfamily = opf.oid\n    ORDER BY index_method, opclass_name;\n", "source": "https://www.postgresql.org/docs/current/indexes-opclass.html"},
{"sql": "\nSELECT am.amname AS index_method,\n       opf.opfname AS opfamily_name,\n       amop.amopopr::regoperator AS opfamily_operator\n    FROM pg_am am, pg_opfamily opf, pg_amop amop\n    WHERE opf.opfmethod = am.oid AND\n          amop.amopfamily = opf.oid\n    ORDER BY index_method, opfamily_name, opfamily_operator;\n", "source": "https://www.postgresql.org/docs/current/indexes-opclass.html"},
{"sql": "\nSELECT x, y FROM tab WHERE x = 'key';\nSELECT x FROM tab WHERE x = 'key' AND y < 42;\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nSELECT x, z FROM tab WHERE x = 'key';\nSELECT x FROM tab WHERE x = 'key' AND z < 42;\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nSELECT y FROM tab WHERE x = 'key';\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE INDEX tab_x_y ON tab(x) INCLUDE (y);\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE UNIQUE INDEX tab_x_y ON tab(x) INCLUDE (y);\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE INDEX tab_x_y ON tab(x, y);\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nSELECT f(x) FROM tab WHERE f(x) < 1;\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE INDEX tab_f_x ON tab (f(x)) INCLUDE (x);\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)\n    WHERE success;\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nSELECT target FROM tests WHERE subject = 'some-subject' AND success;\n", "source": "https://www.postgresql.org/docs/current/indexes-index-only-scans.html"},
{"sql": "\nCREATE INDEX access_log_client_ip_ix ON access_log (client_ip)\nWHERE NOT (client_ip > inet '192.168.100.0' AND\n           client_ip < inet '192.168.100.255');\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT *\nFROM access_log\nWHERE url = '/index.html' AND client_ip = inet '212.78.10.32';\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT *\nFROM access_log\nWHERE url = '/index.html' AND client_ip = inet '192.168.100.23';\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nCREATE INDEX orders_unbilled_index ON orders (order_nr)\n    WHERE billed is not true;\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT * FROM orders WHERE billed is not true AND order_nr < 10000;\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT * FROM orders WHERE billed is not true AND amount > 5000.00;\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT * FROM orders WHERE order_nr = 3501;\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": " ON mytable (data) WHERE category = ", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nCREATE INDEX mytable_cat_data ON mytable (category, data);\n", "source": "https://www.postgresql.org/docs/current/indexes-partial.html"},
{"sql": "\nSELECT * FROM test1 WHERE lower(col1) = 'value';\n", "source": "https://www.postgresql.org/docs/current/indexes-expressional.html"},
{"sql": "\nCREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));\n", "source": "https://www.postgresql.org/docs/current/indexes-expressional.html"},
{"sql": "\nSELECT * FROM people WHERE (first_name || ' ' || last_name) = 'John Smith';\n", "source": "https://www.postgresql.org/docs/current/indexes-expressional.html"},
{"sql": "\nCREATE INDEX people_names ON people ((first_name || ' ' || last_name));\n", "source": "https://www.postgresql.org/docs/current/indexes-expressional.html"},
{"sql": "\nCREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST);\nCREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);\n", "source": "https://www.postgresql.org/docs/current/indexes-ordering.html"},
{"sql": "\nCREATE TABLE test2 (\n  major int,\n  minor int,\n  name varchar\n);\n", "source": "https://www.postgresql.org/docs/current/indexes-multicolumn.html"},
{"sql": "\nSELECT name FROM test2 WHERE major = ", "source": "https://www.postgresql.org/docs/current/indexes-multicolumn.html"},
{"sql": " AND minor = ", "source": "https://www.postgresql.org/docs/current/indexes-multicolumn.html"},
{"sql": "\nCREATE INDEX test2_mm_idx ON test2 (major, minor);\n", "source": "https://www.postgresql.org/docs/current/indexes-multicolumn.html"},
{"sql": "\nCREATE INDEX ", "source": "https://www.postgresql.org/docs/current/indexes-types.html"},
{"sql": " USING HASH (", "source": "https://www.postgresql.org/docs/current/indexes-types.html"},
{"sql": "\nSELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;\n\n", "source": "https://www.postgresql.org/docs/current/indexes-types.html"},
{"sql": "\nCREATE TABLE test1 (\n    id integer,\n    content varchar\n);\n", "source": "https://www.postgresql.org/docs/current/indexes-intro.html"},
{"sql": "\nSELECT content FROM test1 WHERE id = ", "source": "https://www.postgresql.org/docs/current/indexes-intro.html"},
{"sql": "\nCREATE INDEX test1_id_index ON test1 (id);\n", "source": "https://www.postgresql.org/docs/current/indexes-intro.html"},
{"sql": "\nSELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT * FROM a LEFT JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT * FROM a LEFT JOIN b ON (a.bid = b.id) LEFT JOIN c ON (a.cid = c.id);\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;\nSELECT * FROM a CROSS JOIN b CROSS JOIN c WHERE a.id = b.id AND b.ref = c.id;\nSELECT * FROM a JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT *\nFROM x, y,\n    (SELECT * FROM a, b, c WHERE something) AS ss\nWHERE somethingelse;\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT * FROM x, y, a, b, c WHERE something AND somethingelse;\n", "source": "https://www.postgresql.org/docs/current/explicit-joins.html"},
{"sql": "\nSELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';\n", "source": "https://www.postgresql.org/docs/current/using-explain.html"},
{"sql": "\nCREATE STATISTICS stts (dependencies) ON city, zip FROM zipcodes;\n\nANALYZE zipcodes;\n\nSELECT stxname, stxkeys, stxddependencies\n  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)\n  WHERE stxname = 'stts';\n stxname | stxkeys |             stxddependencies             \n---------+---------+------------------------------------------\n stts    | 1 5     | {\"1 => 5\": 1.000000, \"5 => 1\": 0.423130}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/planner-stats.html"},
{"sql": "\nSELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '94105';\n", "source": "https://www.postgresql.org/docs/current/planner-stats.html"},
{"sql": "\nSELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '90210';\n", "source": "https://www.postgresql.org/docs/current/planner-stats.html"},
{"sql": "\nCREATE STATISTICS stts2 (ndistinct) ON city, state, zip FROM zipcodes;\n\nANALYZE zipcodes;\n\nSELECT stxkeys AS k, stxdndistinct AS nd\n  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)\n  WHERE stxname = 'stts2';\n-[ RECORD 1 ]------------------------------------------------------\u200b--\nk  | 1 2 5\nnd | {\"1, 2\": 33178, \"1, 5\": 33178, \"2, 5\": 27435, \"1, 2, 5\": 33178}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/planner-stats.html"},
{"sql": "\nCREATE DOMAIN posint AS integer CHECK (VALUE > 0);\nCREATE TABLE mytable (id posint);\nINSERT INTO mytable VALUES(1);   -- works\nINSERT INTO mytable VALUES(-1);  -- fails\n", "source": "https://www.postgresql.org/docs/current/domains.html"},
{"sql": "\n-- Simple scalar/primitive value\n-- Primitive values can be numbers, quoted strings, true, false, or null\nSELECT '5'::json;\n\n-- Array of zero or more elements (elements need not be of same type)\nSELECT '[1, 2, \"foo\", null]'::json;\n\n-- Object containing pairs of keys and values\n-- Note that object keys must always be quoted strings\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\": false}'::json;\n\n-- Arrays and objects can be nested arbitrarily\nSELECT '{\"foo\": [true, \"bar\"], \"tags\": {\"a\": 1, \"b\": null}}'::json;\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;\n                      json                       \n-------------------------------------------------\n {\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}\n(1 row)\n\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb;\n                      jsonb                       \n--------------------------------------------------\n {\"bar\": \"baz\", \"active\": false, \"balance\": 7.77}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;\n         json          |          jsonb          \n-----------------------+-------------------------\n {\"reading\": 1.230e-5} | {\"reading\": 0.00001230}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Simple scalar/primitive values contain only the identical value:\nSELECT '\"foo\"'::jsonb @> '\"foo\"'::jsonb;\n\n-- The array on the right side is contained within the one on the left:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;\n\n-- Order of array elements is not significant, so this is also true:\nSELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;\n\n-- Duplicate array elements don't matter either:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;\n\n-- The object with a single pair on the right side is contained\n-- within the object on the left side:\nSELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @> '{\"version\": 9.4}'::jsonb;\n\n-- The array on the right side is ", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": " considered contained within the\n-- array on the left, even though a similar array is nested within it:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb;  -- yields false\n\n-- But with a layer of nesting, it is contained:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;\n\n-- Similarly, containment is not reported here:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"bar\": \"baz\"}'::jsonb;  -- yields false\n\n-- A top-level key and an empty object is contained:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"foo\": {}}'::jsonb;\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- This array contains the primitive string value:\nSELECT '[\"foo\", \"bar\"]'::jsonb @> '\"bar\"'::jsonb;\n\n-- This exception is not reciprocal -- non-containment is reported here:\nSELECT '\"bar\"'::jsonb @> '[\"bar\"]'::jsonb;  -- yields false\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- String exists as array element:\nSELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n\n-- String exists as object key:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';\n\n-- Object values are not considered:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar';  -- yields false\n\n-- As with containment, existence must match at the top level:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar'; -- yields false\n\n-- A string is considered to exist if it matches a primitive JSON string:\nSELECT '\"foo\"'::jsonb ? 'foo';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT doc->'site_name' FROM websites\n  WHERE doc @> '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT doc->'site_name' FROM websites\n  WHERE doc->'tags' @> '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nCREATE INDEX idxgin ON api USING GIN (jdoc);\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nCREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n{\n    \"guid\": \"9c36adc1-7fb5-4d5b-83b4-90356a46061a\",\n    \"name\": \"Angela Barton\",\n    \"is_active\": true,\n    \"company\": \"Magnafone\",\n    \"address\": \"178 Howard Place, Gulf, Washington, 702\",\n    \"registered\": \"2009-11-07T08:53:22 +08:00\",\n    \"latitude\": 19.793713,\n    \"longitude\": 86.513373,\n    \"tags\": [\n        \"enim\",\n        \"aliquip\",\n        \"qui\"\n    ]\n}\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Find documents in which the key \"company\" has value \"Magnafone\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"company\": \"Magnafone\"}';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Find documents in which the key \"tags\" contains key or array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc -> 'tags' ? 'qui';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nCREATE INDEX idxgintags ON api USING GIN ((jdoc -> 'tags'));\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @@ '$.tags[*] == \"qui\"';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @? '$.tags[*] ? (@ == \"qui\")';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Find documents in which the key \"tags\" contains array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"tags\": [\"qui\"]}';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n{ \"aa\": 1, \"c\": 1} > {\"b\": 1, \"d\": 1}\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n\n-- Extract object value by key\nSELECT ('{\"a\": 1}'::jsonb)['a'];\n\n-- Extract nested object value by key path\nSELECT ('{\"a\": {\"b\": {\"c\": 1}}}'::jsonb)['a']['b']['c'];\n\n-- Extract array element by index\nSELECT ('[1, \"2\", null]'::jsonb)[1];\n\n-- Update object value by key. Note the quotes around '1': the assigned\n-- value must be of the jsonb type as well\nUPDATE table_name SET jsonb_field['key'] = '1';\n\n-- This will raise an error if any record's jsonb_field['a']['b'] is something\n-- other than an object. For example, the value {\"a\": 1} has a numeric value\n-- of the key 'a'.\nUPDATE table_name SET jsonb_field['a']['b']['c'] = '1';\n\n-- Filter records using a WHERE clause with subscripting. Since the result of\n-- subscripting is jsonb, the value we compare it against must also be jsonb.\n-- The double quotes make \"value\" also a valid jsonb string.\nSELECT * FROM table_name WHERE jsonb_field['key'] = '\"value\"';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Where jsonb_field was NULL, it is now {\"a\": 1}\nUPDATE table_name SET jsonb_field['a'] = '1';\n\n-- Where jsonb_field was NULL, it is now [1]\nUPDATE table_name SET jsonb_field[0] = '1';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Where jsonb_field was [], it is now [null, null, 2];\n-- where jsonb_field was [0], it is now [0, null, 2]\nUPDATE table_name SET jsonb_field[2] = '2';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\n-- Where jsonb_field was {}, it is now {'a': [{'b': 1}]}\nUPDATE table_name SET jsonb_field['a'][0]['b'] = '1';\n\n-- Where jsonb_field was [], it is now [null, {'a': 1}]\nUPDATE table_name SET jsonb_field[1]['a'] = '1';\n", "source": "https://www.postgresql.org/docs/current/datatype-json.html"},
{"sql": "\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n\n-- Containment\nSELECT int4range(10, 20) @> 3;\n\n-- Overlaps\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n\n-- Extract the upper bound\nSELECT upper(int8range(15, 25));\n\n-- Compute the intersection\nSELECT int4range(10, 20) * int4range(15, 25);\n\n-- Is the range empty?\nSELECT isempty(numrange(1, 5));\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\n-- includes 3, does not include 7, and does include all points in between\nSELECT '[3,7)'::int4range;\n\n-- does not include either 3 or 7, but includes all points in between\nSELECT '(3,7)'::int4range;\n\n-- includes only the single point 4\nSELECT '[4,4]'::int4range;\n\n-- includes no points (and will be normalized to 'empty')\nSELECT '[4,4)'::int4range;\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nSELECT '{}'::int4multirange;\nSELECT '{[3,7)}'::int4multirange;\nSELECT '{[3,7), [8,9)}'::int4multirange;\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\n-- The full form is: lower bound, upper bound, and text argument indicating\n-- inclusivity/exclusivity of bounds.\nSELECT numrange(1.0, 14.0, '(]');\n\n-- If the third argument is omitted, '[)' is assumed.\nSELECT numrange(1.0, 14.0);\n\n-- Although '(]' is specified here, on display the value will be converted to\n-- canonical form, since int8range is a discrete range type (see below).\nSELECT int8range(1, 14, '(]');\n\n-- Using NULL for either bound causes the range to be unbounded on that side.\nSELECT numrange(NULL, 2.2);\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nSELECT nummultirange();\nSELECT nummultirange(numrange(1.0, 14.0));\nSELECT nummultirange(numrange(1.0, 14.0), numrange(20.0, 25.0));\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE TYPE floatrange AS RANGE (\n    subtype = float8,\n    subtype_diff = float8mi\n);\n\nSELECT '[1.234, 5.678]'::floatrange;\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS\n'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;\n\nCREATE TYPE timerange AS RANGE (\n    subtype = time,\n    subtype_diff = time_subtype_diff\n);\n\nSELECT '[11:10, 23:00]'::timerange;\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE INDEX reservation_idx ON reservation USING GIST (during);\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE TABLE reservation (\n    during tsrange,\n    EXCLUDE USING GIST (during WITH &&)\n);\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nINSERT INTO reservation VALUES\n    ('[2010-01-01 11:30, 2010-01-01 15:00)');\nINSERT 0 1\n\nINSERT INTO reservation VALUES\n    ('[2010-01-01 14:45, 2010-01-01 15:45)');\nERROR:  conflicting key value violates exclusion constraint \"reservation_during_excl\"\nDETAIL:  Key (during)=([\"2010-01-01 14:45:00\",\"2010-01-01 15:45:00\")) conflicts\nwith existing key (during)=([\"2010-01-01 11:30:00\",\"2010-01-01 15:00:00\")).\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE EXTENSION btree_gist;\nCREATE TABLE room_reservation (\n    room text,\n    during tsrange,\n    EXCLUDE USING GIST (room WITH =, during WITH &&)\n);\n\nINSERT INTO room_reservation VALUES\n    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');\nINSERT 0 1\n\nINSERT INTO room_reservation VALUES\n    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');\nERROR:  conflicting key value violates exclusion constraint \"room_reservation_room_during_excl\"\nDETAIL:  Key (room, during)=(123A, [\"2010-01-01 14:30:00\",\"2010-01-01 15:30:00\")) conflicts\nwith existing key (room, during)=(123A, [\"2010-01-01 14:00:00\",\"2010-01-01 15:00:00\")).\n\nINSERT INTO room_reservation VALUES\n    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');\nINSERT 0 1\n", "source": "https://www.postgresql.org/docs/current/rangetypes.html"},
{"sql": "\nCREATE TYPE complex AS (\n    r       double precision,\n    i       double precision\n);\n\nCREATE TYPE inventory_item AS (\n    name            text,\n    supplier_id     integer,\n    price           numeric\n);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nCREATE TABLE on_hand (\n    item      inventory_item,\n    count     integer\n);\n\nINSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nCREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric\nAS 'SELECT $1.price * $2' LANGUAGE SQL;\n\nSELECT price_extension(item, 10) FROM on_hand;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nCREATE TABLE inventory_item (\n    name            text,\n    supplier_id     integer REFERENCES suppliers,\n    price           numeric CHECK (price > 0)\n);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n'(\"fuzzy dice\",42,1.99)'\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n'(\"fuzzy dice\",42,)'\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n'(\"\",42,)'\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nROW('fuzzy dice', 42, 1.99)\nROW('', 42, NULL)\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n('fuzzy dice', 42, 1.99)\n('', 42, NULL)\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT item.name FROM on_hand WHERE item.price > 9.99;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT (item).name FROM on_hand WHERE (item).price > 9.99;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price > 9.99;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nINSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT c FROM inventory_item c;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n           c\n------------------------\n (\"fuzzy dice\",42,1.99)\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT c.* FROM inventory_item c;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n    name    | supplier_id | price\n------------+-------------+-------\n fuzzy dice |          42 |  1.99\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT c.name, c.supplier_id, c.price FROM inventory_item c;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT (myfunc(x)).* FROM some_table;\nSELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT m.* FROM some_table, LATERAL myfunc(x) AS m;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT somefunc(c.*) FROM inventory_item c;\nSELECT somefunc(c) FROM inventory_item c;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT * FROM inventory_item c ORDER BY c;\nSELECT * FROM inventory_item c ORDER BY c.*;\nSELECT * FROM inventory_item c ORDER BY ROW(c.*);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);\nSELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT c.name FROM inventory_item c WHERE c.price > 1000;\nSELECT name(c) FROM inventory_item c WHERE price(c) > 1000;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nSELECT somefunc(c) FROM inventory_item c;\nSELECT somefunc(c.*) FROM inventory_item c;\nSELECT c.somefunc FROM inventory_item c;\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\n'(  42)'\n", "source": "https://www.postgresql.org/docs/current/rowtypes.html"},
{"sql": "\nxml '<foo>bar</foo>'\n'<foo>bar</foo>'::xml\n", "source": "https://www.postgresql.org/docs/current/datatype-xml.html"},
{"sql": "\nCREATE TABLE sal_emp (\n    name            text,\n    pay_by_quarter  integer[],\n    schedule        text[][]\n);\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nCREATE TABLE tictactoe (\n    squares   integer[3][3]\n);\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\n    pay_by_quarter  integer ARRAY[4],\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\n    pay_by_quarter  integer ARRAY,\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\n'{{1,2,3},{4,5,6},{7,8,9}}'\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"training\", \"presentation\"}}');\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    '{20000, 25000, 25000, 25000}',\n    '{{\"breakfast\", \"consulting\"}, {\"meeting\", \"lunch\"}}');\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM sal_emp;\n name  |      pay_by_quarter       |                 schedule\n-------+---------------------------+-------------------------------------------\n Bill  | {10000,10000,10000,10000} | {{meeting,lunch},{training,presentation}}\n Carol | {20000,25000,25000,25000} | {{breakfast,consulting},{meeting,lunch}}\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    '{10000, 10000, 10000, 10000}',\n    '{{\"meeting\", \"lunch\"}, {\"meeting\"}}');\nERROR:  multidimensional arrays must have array expressions with matching dimensions\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nINSERT INTO sal_emp\n    VALUES ('Bill',\n    ARRAY[10000, 10000, 10000, 10000],\n    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);\n\nINSERT INTO sal_emp\n    VALUES ('Carol',\n    ARRAY[20000, 25000, 25000, 25000],\n    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT name FROM sal_emp WHERE pay_by_quarter[1] <> pay_by_quarter[2];\n\n name\n-------\n Carol\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT pay_by_quarter[3] FROM sal_emp;\n\n pay_by_quarter\n----------------\n          10000\n          25000\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';\n\n                 schedule\n-------------------------------------------\n {{meeting,lunch},{training,presentation}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT schedule[:2][2:] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{lunch},{presentation}}\n(1 row)\n\nSELECT schedule[:][1:1] FROM sal_emp WHERE name = 'Bill';\n\n        schedule\n------------------------\n {{meeting},{training}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';\n\n array_dims\n------------\n [1:2][1:2]\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_upper\n-------------\n           2\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';\n\n array_length\n--------------\n            2\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT cardinality(schedule) FROM sal_emp WHERE name = 'Carol';\n\n cardinality\n-------------\n           4\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nUPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'\n    WHERE name = 'Carol';\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nUPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]\n    WHERE name = 'Carol';\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nUPDATE sal_emp SET pay_by_quarter[4] = 15000\n    WHERE name = 'Bill';\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nUPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'\n    WHERE name = 'Carol';\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT ARRAY[1,2] || ARRAY[3,4];\n ?column?\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]];\n      ?column?\n---------------------\n {{5,6},{1,2},{3,4}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_dims(1 || '[0:1]={2,3}'::int[]);\n array_dims\n------------\n [0:2]\n(1 row)\n\nSELECT array_dims(ARRAY[1,2] || 3);\n array_dims\n------------\n [1:3]\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);\n array_dims\n------------\n [1:5]\n(1 row)\n\nSELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]]);\n array_dims\n------------\n [1:5][1:2]\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);\n array_dims\n------------\n [1:3][1:2]\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_prepend(1, ARRAY[2,3]);\n array_prepend\n---------------\n {1,2,3}\n(1 row)\n\nSELECT array_append(ARRAY[1,2], 3);\n array_append\n--------------\n {1,2,3}\n(1 row)\n\nSELECT array_cat(ARRAY[1,2], ARRAY[3,4]);\n array_cat\n-----------\n {1,2,3,4}\n(1 row)\n\nSELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);\n      array_cat\n---------------------\n {{1,2},{3,4},{5,6}}\n(1 row)\n\nSELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]]);\n      array_cat\n---------------------\n {{5,6},{1,2},{3,4}}\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT ARRAY[1, 2] || '{3, 4}';  -- the untyped literal is taken as an array\n ?column?\n-----------\n {1,2,3,4}\n\nSELECT ARRAY[1, 2] || '7';                 -- so is this one\nERROR:  malformed array literal: \"7\"\n\nSELECT ARRAY[1, 2] || NULL;                -- so is an undecorated NULL\n ?column?\n----------\n {1,2}\n(1 row)\n\nSELECT array_append(ARRAY[1, 2], NULL);    -- this might have been meant\n array_append\n--------------\n {1,2,NULL}\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR\n                            pay_by_quarter[2] = 10000 OR\n                            pay_by_quarter[3] = 10000 OR\n                            pay_by_quarter[4] = 10000;\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM\n   (SELECT pay_by_quarter,\n           generate_subscripts(pay_by_quarter, 1) AS s\n      FROM sal_emp) AS foo\n WHERE pay_by_quarter[s] = 10000;\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT * FROM sal_emp WHERE pay_by_quarter && ARRAY[10000];\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');\n array_position\n----------------\n              2\n(1 row)\n\nSELECT array_positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1);\n array_positions\n-----------------\n {1,4,8}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2\n FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;\n\n e1 | e2\n----+----\n  1 |  6\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/arrays.html"},
{"sql": "\nSELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n                      tsvector\n----------------------------------------------------\n 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT $$the lexeme '    ' contains spaces$$::tsvector;\n                 tsvector                  \n-------------------------------------------\n '    ' 'contains' 'lexeme' 'spaces' 'the'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;\n                    tsvector                    \n------------------------------------------------\n 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;\n                                  tsvector\n-------------------------------------------------------------------\u200b------------\n 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'a:1A fat:2B,4C cat:5D'::tsvector;\n          tsvector          \n----------------------------\n 'a':1A 'cat':5 'fat':2B,4C\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'The Fat Rats'::tsvector;\n      tsvector      \n--------------------\n 'Fat' 'Rats' 'The'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT to_tsvector('english', 'The Fat Rats');\n   to_tsvector   \n-----------------\n 'fat':2 'rat':3\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'fat & rat'::tsquery;\n    tsquery    \n---------------\n 'fat' & 'rat'\n\nSELECT 'fat & (rat | cat)'::tsquery;\n          tsquery          \n---------------------------\n 'fat' & ( 'rat' | 'cat' )\n\nSELECT 'fat & rat & ! cat'::tsquery;\n        tsquery         \n------------------------\n 'fat' & 'rat' & !'cat'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'fat:ab & cat'::tsquery;\n    tsquery\n------------------\n 'fat':AB & 'cat'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT 'super:*'::tsquery;\n  tsquery  \n-----------\n 'super':*\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT to_tsquery('Fat:ab & Cats');\n    to_tsquery    \n------------------\n 'fat':AB & 'cat'\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );\n ?column?\n----------\n t\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\nSELECT to_tsvector( 'postgraduate' ), to_tsquery( 'postgres:*' );\n  to_tsvector  | to_tsquery\n---------------+------------\n 'postgradu':1 | 'postgr':*\n", "source": "https://www.postgresql.org/docs/current/datatype-textsearch.html"},
{"sql": "\na0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n", "source": "https://www.postgresql.org/docs/current/datatype-uuid.html"},
{"sql": "\nA0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11\n{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}\na0eebc999c0b4ef8bb6d6bb9bd380a11\na0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11\n{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}\n", "source": "https://www.postgresql.org/docs/current/datatype-uuid.html"},
{"sql": "\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\n", "source": "https://www.postgresql.org/docs/current/datatype-bit.html"},
{"sql": "\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n", "source": "https://www.postgresql.org/docs/current/datatype-bit.html"},
{"sql": "\nSELECT macaddr8_set7bit('08:00:2b:01:02:03');\n", "source": "https://www.postgresql.org/docs/current/datatype-net-types.html"},
{"sql": "\nCREATE TABLE test1 (a boolean, b text);\nINSERT INTO test1 VALUES (TRUE, 'sic est');\nINSERT INTO test1 VALUES (FALSE, 'non est');\nSELECT * FROM test1;\n a |    b\n---+---------\n t | sic est\n f | non est\n\nSELECT * FROM test1 WHERE a;\n a |    b\n---+---------\n t | sic est\n", "source": "https://www.postgresql.org/docs/current/datatype-boolean.html"},
{"sql": "\n1999-01-08 04:05:06\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\n1999-01-08 04:05:06 -8:00\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nJanuary 8 04:05:06 1999 PST\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nTIMESTAMP '2004-10-19 10:23:54'\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nTIMESTAMP '2004-10-19 10:23:54+02'\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nTIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n         1\n\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n         0\n", "source": "https://www.postgresql.org/docs/current/datatype-datetime.html"},
{"sql": "\nCREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\n", "source": "https://www.postgresql.org/docs/current/datatype-enum.html"},
{"sql": "\nCREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');\nCREATE TABLE person (\n    name text,\n    current_mood mood\n);\nINSERT INTO person VALUES ('Moe', 'happy');\nSELECT * FROM person WHERE current_mood = 'happy';\n name | current_mood \n------+--------------\n Moe  | happy\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/datatype-enum.html"},
{"sql": "\nINSERT INTO person VALUES ('Larry', 'sad');\nINSERT INTO person VALUES ('Curly', 'ok');\nSELECT * FROM person WHERE current_mood > 'sad';\n name  | current_mood \n-------+--------------\n Moe   | happy\n Curly | ok\n(2 rows)\n\nSELECT * FROM person WHERE current_mood > 'sad' ORDER BY current_mood;\n name  | current_mood \n-------+--------------\n Curly | ok\n Moe   | happy\n(2 rows)\n\nSELECT name\nFROM person\nWHERE current_mood = (SELECT MIN(current_mood) FROM person);\n name  \n-------\n Larry\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/datatype-enum.html"},
{"sql": "\nCREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic');\nCREATE TABLE holidays (\n    num_weeks integer,\n    happiness happiness\n);\nINSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy');\nINSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy');\nINSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic');\nINSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad');\nERROR:  invalid input value for enum happiness: \"sad\"\nSELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood = holidays.happiness;\nERROR:  operator does not exist: mood = happiness\n", "source": "https://www.postgresql.org/docs/current/datatype-enum.html"},
{"sql": "\nSELECT person.name, holidays.num_weeks FROM person, holidays\n  WHERE person.current_mood::text = holidays.happiness::text;\n name | num_weeks \n------+-----------\n Moe  |         4\n(1 row)\n\n", "source": "https://www.postgresql.org/docs/current/datatype-enum.html"},
{"sql": "\nSELECT '\\xDEADBEEF';\n", "source": "https://www.postgresql.org/docs/current/datatype-binary.html"},
{"sql": "\nSET bytea_output = 'escape';\n\nSELECT 'abc \\153\\154\\155 \\052\\251\\124'::bytea;\n     bytea\n----------------\n abc klm *\\251T\n", "source": "https://www.postgresql.org/docs/current/datatype-binary.html"},
{"sql": "\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- ", "source": "https://www.postgresql.org/docs/current/datatype-character.html"},
{"sql": "\n\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good      ');\nINSERT INTO test2 VALUES ('too long');\n", "source": "https://www.postgresql.org/docs/current/datatype-character.html"},
{"sql": "\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n", "source": "https://www.postgresql.org/docs/current/datatype-character.html"},
{"sql": "\nSELECT '12.34'::float8::numeric::money;\n", "source": "https://www.postgresql.org/docs/current/datatype-money.html"},
{"sql": "\nSELECT '52093.89'::money::numeric::float8;\n", "source": "https://www.postgresql.org/docs/current/datatype-money.html"},
{"sql": "\nSELECT x,\n  round(x::numeric) AS num_round,\n  round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n  x   | num_round | dbl_round\n------+-----------+-----------\n -3.5 |        -4 |        -4\n -2.5 |        -3 |        -2\n -1.5 |        -2 |        -2\n -0.5 |        -1 |        -0\n  0.5 |         1 |         0\n  1.5 |         2 |         2\n  2.5 |         3 |         2\n  3.5 |         4 |         4\n(8 rows)\n", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "\nCREATE TABLE ", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": " SERIAL\n);\n", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "\nCREATE SEQUENCE ", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "_seq AS integer;\nCREATE TABLE ", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": " integer NOT NULL DEFAULT nextval('", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "_seq')\n);\nALTER SEQUENCE ", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "_seq OWNED BY ", "source": "https://www.postgresql.org/docs/current/datatype-numeric.html"},
{"sql": "\nSELECT setval('myseq', 42);           ", "source": "https://www.postgresql.org/docs/current/functions-sequence.html"},
{"sql": "\nSELECT setval('myseq', 42, true);     ", "source": "https://www.postgresql.org/docs/current/functions-sequence.html"},
{"sql": "\nSELECT setval('myseq', 42, false);    ", "source": "https://www.postgresql.org/docs/current/functions-sequence.html"},
{"sql": "\n<?xml version=\"1.0\"?>\n<xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    xmlns=\"http://www.w3.org/1999/xhtml\"\n>\n\n  <xsl:output method=\"xml\"\n      doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n      doctype-public=\"-//W3C/DTD XHTML 1.0 Strict//EN\"\n      indent=\"yes\"/>\n\n  <xsl:template match=\"/*\">\n    <xsl:variable name=\"schema\" select=\"//xsd:schema\"/>\n    <xsl:variable name=\"tabletypename\"\n                  select=\"$schema/xsd:element[@name=name(current())]/@type\"/>\n    <xsl:variable name=\"rowtypename\"\n                  select=\"$schema/xsd:complexType[@name=$tabletypename]/xsd:sequence/xsd:element[@name='row']/@type\"/>\n\n    <html>\n      <head>\n        <title><xsl:value-of select=\"name(current())\"/></title>\n      </head>\n      <body>\n        <table>\n          <tr>\n            <xsl:for-each select=\"$schema/xsd:complexType[@name=$rowtypename]/xsd:sequence/xsd:element/@name\">\n              <th><xsl:value-of select=\".\"/></th>\n            </xsl:for-each>\n          </tr>\n\n          <xsl:for-each select=\"row\">\n            <tr>\n              <xsl:for-each select=\"*\">\n                <td><xsl:value-of select=\".\"/></td>\n              </xsl:for-each>\n            </tr>\n          </xsl:for-each>\n        </table>\n      </body>\n    </html>\n  </xsl:template>\n\n</xsl:stylesheet>\n", "source": "https://www.postgresql.org/docs/current/functions-xml.html"},
{"sql": "\n   value\n-----------\n 1\n true\n [2,false]\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n   value\n-----------\n foo\n bar\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n key | value\n-----+-------\n a   | \"foo\"\n b   | \"bar\"\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n key | value\n-----+-------\n a   | foo\n b   | bar\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n json_object_keys\n------------------\n f1\n f2\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n a |   b       |      c\n---+-----------+-------------\n 1 | {2,\"a b\"} | (4,\"a b c\")\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n a | b\n---+---\n 1 | 2\n 3 | 4\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n a |    b    |    c    | d |       r\n---+---------+---------+---+---------------\n 1 | [1,2,3] | {1,2,3} |   | (123,\"a b c\")\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n a |  b\n---+-----\n 1 | foo\n 2 |\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n jsonb_path_query\n------------------\n 2\n 3\n 4\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n[\n    {\n        \"f1\": 1,\n        \"f2\": null\n    },\n    2\n]\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n{\n  \"track\": {\n    \"segments\": [\n      {\n        \"location\":   [ 47.763, 13.4034 ],\n        \"start time\": \"2018-10-14 10:05:14\",\n        \"HR\": 73\n      },\n      {\n        \"location\":   [ 47.706, 13.2635 ],\n        \"start time\": \"2018-10-14 10:39:21\",\n        \"HR\": 135\n      }\n    ]\n  }\n}\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*].location\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[0].location\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments.size()\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*].HR ? (@ > 130)\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*] ? (@.HR > 130).\"start time\"\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*] ? (@.location[1] < 13.4) ? (@.HR > 130).\"start time\"\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*] ? (@.location[1] < 13.4).HR ? (@ > 130)\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track ? (exists(@.segments[*] ? (@.HR > 130))).segments.size()\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.track.segments[*].HR < 70\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\nlax $.track.segments.location\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\nstrict $.track.segments[*].location\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\nlax $.**.HR\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\nstrict $.**.HR\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$[*] ? (@ like_regex \"^[aeiou]\" flag \"i\")\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n$.* ? (@ like_regex \"^\\\\d+$\")\n", "source": "https://www.postgresql.org/docs/current/functions-json.html"},
{"sql": "\n lexeme | positions | weights\n--------+-----------+---------\n cat    | {3}       | {D}\n fat    | {2,4}     | {D,D}\n rat    | {5}       | {A}\n", "source": "https://www.postgresql.org/docs/current/functions-textsearch.html"},
{"sql": "\nCREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');\n", "source": "https://www.postgresql.org/docs/current/functions-enum.html"},
{"sql": "\nSELECT CURRENT_TIMESTAMP;\nSELECT now();\nSELECT TIMESTAMP 'now';  -- but see tip below\n", "source": "https://www.postgresql.org/docs/current/functions-datetime.html"},
{"sql": "\nSELECT pg_sleep(1.5);\nSELECT pg_sleep_for('5 minutes');\nSELECT pg_sleep_until('tomorrow 03:00');\n", "source": "https://www.postgresql.org/docs/current/functions-datetime.html"},
{"sql": "\n44::bit(10)                    ", "source": "https://www.postgresql.org/docs/current/functions-bitstring.html"},
{"sql": "\n44::bit(3)                     ", "source": "https://www.postgresql.org/docs/current/functions-bitstring.html"},
{"sql": "\ncast(-44 as bit(12))           ", "source": "https://www.postgresql.org/docs/current/functions-bitstring.html"},
{"sql": "\n'1110'::bit(4)::integer        ", "source": "https://www.postgresql.org/docs/current/functions-bitstring.html"},
{"sql": "\n {bar}\n {baz}\n", "source": "https://www.postgresql.org/docs/current/functions-string.html"},
{"sql": "\n hello\n world\n", "source": "https://www.postgresql.org/docs/current/functions-string.html"},
{"sql": "\n xx\n NULL\n zz\n", "source": "https://www.postgresql.org/docs/current/functions-string.html"},
{"sql": "\n'abc' LIKE 'abc'    ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' LIKE 'a%'     ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' LIKE '_b_'    ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' LIKE 'c'      ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' SIMILAR TO 'abc'          ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' SIMILAR TO 'a'            ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' SIMILAR TO '%(b|d)%'      ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abc' SIMILAR TO '(b|c)%'       ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'-abc-' SIMILAR TO '%\\mabc\\M%'  ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'xabcy' SIMILAR TO '%\\mabc\\M%'  ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nsubstring('foobar' similar '%#\"o_b#\"%' escape '#')   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nsubstring('foobar' similar '#\"o_b#\"%' escape '#')    ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ 'bc'     ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ 'a.c'    ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ 'a.*d'   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ '(b|x)'  ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ '^a'     ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n'abcd' ~ '^(b|c)' ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nsubstring('foobar' from 'o.b')     ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nsubstring('foobar' from 'o(.)b')   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nregexp_replace('foobarbaz', 'b..', 'X')\n                                   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nregexp_replace('foobarbaz', 'b..', 'X', 'g')\n                                   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nregexp_replace('foobarbaz', 'b(..)', 'X\\1Y', 'g')\n                                   ", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nSELECT regexp_match('foobarbequebaz', 'bar.*que');\n regexp_match\n--------------\n {barbeque}\n(1 row)\n\nSELECT regexp_match('foobarbequebaz', '(bar)(beque)');\n regexp_match\n--------------\n {bar,beque}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nSELECT (regexp_match('foobarbequebaz', 'bar.*que'))[1];\n regexp_match\n--------------\n barbeque\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nSELECT regexp_matches('foo', 'not there');\n regexp_matches\n----------------\n(0 rows)\n\nSELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');\n regexp_matches\n----------------\n {bar,beque}\n {bazil,barf}\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nSELECT col1, (SELECT regexp_matches(col2, '(bar)(beque)')) FROM tab;\n", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\\s+') AS foo;\n  foo   \n-------\n the    \n quick  \n brown  \n fox    \n jumps \n over   \n the    \n lazy   \n dog    \n(9 rows)\n\nSELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '\\s+');\n              regexp_split_to_array             \n-----------------------------------------------\n {the,quick,brown,fox,jumps,over,the,lazy,dog}\n(1 row)\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox', '\\s*') AS foo;\n foo \n-----\n t         \n h         \n e         \n q         \n u         \n i         \n c         \n k         \n b         \n r         \n o         \n w         \n n         \n f         \n o         \n x         \n(16 rows)\n", "source": "https://www.postgresql.org/docs/current/functions-matching.html"},
{"sql": "\nmake MAX_CONNECTIONS=5 check\n", "source": "https://www.postgresql.org/docs/current/installation-platform-notes.html"},
{"sql": "\nxcode-select --install\n", "source": "https://www.postgresql.org/docs/current/installation-platform-notes.html"},
{"sql": "\nmake PG_SYSROOT=", "source": "https://www.postgresql.org/docs/current/installation-platform-notes.html"},
{"sql": "\nxcrun --show-sdk-path\n", "source": "https://www.postgresql.org/docs/current/installation-platform-notes.html"},
{"sql": "\nLD_LIBRARY_PATH=/usr/local/pgsql/lib\nexport LD_LIBRARY_PATH\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\nsetenv LD_LIBRARY_PATH /usr/local/pgsql/lib\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\n/sbin/ldconfig /usr/local/pgsql/lib\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\n/sbin/ldconfig -m /usr/local/pgsql/lib\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\nPATH=/usr/local/pgsql/bin:$PATH\nexport PATH\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\nset path = ( /usr/local/pgsql/bin $path )\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\nMANPATH=/usr/local/pgsql/share/man:$MANPATH\nexport MANPATH\n", "source": "https://www.postgresql.org/docs/current/install-post.html"},
{"sql": "\nbuild-postgresql:\n        $(MAKE) -C postgresql MAKELEVEL=0 all\n", "source": "https://www.postgresql.org/docs/current/install-procedure.html"},
{"sql": "\nmethod_name(internal) RETURNS tsm_handler\n", "source": "https://www.postgresql.org/docs/current/tablesample-method.html"},
{"sql": "\ntypedef void (*bgworker_main_type)(Datum main_arg);\ntypedef struct BackgroundWorker\n{\n    char        bgw_name[BGW_MAXLEN];\n    char        bgw_type[BGW_MAXLEN];\n    int         bgw_flags;\n    BgWorkerStartTime bgw_start_time;\n    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */\n    char        bgw_library_name[BGW_MAXLEN];\n    char        bgw_function_name[BGW_MAXLEN];\n    Datum       bgw_main_arg;\n    char        bgw_extra[BGW_EXTRALEN];\n    int         bgw_notify_pid;\n} BackgroundWorker;\n", "source": "https://www.postgresql.org/docs/current/bgworker.html"},
{"sql": "\ncreate test_table 420 (oid = oid, cola = int4, colb = text)\nopen test_table\ninsert ( 421 1 'value 1' )\ninsert ( 422 2 _null_ )\nclose test_table\n", "source": "https://www.postgresql.org/docs/current/bki-example.html"},
{"sql": "\nvoid\namcostestimate (PlannerInfo *root,\n                IndexPath *path,\n                double loop_count,\n                Cost *indexStartupCost,\n                Cost *indexTotalCost,\n                Selectivity *indexSelectivity,\n                double *indexCorrelation,\n                double *indexPages);\n", "source": "https://www.postgresql.org/docs/current/index-cost-estimation.html"},
{"sql": "\n*indexSelectivity = clauselist_selectivity(root, path->indexquals,\n                                           path->indexinfo->rel->relid,\n                                           JOIN_INNER, NULL);\n", "source": "https://www.postgresql.org/docs/current/index-cost-estimation.html"},
{"sql": "\n/*\n * Our generic assumption is that the index pages will be read\n * sequentially, so they cost seq_page_cost each, not random_page_cost.\n * Also, we charge for evaluation of the indexquals at each index row.\n * All the costs are assumed to be paid incrementally during the scan.\n */\ncost_qual_eval(&index_qual_cost, path->indexquals, root);\n*indexStartupCost = index_qual_cost.startup;\n*indexTotalCost = seq_page_cost * numIndexPages +\n    (cpu_index_tuple_cost + index_qual_cost.per_tuple) * numIndexTuples;\n", "source": "https://www.postgresql.org/docs/current/index-cost-estimation.html"},
{"sql": "\ntypedef struct CustomScanState\n{\n    ScanState ss;\n    uint32    flags;\n    const CustomExecMethods *methods;\n} CustomScanState;\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*BeginCustomScan) (CustomScanState *node,\n                         EState *estate,\n                         int eflags);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nTupleTableSlot *(*ExecCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*EndCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*ReScanCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*MarkPosCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*RestrPosCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nSize (*EstimateDSMCustomScan) (CustomScanState *node,\n                               ParallelContext *pcxt);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*InitializeDSMCustomScan) (CustomScanState *node,\n                                 ParallelContext *pcxt,\n                                 void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*ReInitializeDSMCustomScan) (CustomScanState *node,\n                                   ParallelContext *pcxt,\n                                   void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*InitializeWorkerCustomScan) (CustomScanState *node,\n                                    shm_toc *toc,\n                                    void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*ShutdownCustomScan) (CustomScanState *node);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nvoid (*ExplainCustomScan) (CustomScanState *node,\n                           List *ancestors,\n                           ExplainState *es);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-execution.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_consistent(internal, data_type, smallint, oid, internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_consistent);\n\nDatum\nmy_consistent(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    data_type  *query = PG_GETARG_DATA_TYPE_P(1);\n    StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);\n    /* Oid subtype = PG_GETARG_OID(3); */\n    bool       *recheck = (bool *) PG_GETARG_POINTER(4);\n    data_type  *key = DatumGetDataType(entry->key);\n    bool        retval;\n\n    /*\n     * determine return value as a function of strategy, key and query.\n     *\n     * Use GIST_LEAF(entry) to know where you're called in the index tree,\n     * which comes handy when supporting the = operator for example (you could\n     * check for non empty union() in non-leaf nodes and equality in leaf\n     * nodes).\n     */\n\n    *recheck = true;        /* or false if check is exact */\n\n    PG_RETURN_BOOL(retval);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_union(internal, internal)\nRETURNS storage_type\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_union);\n\nDatum\nmy_union(PG_FUNCTION_ARGS)\n{\n    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);\n    GISTENTRY  *ent = entryvec->vector;\n    data_type  *out,\n               *tmp,\n               *old;\n    int         numranges,\n                i = 0;\n\n    numranges = entryvec->n;\n    tmp = DatumGetDataType(ent[0].key);\n    out = tmp;\n\n    if (numranges == 1)\n    {\n        out = data_type_deep_copy(tmp);\n\n        PG_RETURN_DATA_TYPE_P(out);\n    }\n\n    for (i = 1; i < numranges; i++)\n    {\n        old = out;\n        tmp = DatumGetDataType(ent[i].key);\n        out = my_union_implementation(out, tmp);\n    }\n\n    PG_RETURN_DATA_TYPE_P(out);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_decompress);\n\nDatum\nmy_decompress(PG_FUNCTION_ARGS)\n{\n    PG_RETURN_POINTER(PG_GETARG_POINTER(0));\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_penalty(internal, internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;  -- in some cases penalty functions need not be strict\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_penalty);\n\nDatum\nmy_penalty(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *origentry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    GISTENTRY  *newentry = (GISTENTRY *) PG_GETARG_POINTER(1);\n    float      *penalty = (float *) PG_GETARG_POINTER(2);\n    data_type  *orig = DatumGetDataType(origentry->key);\n    data_type  *new = DatumGetDataType(newentry->key);\n\n    *penalty = my_penalty_implementation(orig, new);\n    PG_RETURN_POINTER(penalty);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_picksplit);\n\nDatum\nmy_picksplit(PG_FUNCTION_ARGS)\n{\n    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);\n    GIST_SPLITVEC *v = (GIST_SPLITVEC *) PG_GETARG_POINTER(1);\n    OffsetNumber maxoff = entryvec->n - 1;\n    GISTENTRY  *ent = entryvec->vector;\n    int         i,\n                nbytes;\n    OffsetNumber *left,\n               *right;\n    data_type  *tmp_union;\n    data_type  *unionL;\n    data_type  *unionR;\n    GISTENTRY **raw_entryvec;\n\n    maxoff = entryvec->n - 1;\n    nbytes = (maxoff + 1) * sizeof(OffsetNumber);\n\n    v->spl_left = (OffsetNumber *) palloc(nbytes);\n    left = v->spl_left;\n    v->spl_nleft = 0;\n\n    v->spl_right = (OffsetNumber *) palloc(nbytes);\n    right = v->spl_right;\n    v->spl_nright = 0;\n\n    unionL = NULL;\n    unionR = NULL;\n\n    /* Initialize the raw entry vector. */\n    raw_entryvec = (GISTENTRY **) malloc(entryvec->n * sizeof(void *));\n    for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))\n        raw_entryvec[i] = &(entryvec->vector[i]);\n\n    for (i = FirstOffsetNumber; i <= maxoff; i = OffsetNumberNext(i))\n    {\n        int         real_index = raw_entryvec[i] - entryvec->vector;\n\n        tmp_union = DatumGetDataType(entryvec->vector[real_index].key);\n        Assert(tmp_union != NULL);\n\n        /*\n         * Choose where to put the index entries and update unionL and unionR\n         * accordingly. Append the entries to either v->spl_left or\n         * v->spl_right, and care about the counters.\n         */\n\n        if (my_choice_is_left(unionL, curl, unionR, curr))\n        {\n            if (unionL == NULL)\n                unionL = tmp_union;\n            else\n                unionL = my_union_implementation(unionL, tmp_union);\n\n            *left = real_index;\n            ++left;\n            ++(v->spl_nleft);\n        }\n        else\n        {\n            /*\n             * Same on the right\n             */\n        }\n    }\n\n    v->spl_ldatum = DataTypeGetDatum(unionL);\n    v->spl_rdatum = DataTypeGetDatum(unionR);\n    PG_RETURN_POINTER(v);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_same(storage_type, storage_type, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_same);\n\nDatum\nmy_same(PG_FUNCTION_ARGS)\n{\n    prefix_range *v1 = PG_GETARG_PREFIX_RANGE_P(0);\n    prefix_range *v2 = PG_GETARG_PREFIX_RANGE_P(1);\n    bool       *result = (bool *) PG_GETARG_POINTER(2);\n\n    *result = my_eq(v1, v2);\n    PG_RETURN_POINTER(result);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_distance(internal, data_type, smallint, oid, internal)\nRETURNS float8\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_distance);\n\nDatum\nmy_distance(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    data_type  *query = PG_GETARG_DATA_TYPE_P(1);\n    StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);\n    /* Oid subtype = PG_GETARG_OID(3); */\n    /* bool *recheck = (bool *) PG_GETARG_POINTER(4); */\n    data_type  *key = DatumGetDataType(entry->key);\n    double      retval;\n\n    /*\n     * determine return value as a function of strategy, key and query.\n     */\n\n    PG_RETURN_FLOAT8(retval);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_fetch(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_fetch);\n\nDatum\nmy_fetch(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    input_data_type *in = DatumGetPointer(entry->key);\n    fetched_data_type *fetched_data;\n    GISTENTRY  *retval;\n\n    retval = palloc(sizeof(GISTENTRY));\n    fetched_data = palloc(sizeof(fetched_data_type));\n\n    /*\n     * Convert 'fetched_data' into the a Datum of the original datatype.\n     */\n\n    /* fill *retval from fetched_data. */\n    gistentryinit(*retval, PointerGetDatum(converted_datum),\n                  entry->rel, entry->page, entry->offset, FALSE);\n\n    PG_RETURN_POINTER(retval);\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_options(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\ntypedef enum MyEnumType\n{\n    MY_ENUM_ON,\n    MY_ENUM_OFF,\n    MY_ENUM_AUTO\n} MyEnumType;\n\ntypedef struct\n{\n    int32   vl_len_;    /* varlena header (do not touch directly!) */\n    int     int_param;  /* integer parameter */\n    double  real_param; /* real parameter */\n    MyEnumType enum_param; /* enum parameter */\n    int     str_param;  /* string parameter */\n} MyOptionsStruct;\n\n/* String representation of enum values */\nstatic relopt_enum_elt_def myEnumValues[] =\n{\n    {\"on\", MY_ENUM_ON},\n    {\"off\", MY_ENUM_OFF},\n    {\"auto\", MY_ENUM_AUTO},\n    {(const char *) NULL}   /* list terminator */\n};\n\nstatic char *str_param_default = \"default\";\n\n/*\n * Sample validator: checks that string is not longer than 8 bytes.\n */\nstatic void\nvalidate_my_string_relopt(const char *value)\n{\n    if (strlen(value) > 8)\n        ereport(ERROR,\n                (errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n                 errmsg(\"str_param must be at most 8 bytes\")));\n}\n\n/*\n * Sample filler: switches characters to lower case.\n */\nstatic Size\nfill_my_string_relopt(const char *value, void *ptr)\n{\n    char   *tmp = str_tolower(value, strlen(value), DEFAULT_COLLATION_OID);\n    int     len = strlen(tmp);\n\n    if (ptr)\n        strcpy((char *) ptr, tmp);\n\n    pfree(tmp);\n    return len + 1;\n}\n\nPG_FUNCTION_INFO_V1(my_options);\n\nDatum\nmy_options(PG_FUNCTION_ARGS)\n{\n    local_relopts *relopts = (local_relopts *) PG_GETARG_POINTER(0);\n\n    init_local_reloptions(relopts, sizeof(MyOptionsStruct));\n    add_local_int_reloption(relopts, \"int_param\", \"integer parameter\",\n                            100, 0, 1000000,\n                            offsetof(MyOptionsStruct, int_param));\n    add_local_real_reloption(relopts, \"real_param\", \"real parameter\",\n                             1.0, 0.0, 1000000.0,\n                             offsetof(MyOptionsStruct, real_param));\n    add_local_enum_reloption(relopts, \"enum_param\", \"enum parameter\",\n                             myEnumValues, MY_ENUM_ON,\n                             \"Valid values are: \\\"on\\\", \\\"off\\\" and \\\"auto\\\".\",\n                             offsetof(MyOptionsStruct, enum_param));\n    add_local_string_reloption(relopts, \"str_param\", \"string parameter\",\n                               str_param_default,\n                               &validate_my_string_relopt,\n                               &fill_my_string_relopt,\n                               offsetof(MyOptionsStruct, str_param));\n\n    PG_RETURN_VOID();\n}\n\nPG_FUNCTION_INFO_V1(my_compress);\n\nDatum\nmy_compress(PG_FUNCTION_ARGS)\n{\n    int     int_param = 100;\n    double  real_param = 1.0;\n    MyEnumType enum_param = MY_ENUM_ON;\n    char   *str_param = str_param_default;\n\n    /*\n     * Normally, when opclass contains 'options' method, then options are always\n     * passed to support functions.  However, if you add 'options' method to\n     * existing opclass, previously defined indexes have no options, so the\n     * check is required.\n     */\n    if (PG_HAS_OPCLASS_OPTIONS())\n    {\n        MyOptionsStruct *options = (MyOptionsStruct *) PG_GET_OPCLASS_OPTIONS();\n\n        int_param = options->int_param;\n        real_param = options->real_param;\n        enum_param = options->enum_param;\n        str_param = GET_STRING_RELOPTION(options, str_param);\n    }\n\n    /* the rest implementation of support function */\n}\n\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_sortsupport(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(my_sortsupport);\n\nstatic int\nmy_fastcmp(Datum x, Datum y, SortSupport ssup)\n{\n  /* establish order between x and y by computing some sorting value z */\n\n  int z1 = ComputeSpatialCode(x);\n  int z2 = ComputeSpatialCode(y);\n\n  return z1 == z2 ? 0 : z1 > z2 ? 1 : -1;\n}\n\nDatum\nmy_sortsupport(PG_FUNCTION_ARGS)\n{\n  SortSupport ssup = (SortSupport) PG_GETARG_POINTER(0);\n\n  ssup->comparator = my_fastcmp;\n  PG_RETURN_VOID();\n}\n", "source": "https://www.postgresql.org/docs/current/gist-extensibility.html"},
{"sql": "\", LOCALEDIR);\ntextdomain(\"", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\");\n#endif\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nfprintf(stderr, \"panic level %d\\n\", lvl);\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nfprintf(stderr, gettext(\"panic level %d\\n\"), lvl);\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\n#define _(x) gettext(x)\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nprintf(\"Files were %s.\\n\", flag ? \"copied\" : \"removed\");\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nprintf(\"copied %d file%s\", n, n!=1 ? \"s\" : \"\");\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nif (n==1)\n    printf(\"copied 1 file\");\nelse\n    printf(\"copied %d files\", n):\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nprintf(\"number of copied files: %d\", n);\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\nerrmsg_plural(\"copied %d file\",\n              \"copied %d files\",\n              n,\n              n)\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\n/* translator: This message is not what it seems to be. */\n", "source": "https://www.postgresql.org/docs/current/nls-programmer.html"},
{"sql": "\n#define Max(x, y)       ((x) > (y) ? (x) : (y))\n", "source": "https://www.postgresql.org/docs/current/source-conventions.html"},
{"sql": "\n#ifndef FRONTEND\nstatic inline MemoryContext\nMemoryContextSwitchTo(MemoryContext context)\n{\n    MemoryContext old = CurrentMemoryContext;\n\n    CurrentMemoryContext = context;\n    return old;\n}\n#endif   /* FRONTEND */\n", "source": "https://www.postgresql.org/docs/current/source-conventions.html"},
{"sql": "\nstatic void\nhandle_sighup(SIGNAL_ARGS)\n{\n    int         save_errno = errno;\n\n    got_SIGHUP = true;\n    SetLatch(MyLatch);\n\n    errno = save_errno;\n}\n", "source": "https://www.postgresql.org/docs/current/source-conventions.html"},
{"sql": "\n(*emit_log_hook) (edata);\n", "source": "https://www.postgresql.org/docs/current/source-conventions.html"},
{"sql": "\nparamInfo->paramFetch(paramInfo, paramId);\n", "source": "https://www.postgresql.org/docs/current/source-conventions.html"},
{"sql": "\nIpcMemoryCreate: shmget(key=%d, size=%u, 0%o) failed: %m\n(plus a long addendum that is basically a hint)\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nPrimary:    could not create shared memory segment: %m\nDetail:     Failed syscall was shmget(key=%d, size=%u, 0%o).\nHint:       the addendum\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\ncould not open file \"%s\": %m\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\ncannot open file \"%s\"\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\ncould not open file %s: %m\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nBAD:    could not open file %s\nBETTER: could not open file %s (I/O failure)\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nBAD:    pg_strtoint32: error in \"z\": cannot parse \"z\"\nBETTER: invalid input syntax for type integer: \"z\"\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nBAD:    open() failed: %m\nBETTER: could not open file %s: %m\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nBAD:    unknown node type\nBETTER: unrecognized node type: 42\n", "source": "https://www.postgresql.org/docs/current/error-style-guide.html"},
{"sql": "\nereport(ERROR,\n        errcode(ERRCODE_DIVISION_BY_ZERO),\n        errmsg(\"division by zero\"));\n", "source": "https://www.postgresql.org/docs/current/error-message-reporting.html"},
{"sql": "\nereport(ERROR,\n        (errcode(ERRCODE_DIVISION_BY_ZERO),\n         errmsg(\"division by zero\")));\n", "source": "https://www.postgresql.org/docs/current/error-message-reporting.html"},
{"sql": "\nereport(ERROR,\n        errcode(ERRCODE_AMBIGUOUS_FUNCTION),\n        errmsg(\"function %s is not unique\",\n               func_signature_string(funcname, nargs,\n                                     NIL, actual_arg_types)),\n        errhint(\"Unable to choose a best candidate function. \"\n                \"You might need to add explicit typecasts.\"));\n", "source": "https://www.postgresql.org/docs/current/error-message-reporting.html"},
{"sql": "\n/*\n * comment text begins here\n * and continues here\n */\n", "source": "https://www.postgresql.org/docs/current/source-format.html"},
{"sql": "\n    /*----------\n     * comment text begins here\n     * and continues here\n     *----------\n     */\n", "source": "https://www.postgresql.org/docs/current/source-format.html"},
{"sql": "\nmore -x4\nless -x4\n", "source": "https://www.postgresql.org/docs/current/source-format.html"},
{"sql": "\n#include \"postgres.h\"\n\n#include \"executor/spi.h\"\n#include \"utils/builtins.h\"\n\nPG_MODULE_MAGIC;\n\nPG_FUNCTION_INFO_V1(execq);\n\nDatum\nexecq(PG_FUNCTION_ARGS)\n{\n    char *command;\n    int cnt;\n    int ret;\n    uint64 proc;\n\n    /* Convert given text object to a C string */\n    command = text_to_cstring(PG_GETARG_TEXT_PP(0));\n    cnt = PG_GETARG_INT32(1);\n\n    SPI_connect();\n\n    ret = SPI_exec(command, cnt);\n\n    proc = SPI_processed;\n\n    /*\n     * If some rows were fetched, print them via elog(INFO).\n     */\n    if (ret > 0 && SPI_tuptable != NULL)\n    {\n        SPITupleTable *tuptable = SPI_tuptable;\n        TupleDesc tupdesc = tuptable->tupdesc;\n        char buf[8192];\n        uint64 j;\n\n        for (j = 0; j < tuptable->numvals; j++)\n        {\n            HeapTuple tuple = tuptable->vals[j];\n            int i;\n\n            for (i = 1, buf[0] = 0; i <= tupdesc->natts; i++)\n                snprintf(buf + strlen(buf), sizeof(buf) - strlen(buf), \" %s%s\",\n                        SPI_getvalue(tuple, tupdesc, i),\n                        (i == tupdesc->natts) ? \" \" : \" |\");\n            elog(INFO, \"EXECQ: %s\", buf);\n        }\n    }\n\n    SPI_finish();\n    pfree(command);\n\n    PG_RETURN_INT64(proc);\n}\n", "source": "https://www.postgresql.org/docs/current/spi-examples.html"},
{"sql": "\nCREATE FUNCTION execq(text, integer) RETURNS int8\n    AS '", "source": "https://www.postgresql.org/docs/current/spi-examples.html"},
{"sql": "'\n    LANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/spi-examples.html"},
{"sql": "\n=> SELECT execq('CREATE TABLE a (x integer)', 0);\n execq\n-------\n     0\n(1 row)\n\n=> INSERT INTO a VALUES (execq('INSERT INTO a VALUES (0)', 0));\nINSERT 0 1\n=> SELECT execq('SELECT * FROM a', 0);\nINFO:  EXECQ:  0    -- inserted by execq\nINFO:  EXECQ:  1    -- returned by execq and inserted by upper INSERT\n\n execq\n-------\n     2\n(1 row)\n\n=> SELECT execq('INSERT INTO a SELECT x + 2 FROM a', 1);\n execq\n-------\n     1\n(1 row)\n\n=> SELECT execq('SELECT * FROM a', 10);\nINFO:  EXECQ:  0\nINFO:  EXECQ:  1\nINFO:  EXECQ:  2    -- 0 + 2, only one row inserted - as specified\n\n execq\n-------\n     3              -- 10 is the max value only, 3 is the real number of rows\n(1 row)\n\n=> DELETE FROM a;\nDELETE 3\n=> INSERT INTO a VALUES (execq('SELECT * FROM a', 0) + 1);\nINSERT 0 1\n=> SELECT * FROM a;\n x\n---\n 1                  -- no rows in a (0) + 1\n(1 row)\n\n=> INSERT INTO a VALUES (execq('SELECT * FROM a', 0) + 1);\nINFO:  EXECQ:  1\nINSERT 0 1\n=> SELECT * FROM a;\n x\n---\n 1\n 2                  -- there was one row in a + 1\n(2 rows)\n\n-- This demonstrates the data changes visibility rule:\n\n=> INSERT INTO a SELECT execq('SELECT * FROM a', 0) * x FROM a;\nINFO:  EXECQ:  1\nINFO:  EXECQ:  2\nINFO:  EXECQ:  1\nINFO:  EXECQ:  2\nINFO:  EXECQ:  2\nINSERT 0 2\n=> SELECT * FROM a;\n x\n---\n 1\n 2\n 2                  -- 2 rows * 1 (x in first row)\n 6                  -- 3 rows (2 + 1 just inserted) * 2 (x in second row)\n(4 rows)               ^^^^^^\n                       rows visible to execq() in different invocations\n", "source": "https://www.postgresql.org/docs/current/spi-examples.html"},
{"sql": "\n#. automatic comment\n#: filename.c:1023\n#, flags, flags\n", "source": "https://www.postgresql.org/docs/current/nls-translator.html"},
{"sql": "\nmake init-po\n", "source": "https://www.postgresql.org/docs/current/nls-translator.html"},
{"sql": "\nAVAIL_LANGUAGES := de fr\n", "source": "https://www.postgresql.org/docs/current/nls-translator.html"},
{"sql": "\nmake update-po\n", "source": "https://www.postgresql.org/docs/current/nls-translator.html"},
{"sql": "\nmsgstr \"Die Datei %2$s hat %1$u Zeichen.\"\n", "source": "https://www.postgresql.org/docs/current/nls-translator.html"},
{"sql": "\nINSERT INTO a SELECT * FROM a;\n", "source": "https://www.postgresql.org/docs/current/spi-visibility.html"},
{"sql": "\ntypedef struct OutputPluginCallbacks\n{\n    LogicalDecodeStartupCB startup_cb;\n    LogicalDecodeBeginCB begin_cb;\n    LogicalDecodeChangeCB change_cb;\n    LogicalDecodeTruncateCB truncate_cb;\n    LogicalDecodeCommitCB commit_cb;\n    LogicalDecodeMessageCB message_cb;\n    LogicalDecodeFilterByOriginCB filter_by_origin_cb;\n    LogicalDecodeShutdownCB shutdown_cb;\n    LogicalDecodeFilterPrepareCB filter_prepare_cb;\n    LogicalDecodeBeginPrepareCB begin_prepare_cb;\n    LogicalDecodePrepareCB prepare_cb;\n    LogicalDecodeCommitPreparedCB commit_prepared_cb;\n    LogicalDecodeRollbackPreparedCB rollback_prepared_cb;\n    LogicalDecodeStreamStartCB stream_start_cb;\n    LogicalDecodeStreamStopCB stream_stop_cb;\n    LogicalDecodeStreamAbortCB stream_abort_cb;\n    LogicalDecodeStreamPrepareCB stream_prepare_cb;\n    LogicalDecodeStreamCommitCB stream_commit_cb;\n    LogicalDecodeStreamChangeCB stream_change_cb;\n    LogicalDecodeStreamMessageCB stream_message_cb;\n    LogicalDecodeStreamTruncateCB stream_truncate_cb;\n} OutputPluginCallbacks;\n\ntypedef void (*LogicalOutputPluginInit) (struct OutputPluginCallbacks *cb);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\nALTER TABLE user_catalog_table SET (user_catalog_table = true);\nCREATE TABLE another_catalog_table(data text) WITH (user_catalog_table = true);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStartupCB) (struct LogicalDecodingContext *ctx,\n                                        OutputPluginOptions *options,\n                                        bool is_init);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef struct OutputPluginOptions\n{\n    OutputPluginOutputType output_type;\n    bool        receive_rewrites;\n} OutputPluginOptions;\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeShutdownCB) (struct LogicalDecodingContext *ctx);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeBeginCB) (struct LogicalDecodingContext *ctx,\n                                      ReorderBufferTXN *txn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeCommitCB) (struct LogicalDecodingContext *ctx,\n                                       ReorderBufferTXN *txn,\n                                       XLogRecPtr commit_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeChangeCB) (struct LogicalDecodingContext *ctx,\n                                       ReorderBufferTXN *txn,\n                                       Relation relation,\n                                       ReorderBufferChange *change);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeTruncateCB) (struct LogicalDecodingContext *ctx,\n                                         ReorderBufferTXN *txn,\n                                         int nrelations,\n                                         Relation relations[],\n                                         ReorderBufferChange *change);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef bool (*LogicalDecodeFilterByOriginCB) (struct LogicalDecodingContext *ctx,\n                                               RepOriginId origin_id);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeMessageCB) (struct LogicalDecodingContext *ctx,\n                                        ReorderBufferTXN *txn,\n                                        XLogRecPtr message_lsn,\n                                        bool transactional,\n                                        const char *prefix,\n                                        Size message_size,\n                                        const char *message);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef bool (*LogicalDecodeFilterPrepareCB) (struct LogicalDecodingContext *ctx,\n                                              TransactionId xid,\n                                              const char *gid);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeBeginPrepareCB) (struct LogicalDecodingContext *ctx,\n                                             ReorderBufferTXN *txn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodePrepareCB) (struct LogicalDecodingContext *ctx,\n                                        ReorderBufferTXN *txn,\n                                        XLogRecPtr prepare_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeCommitPreparedCB) (struct LogicalDecodingContext *ctx,\n                                               ReorderBufferTXN *txn,\n                                               XLogRecPtr commit_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeRollbackPreparedCB) (struct LogicalDecodingContext *ctx,\n                                                 ReorderBufferTXN *txn,\n                                                 XLogRecPtr prepare_end_lsn,\n                                                 TimestampTz prepare_time);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamStartCB) (struct LogicalDecodingContext *ctx,\n                                            ReorderBufferTXN *txn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamStopCB) (struct LogicalDecodingContext *ctx,\n                                           ReorderBufferTXN *txn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamAbortCB) (struct LogicalDecodingContext *ctx,\n                                            ReorderBufferTXN *txn,\n                                            XLogRecPtr abort_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamPrepareCB) (struct LogicalDecodingContext *ctx,\n                                              ReorderBufferTXN *txn,\n                                              XLogRecPtr prepare_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamCommitCB) (struct LogicalDecodingContext *ctx,\n                                             ReorderBufferTXN *txn,\n                                             XLogRecPtr commit_lsn);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamChangeCB) (struct LogicalDecodingContext *ctx,\n                                             ReorderBufferTXN *txn,\n                                             Relation relation,\n                                             ReorderBufferChange *change);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamMessageCB) (struct LogicalDecodingContext *ctx,\n                                              ReorderBufferTXN *txn,\n                                              XLogRecPtr message_lsn,\n                                              bool transactional,\n                                              const char *prefix,\n                                              Size message_size,\n                                              const char *message);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\ntypedef void (*LogicalDecodeStreamTruncateCB) (struct LogicalDecodingContext *ctx,\n                                               ReorderBufferTXN *txn,\n                                               int nrelations,\n                                               Relation relations[],\n                                               ReorderBufferChange *change);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\nOutputPluginPrepareWrite(ctx, true);\nappendStringInfo(ctx->out, \"BEGIN %u\", txn->xid);\nOutputPluginWrite(ctx, true);\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-output-plugin.html"},
{"sql": "\npostgres=# -- Create a slot named 'regression_slot' using the output plugin 'test_decoding'\npostgres=# SELECT * FROM pg_create_logical_replication_slot('regression_slot', 'test_decoding', false, true);\n    slot_name    |    lsn\n-----------------+-----------\n regression_slot | 0/16B1970\n(1 row)\n\npostgres=# SELECT slot_name, plugin, slot_type, database, active, restart_lsn, confirmed_flush_lsn FROM pg_replication_slots;\n    slot_name    |    plugin     | slot_type | database | active | restart_lsn | confirmed_flush_lsn\n-----------------+---------------+-----------+----------+--------+-------------+-----------------\n regression_slot | test_decoding | logical   | postgres | f      | 0/16A4408   | 0/16A4440\n(1 row)\n\npostgres=# -- There are no changes to see yet\npostgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n lsn | xid | data \n-----+-----+------\n(0 rows)\n\npostgres=# CREATE TABLE data(id serial primary key, data text);\nCREATE TABLE\n\npostgres=# -- DDL isn't replicated, so all you'll see is the transaction\npostgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    |  xid  |     data     \n-----------+-------+--------------\n 0/BA2DA58 | 10297 | BEGIN 10297\n 0/BA5A5A0 | 10297 | COMMIT 10297\n(2 rows)\n\npostgres=# -- Once changes are read, they're consumed and not emitted\npostgres=# -- in a subsequent call:\npostgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n lsn | xid | data \n-----+-----+------\n(0 rows)\n\npostgres=# BEGIN;\npostgres=*# INSERT INTO data(data) VALUES('1');\npostgres=*# INSERT INTO data(data) VALUES('2');\npostgres=*# COMMIT;\n\npostgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    |  xid  |                          data                           \n-----------+-------+---------------------------------------------------------\n 0/BA5A688 | 10298 | BEGIN 10298\n 0/BA5A6F0 | 10298 | table public.data: INSERT: id[integer]:1 data[text]:'1'\n 0/BA5A7F8 | 10298 | table public.data: INSERT: id[integer]:2 data[text]:'2'\n 0/BA5A8A8 | 10298 | COMMIT 10298\n(4 rows)\n\npostgres=# INSERT INTO data(data) VALUES('3');\n\npostgres=# -- You can also peek ahead in the change stream without consuming changes\npostgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);\n    lsn    |  xid  |                          data                           \n-----------+-------+---------------------------------------------------------\n 0/BA5A8E0 | 10299 | BEGIN 10299\n 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'\n 0/BA5A990 | 10299 | COMMIT 10299\n(3 rows)\n\npostgres=# -- The next call to pg_logical_slot_peek_changes() returns the same changes again\npostgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL);\n    lsn    |  xid  |                          data                           \n-----------+-------+---------------------------------------------------------\n 0/BA5A8E0 | 10299 | BEGIN 10299\n 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'\n 0/BA5A990 | 10299 | COMMIT 10299\n(3 rows)\n\npostgres=# -- options can be passed to output plugin, to influence the formatting\npostgres=# SELECT * FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include-timestamp', 'on');\n    lsn    |  xid  |                          data                           \n-----------+-------+---------------------------------------------------------\n 0/BA5A8E0 | 10299 | BEGIN 10299\n 0/BA5A8E0 | 10299 | table public.data: INSERT: id[integer]:3 data[text]:'3'\n 0/BA5A990 | 10299 | COMMIT 10299 (at 2017-05-10 12:07:21.272494-04)\n(3 rows)\n\npostgres=# -- Remember to destroy a slot you no longer need to stop it consuming\npostgres=# -- server resources:\npostgres=# SELECT pg_drop_replication_slot('regression_slot');\n pg_drop_replication_slot\n-----------------------\n\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-example.html"},
{"sql": "\n$ pg_recvlogical -d postgres --slot=test --create-slot\n$ pg_recvlogical -d postgres --slot=test --start -f -\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-example.html"},
{"sql": "\n$ psql -d postgres -c \"INSERT INTO data(data) VALUES('4');\"\n$ fg\nBEGIN 693\ntable public.data: INSERT: id[integer]:4 data[text]:'4'\nCOMMIT 693\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-example.html"},
{"sql": "\n$ pg_recvlogical -d postgres --slot=test --drop-slot\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-example.html"},
{"sql": "\npostgres=# BEGIN;\npostgres=*# INSERT INTO data(data) VALUES('5');\npostgres=*# PREPARE TRANSACTION 'test_prepared1';\n\npostgres=# SELECT * FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    | xid |                          data                           \n-----------+-----+---------------------------------------------------------\n 0/1689DC0 | 529 | BEGIN 529\n 0/1689DC0 | 529 | table public.data: INSERT: id[integer]:3 data[text]:'5'\n 0/1689FC0 | 529 | PREPARE TRANSACTION 'test_prepared1', txid 529\n(3 rows)\n\npostgres=# COMMIT PREPARED 'test_prepared1';\npostgres=# select * from pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    | xid |                    data                    \n-----------+-----+--------------------------------------------\n 0/168A060 | 529 | COMMIT PREPARED 'test_prepared1', txid 529\n(4 row)\n\npostgres=#-- you can also rollback a prepared transaction\npostgres=# BEGIN;\npostgres=*# INSERT INTO data(data) VALUES('6');\npostgres=*# PREPARE TRANSACTION 'test_prepared2';\npostgres=# select * from pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    | xid |                          data                           \n-----------+-----+---------------------------------------------------------\n 0/168A180 | 530 | BEGIN 530\n 0/168A1E8 | 530 | table public.data: INSERT: id[integer]:4 data[text]:'6'\n 0/168A430 | 530 | PREPARE TRANSACTION 'test_prepared2', txid 530\n(3 rows)\n\npostgres=# ROLLBACK PREPARED 'test_prepared2';\npostgres=# select * from pg_logical_slot_get_changes('regression_slot', NULL, NULL);\n    lsn    | xid |                     data                     \n-----------+-----+----------------------------------------------\n 0/168A4B8 | 530 | ROLLBACK PREPARED 'test_prepared2', txid 530\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/logicaldecoding-example.html"},
{"sql": "\nSELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa\n    ON pl.pid = psa.pid;\n", "source": "https://www.postgresql.org/docs/current/view-pg-locks.html"},
{"sql": "\nSELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx\n    ON pl.virtualtransaction = '-1/' || ppx.transaction;\n", "source": "https://www.postgresql.org/docs/current/view-pg-locks.html"},
{"sql": "\npsql \"dbname=postgres replication=database\" -c \"IDENTIFY_SYSTEM;\"\n", "source": "https://www.postgresql.org/docs/current/protocol-replication.html"},
{"sql": "\nINSERT INTO mytable VALUES(1);\nSELECT 1/0;\nINSERT INTO mytable VALUES(2);\n", "source": "https://www.postgresql.org/docs/current/protocol-flow.html"},
{"sql": "\nBEGIN;\nINSERT INTO mytable VALUES(1);\nCOMMIT;\nINSERT INTO mytable VALUES(2);\nSELECT 1/0;\n", "source": "https://www.postgresql.org/docs/current/protocol-flow.html"},
{"sql": "\nBEGIN;\nSELECT 1/0;\nROLLBACK;\n", "source": "https://www.postgresql.org/docs/current/protocol-flow.html"},
{"sql": "\nBEGIN;\nINSERT INTO mytable VALUES(1);\nCOMMIT;\nINSERT INTO mytable VALUES(2);\nSELCT 1/0;\n", "source": "https://www.postgresql.org/docs/current/protocol-flow.html"},
{"sql": "\nForeignDataWrapper *\nGetForeignDataWrapperExtended(Oid fdwid, bits16 flags);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignDataWrapper *\nGetForeignDataWrapper(Oid fdwid);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignServer *\nGetForeignServerExtended(Oid serverid, bits16 flags);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignServer *\nGetForeignServer(Oid serverid);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nUserMapping *\nGetUserMapping(Oid userid, Oid serverid);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignTable *\nGetForeignTable(Oid relid);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nList *\nGetForeignColumnOptions(Oid relid, AttrNumber attnum);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignDataWrapper *\nGetForeignDataWrapperByName(const char *name, bool missing_ok);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nForeignServer *\nGetForeignServerByName(const char *name, bool missing_ok);\n", "source": "https://www.postgresql.org/docs/current/fdw-helpers.html"},
{"sql": "\nvoid\nGetForeignRelSize(PlannerInfo *root,\n                  RelOptInfo *baserel,\n                  Oid foreigntableid);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nGetForeignPaths(PlannerInfo *root,\n                RelOptInfo *baserel,\n                Oid foreigntableid);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nForeignScan *\nGetForeignPlan(PlannerInfo *root,\n               RelOptInfo *baserel,\n               Oid foreigntableid,\n               ForeignPath *best_path,\n               List *tlist,\n               List *scan_clauses,\n               Plan *outer_plan);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nBeginForeignScan(ForeignScanState *node,\n                 int eflags);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot *\nIterateForeignScan(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nReScanForeignScan(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nEndForeignScan(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nGetForeignJoinPaths(PlannerInfo *root,\n                    RelOptInfo *joinrel,\n                    RelOptInfo *outerrel,\n                    RelOptInfo *innerrel,\n                    JoinType jointype,\n                    JoinPathExtraData *extra);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nGetForeignUpperPaths(PlannerInfo *root,\n                     UpperRelationKind stage,\n                     RelOptInfo *input_rel,\n                     RelOptInfo *output_rel,\n                     void *extra);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nAddForeignUpdateTargets(PlannerInfo *root,\n                        Index rtindex,\n                        RangeTblEntry *target_rte,\n                        Relation target_relation);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nList *\nPlanForeignModify(PlannerInfo *root,\n                  ModifyTable *plan,\n                  Index resultRelation,\n                  int subplan_index);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nBeginForeignModify(ModifyTableState *mtstate,\n                   ResultRelInfo *rinfo,\n                   List *fdw_private,\n                   int subplan_index,\n                   int eflags);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot *\nExecForeignInsert(EState *estate,\n                  ResultRelInfo *rinfo,\n                  TupleTableSlot *slot,\n                  TupleTableSlot *planSlot);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot **\nExecForeignBatchInsert(EState *estate,\n                       ResultRelInfo *rinfo,\n                       TupleTableSlot **slots,\n                       TupleTableSlot **planSlots,\n                       int *numSlots);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nint\nGetForeignModifyBatchSize(ResultRelInfo *rinfo);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot *\nExecForeignUpdate(EState *estate,\n                  ResultRelInfo *rinfo,\n                  TupleTableSlot *slot,\n                  TupleTableSlot *planSlot);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot *\nExecForeignDelete(EState *estate,\n                  ResultRelInfo *rinfo,\n                  TupleTableSlot *slot,\n                  TupleTableSlot *planSlot);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nEndForeignModify(EState *estate,\n                 ResultRelInfo *rinfo);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nBeginForeignInsert(ModifyTableState *mtstate,\n                   ResultRelInfo *rinfo);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nEndForeignInsert(EState *estate,\n                 ResultRelInfo *rinfo);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nint\nIsForeignRelUpdatable(Relation rel);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nbool\nPlanDirectModify(PlannerInfo *root,\n                 ModifyTable *plan,\n                 Index resultRelation,\n                 int subplan_index);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nBeginDirectModify(ForeignScanState *node,\n                  int eflags);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nTupleTableSlot *\nIterateDirectModify(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nEndDirectModify(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nExecForeignTruncate(List *rels,\n                    DropBehavior behavior,\n                    bool restart_seqs);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nRowMarkType\nGetForeignRowMarkType(RangeTblEntry *rte,\n                      LockClauseStrength strength);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nRefetchForeignRow(EState *estate,\n                  ExecRowMark *erm,\n                  Datum rowid,\n                  TupleTableSlot *slot,\n                  bool *updated);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nbool\nRecheckForeignScan(ForeignScanState *node,\n                   TupleTableSlot *slot);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nExplainForeignScan(ForeignScanState *node,\n                   ExplainState *es);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nExplainForeignModify(ModifyTableState *mtstate,\n                     ResultRelInfo *rinfo,\n                     List *fdw_private,\n                     int subplan_index,\n                     struct ExplainState *es);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nExplainDirectModify(ForeignScanState *node,\n                    ExplainState *es);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nbool\nAnalyzeForeignTable(Relation relation,\n                    AcquireSampleRowsFunc *func,\n                    BlockNumber *totalpages);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nint\nAcquireSampleRowsFunc(Relation relation,\n                      int elevel,\n                      HeapTuple *rows,\n                      int targrows,\n                      double *totalrows,\n                      double *totaldeadrows);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nList *\nImportForeignSchema(ImportForeignSchemaStmt *stmt, Oid serverOid);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nbool\nIsForeignScanParallelSafe(PlannerInfo *root, RelOptInfo *rel,\n                          RangeTblEntry *rte);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nSize\nEstimateDSMForeignScan(ForeignScanState *node, ParallelContext *pcxt);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nInitializeDSMForeignScan(ForeignScanState *node, ParallelContext *pcxt,\n                         void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nReInitializeDSMForeignScan(ForeignScanState *node, ParallelContext *pcxt,\n                           void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nInitializeWorkerForeignScan(ForeignScanState *node, shm_toc *toc,\n                            void *coordinate);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nShutdownForeignScan(ForeignScanState *node);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nbool\nIsForeignPathAsyncCapable(ForeignPath *path);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nForeignAsyncRequest(AsyncRequest *areq);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nForeignAsyncConfigureWait(AsyncRequest *areq);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nForeignAsyncNotify(AsyncRequest *areq);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nList *\nReparameterizeForeignPathByChild(PlannerInfo *root, List *fdw_private,\n                                 RelOptInfo *child_rel);\n", "source": "https://www.postgresql.org/docs/current/fdw-callbacks.html"},
{"sql": "\nvoid\nSampleScanGetSampleSize (PlannerInfo *root,\n                         RelOptInfo *baserel,\n                         List *paramexprs,\n                         BlockNumber *pages,\n                         double *tuples);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\nvoid\nInitSampleScan (SampleScanState *node,\n                int eflags);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\nvoid\nBeginSampleScan (SampleScanState *node,\n                 Datum *params,\n                 int nparams,\n                 uint32 seed);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\nBlockNumber\nNextSampleBlock (SampleScanState *node, BlockNumber nblocks);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\nOffsetNumber\nNextSampleTuple (SampleScanState *node,\n                 BlockNumber blockno,\n                 OffsetNumber maxoffset);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\nvoid\nEndSampleScan (SampleScanState *node);\n", "source": "https://www.postgresql.org/docs/current/tablesample-support-functions.html"},
{"sql": "\ntypedef struct CustomScan\n{\n    Scan      scan;\n    uint32    flags;\n    List     *custom_plans;\n    List     *custom_exprs;\n    List     *custom_private;\n    List     *custom_scan_tlist;\n    Bitmapset *custom_relids;\n    const CustomScanMethods *methods;\n} CustomScan;\n", "source": "https://www.postgresql.org/docs/current/custom-scan-plan.html"},
{"sql": "\nNode *(*CreateCustomScanState) (CustomScan *cscan);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-plan.html"},
{"sql": "\ntypedef void (*set_rel_pathlist_hook_type) (PlannerInfo *root,\n                                            RelOptInfo *rel,\n                                            Index rti,\n                                            RangeTblEntry *rte);\nextern PGDLLIMPORT set_rel_pathlist_hook_type set_rel_pathlist_hook;\n", "source": "https://www.postgresql.org/docs/current/custom-scan-path.html"},
{"sql": "\ntypedef struct CustomPath\n{\n    Path      path;\n    uint32    flags;\n    List     *custom_paths;\n    List     *custom_private;\n    const CustomPathMethods *methods;\n} CustomPath;\n", "source": "https://www.postgresql.org/docs/current/custom-scan-path.html"},
{"sql": "\ntypedef void (*set_join_pathlist_hook_type) (PlannerInfo *root,\n                                             RelOptInfo *joinrel,\n                                             RelOptInfo *outerrel,\n                                             RelOptInfo *innerrel,\n                                             JoinType jointype,\n                                             JoinPathExtraData *extra);\nextern PGDLLIMPORT set_join_pathlist_hook_type set_join_pathlist_hook;\n", "source": "https://www.postgresql.org/docs/current/custom-scan-path.html"},
{"sql": "\nPlan *(*PlanCustomPath) (PlannerInfo *root,\n                         RelOptInfo *rel,\n                         CustomPath *best_path,\n                         List *tlist,\n                         List *clauses,\n                         List *custom_plans);\n", "source": "https://www.postgresql.org/docs/current/custom-scan-path.html"},
{"sql": "\nIndexBuildResult *\nambuild (Relation heapRelation,\n         Relation indexRelation,\n         IndexInfo *indexInfo);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\nambuildempty (Relation indexRelation);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbool\naminsert (Relation indexRelation,\n          Datum *values,\n          bool *isnull,\n          ItemPointer heap_tid,\n          Relation heapRelation,\n          IndexUniqueCheck checkUnique,\n          bool indexUnchanged,\n          IndexInfo *indexInfo);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nIndexBulkDeleteResult *\nambulkdelete (IndexVacuumInfo *info,\n              IndexBulkDeleteResult *stats,\n              IndexBulkDeleteCallback callback,\n              void *callback_state);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nIndexBulkDeleteResult *\namvacuumcleanup (IndexVacuumInfo *info,\n                 IndexBulkDeleteResult *stats);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbool\namcanreturn (Relation indexRelation, int attno);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namcostestimate (PlannerInfo *root,\n                IndexPath *path,\n                double loop_count,\n                Cost *indexStartupCost,\n                Cost *indexTotalCost,\n                Selectivity *indexSelectivity,\n                double *indexCorrelation,\n                double *indexPages);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbytea *\namoptions (ArrayType *reloptions,\n           bool validate);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbool\namproperty (Oid index_oid, int attno,\n            IndexAMProperty prop, const char *propname,\n            bool *res, bool *isnull);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nchar *\nambuildphasename (int64 phasenum);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbool\namvalidate (Oid opclassoid);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namadjustmembers (Oid opfamilyoid,\n                 Oid opclassoid,\n                 List *operators,\n                 List *functions);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nIndexScanDesc\nambeginscan (Relation indexRelation,\n             int nkeys,\n             int norderbys);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namrescan (IndexScanDesc scan,\n          ScanKey keys,\n          int nkeys,\n          ScanKey orderbys,\n          int norderbys);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nbool\namgettuple (IndexScanDesc scan,\n            ScanDirection direction);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nint64\namgetbitmap (IndexScanDesc scan,\n             TIDBitmap *tbm);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namendscan (IndexScanDesc scan);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\nammarkpos (IndexScanDesc scan);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namrestrpos (IndexScanDesc scan);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nSize\namestimateparallelscan (void);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\naminitparallelscan (void *target);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\nvoid\namparallelrescan (IndexScanDesc scan);\n", "source": "https://www.postgresql.org/docs/current/index-functions.html"},
{"sql": "\ntypedef struct IndexAmRoutine\n{\n    NodeTag     type;\n\n    /*\n     * Total number of strategies (operators) by which we can traverse/search\n     * this AM.  Zero if AM does not have a fixed set of strategy assignments.\n     */\n    uint16      amstrategies;\n    /* total number of support functions that this AM uses */\n    uint16      amsupport;\n    /* opclass options support function number or 0 */\n    uint16      amoptsprocnum;\n    /* does AM support ORDER BY indexed column's value? */\n    bool        amcanorder;\n    /* does AM support ORDER BY result of an operator on indexed column? */\n    bool        amcanorderbyop;\n    /* does AM support backward scanning? */\n    bool        amcanbackward;\n    /* does AM support UNIQUE indexes? */\n    bool        amcanunique;\n    /* does AM support multi-column indexes? */\n    bool        amcanmulticol;\n    /* does AM require scans to have a constraint on the first index column? */\n    bool        amoptionalkey;\n    /* does AM handle ScalarArrayOpExpr quals? */\n    bool        amsearcharray;\n    /* does AM handle IS NULL/IS NOT NULL quals? */\n    bool        amsearchnulls;\n    /* can index storage data type differ from column data type? */\n    bool        amstorage;\n    /* can an index of this type be clustered on? */\n    bool        amclusterable;\n    /* does AM handle predicate locks? */\n    bool        ampredlocks;\n    /* does AM support parallel scan? */\n    bool        amcanparallel;\n    /* does AM support columns included with clause INCLUDE? */\n    bool        amcaninclude;\n    /* does AM use maintenance_work_mem? */\n    bool        amusemaintenanceworkmem;\n    /* OR of parallel vacuum flags */\n    uint8       amparallelvacuumoptions;\n    /* type of data stored in index, or InvalidOid if variable */\n    Oid         amkeytype;\n\n    /* interface functions */\n    ambuild_function ambuild;\n    ambuildempty_function ambuildempty;\n    aminsert_function aminsert;\n    ambulkdelete_function ambulkdelete;\n    amvacuumcleanup_function amvacuumcleanup;\n    amcanreturn_function amcanreturn;   /* can be NULL */\n    amcostestimate_function amcostestimate;\n    amoptions_function amoptions;\n    amproperty_function amproperty;     /* can be NULL */\n    ambuildphasename_function ambuildphasename;   /* can be NULL */\n    amvalidate_function amvalidate;\n    amadjustmembers_function amadjustmembers; /* can be NULL */\n    ambeginscan_function ambeginscan;\n    amrescan_function amrescan;\n    amgettuple_function amgettuple;     /* can be NULL */\n    amgetbitmap_function amgetbitmap;   /* can be NULL */\n    amendscan_function amendscan;\n    ammarkpos_function ammarkpos;       /* can be NULL */\n    amrestrpos_function amrestrpos;     /* can be NULL */\n\n    /* interface functions to support parallel index scans */\n    amestimateparallelscan_function amestimateparallelscan;    /* can be NULL */\n    aminitparallelscan_function aminitparallelscan;    /* can be NULL */\n    amparallelrescan_function amparallelrescan;    /* can be NULL */\n} IndexAmRoutine;\n", "source": "https://www.postgresql.org/docs/current/index-api.html"},
{"sql": "\nCREATE INDEX ON my_table USING GIST (my_inet_column inet_ops);\n", "source": "https://www.postgresql.org/docs/current/gist-builtin-opclasses.html"},
{"sql": "\ntypedef struct spgConfigIn\n{\n    Oid         attType;        /* Data type to be indexed */\n} spgConfigIn;\n\ntypedef struct spgConfigOut\n{\n    Oid         prefixType;     /* Data type of inner-tuple prefixes */\n    Oid         labelType;      /* Data type of inner-tuple node labels */\n    Oid         leafType;       /* Data type of leaf-tuple values */\n    bool        canReturnData;  /* Opclass can reconstruct original data */\n    bool        longValuesOK;   /* Opclass can cope with values > 1 page */\n} spgConfigOut;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\ntypedef struct spgChooseIn\n{\n    Datum       datum;          /* original datum to be indexed */\n    Datum       leafDatum;      /* current datum to be stored at leaf */\n    int         level;          /* current level (counting from zero) */\n\n    /* Data from current inner tuple */\n    bool        allTheSame;     /* tuple is marked all-the-same? */\n    bool        hasPrefix;      /* tuple has a prefix? */\n    Datum       prefixDatum;    /* if so, the prefix value */\n    int         nNodes;         /* number of nodes in the inner tuple */\n    Datum      *nodeLabels;     /* node label values (NULL if none) */\n} spgChooseIn;\n\ntypedef enum spgChooseResultType\n{\n    spgMatchNode = 1,           /* descend into existing node */\n    spgAddNode,                 /* add a node to the inner tuple */\n    spgSplitTuple               /* split inner tuple (change its prefix) */\n} spgChooseResultType;\n\ntypedef struct spgChooseOut\n{\n    spgChooseResultType resultType;     /* action code, see above */\n    union\n    {\n        struct                  /* results for spgMatchNode */\n        {\n            int         nodeN;      /* descend to this node (index from 0) */\n            int         levelAdd;   /* increment level by this much */\n            Datum       restDatum;  /* new leaf datum */\n        }           matchNode;\n        struct                  /* results for spgAddNode */\n        {\n            Datum       nodeLabel;  /* new node's label */\n            int         nodeN;      /* where to insert it (index from 0) */\n        }           addNode;\n        struct                  /* results for spgSplitTuple */\n        {\n            /* Info to form new upper-level inner tuple with one child tuple */\n            bool        prefixHasPrefix;    /* tuple should have a prefix? */\n            Datum       prefixPrefixDatum;  /* if so, its value */\n            int         prefixNNodes;       /* number of nodes */\n            Datum      *prefixNodeLabels;   /* their labels (or NULL for\n                                             * no labels) */\n            int         childNodeN;         /* which node gets child tuple */\n\n            /* Info to form new lower-level inner tuple with all old nodes */\n            bool        postfixHasPrefix;   /* tuple should have a prefix? */\n            Datum       postfixPrefixDatum; /* if so, its value */\n        }           splitTuple;\n    }           result;\n} spgChooseOut;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\ntypedef struct spgPickSplitIn\n{\n    int         nTuples;        /* number of leaf tuples */\n    Datum      *datums;         /* their datums (array of length nTuples) */\n    int         level;          /* current level (counting from zero) */\n} spgPickSplitIn;\n\ntypedef struct spgPickSplitOut\n{\n    bool        hasPrefix;      /* new inner tuple should have a prefix? */\n    Datum       prefixDatum;    /* if so, its value */\n\n    int         nNodes;         /* number of nodes for new inner tuple */\n    Datum      *nodeLabels;     /* their labels (or NULL for no labels) */\n\n    int        *mapTuplesToNodes;   /* node index for each leaf tuple */\n    Datum      *leafTupleDatums;    /* datum to store in each new leaf tuple */\n} spgPickSplitOut;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\ntypedef struct spgInnerConsistentIn\n{\n    ScanKey     scankeys;       /* array of operators and comparison values */\n    ScanKey     orderbys;       /* array of ordering operators and comparison\n                                 * values */\n    int         nkeys;          /* length of scankeys array */\n    int         norderbys;      /* length of orderbys array */\n\n    Datum       reconstructedValue;     /* value reconstructed at parent */\n    void       *traversalValue; /* opclass-specific traverse value */\n    MemoryContext traversalMemoryContext;   /* put new traverse values here */\n    int         level;          /* current level (counting from zero) */\n    bool        returnData;     /* original data must be returned? */\n\n    /* Data from current inner tuple */\n    bool        allTheSame;     /* tuple is marked all-the-same? */\n    bool        hasPrefix;      /* tuple has a prefix? */\n    Datum       prefixDatum;    /* if so, the prefix value */\n    int         nNodes;         /* number of nodes in the inner tuple */\n    Datum      *nodeLabels;     /* node label values (NULL if none) */\n} spgInnerConsistentIn;\n\ntypedef struct spgInnerConsistentOut\n{\n    int         nNodes;         /* number of child nodes to be visited */\n    int        *nodeNumbers;    /* their indexes in the node array */\n    int        *levelAdds;      /* increment level by this much for each */\n    Datum      *reconstructedValues;    /* associated reconstructed values */\n    void      **traversalValues;        /* opclass-specific traverse values */\n    double    **distances;              /* associated distances */\n} spgInnerConsistentOut;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\ntypedef struct spgLeafConsistentIn\n{\n    ScanKey     scankeys;       /* array of operators and comparison values */\n    ScanKey     orderbys;       /* array of ordering operators and comparison\n                                 * values */\n    int         nkeys;          /* length of scankeys array */\n    int         norderbys;      /* length of orderbys array */\n\n    Datum       reconstructedValue;     /* value reconstructed at parent */\n    void       *traversalValue; /* opclass-specific traverse value */\n    int         level;          /* current level (counting from zero) */\n    bool        returnData;     /* original data must be returned? */\n\n    Datum       leafDatum;      /* datum in leaf tuple */\n} spgLeafConsistentIn;\n\ntypedef struct spgLeafConsistentOut\n{\n    Datum       leafValue;        /* reconstructed original data, if any */\n    bool        recheck;          /* set true if operator must be rechecked */\n    bool        recheckDistances; /* set true if distances must be rechecked */\n    double     *distances;        /* associated distances */\n} spgLeafConsistentOut;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION my_options(internal)\nRETURNS void\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/spgist-extensibility.html"},
{"sql": "\ntypedef struct BrinOpcInfo\n{\n    /* Number of columns stored in an index column of this opclass */\n    uint16      oi_nstored;\n\n    /* Opaque pointer for the opclass' private use */\n    void       *oi_opaque;\n\n    /* Type cache entries of the stored columns */\n    TypeCacheEntry *oi_typcache[FLEXIBLE_ARRAY_MEMBER];\n} BrinOpcInfo;\n", "source": "https://www.postgresql.org/docs/current/brin-extensibility.html"},
{"sql": "\n[\n\n# A comment could appear here.\n{ oid => '1', oid_symbol => 'TemplateDbOid',\n  descr => 'database\\'s default template',\n  datname => 'template1', encoding => 'ENCODING', datcollate => 'LC_COLLATE',\n  datctype => 'LC_CTYPE', datistemplate => 't', datallowconn => 't',\n  datconnlimit => '-1', datlastsysoid => '0', datfrozenxid => '0',\n  datminmxid => '1', dattablespace => 'pg_default', datacl => '_null_' },\n\n]\n", "source": "https://www.postgresql.org/docs/current/system-catalog-initial-data.html"},
{"sql": "\n+    /* see PROKIND_ categories below */\n+    char        prokind BKI_DEFAULT(f);\n", "source": "https://www.postgresql.org/docs/current/system-catalog-initial-data.html"},
{"sql": "\n-           # At this point we have the full row in memory as a hash\n-           # and can do any operations we want. As written, it only\n-           # removes default values, but this script can be adapted to\n-           # do one-off bulk-editing.\n+           # One-off change to migrate to prokind\n+           # Default has already been filled in by now, so change to other\n+           # values as appropriate\n+           if ($values{proisagg} eq 't')\n+           {\n+               $values{prokind} = 'a';\n+           }\n+           elsif ($values{proiswindow} eq 't')\n+           {\n+               $values{prokind} = 'w';\n+           }\n", "source": "https://www.postgresql.org/docs/current/system-catalog-initial-data.html"},
{"sql": "\n$ cd src/include/catalog\n$ perl  rewrite_dat_with_prokind.pl  pg_proc.dat\n", "source": "https://www.postgresql.org/docs/current/system-catalog-initial-data.html"},
{"sql": "\n-    /* is it an aggregate? */\n-    bool        proisagg BKI_DEFAULT(f);\n-\n-    /* is it a window function? */\n-    bool        proiswindow BKI_DEFAULT(f);\n", "source": "https://www.postgresql.org/docs/current/system-catalog-initial-data.html"},
{"sql": "\nCREATE FUNCTION plperl_call_handler() RETURNS language_handler AS\n    '$libdir/plperl' LANGUAGE C;\n", "source": "https://www.postgresql.org/docs/current/xplang-install.html"},
{"sql": "\nCREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS\n    '$libdir/plperl' LANGUAGE C STRICT;\n\nCREATE FUNCTION plperl_validator(oid) RETURNS void AS\n    '$libdir/plperl' LANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/xplang-install.html"},
{"sql": "\nCREATE TRUSTED LANGUAGE plperl\n    HANDLER plperl_call_handler\n    INLINE plperl_inline_handler\n    VALIDATOR plperl_validator;\n", "source": "https://www.postgresql.org/docs/current/xplang-install.html"},
{"sql": "\nCREATE TABLE computer (\n    hostname        text,    -- indexed\n    manufacturer    text     -- indexed\n);\n\nCREATE TABLE software (\n    software        text,    -- indexed\n    hostname        text     -- indexed\n);\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM software WHERE hostname = $1;\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nCREATE RULE computer_del AS ON DELETE TO computer\n    DO DELETE FROM software WHERE hostname = OLD.hostname;\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM computer WHERE hostname = 'mypc.local.net';\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM software WHERE computer.hostname = 'mypc.local.net'\n                       AND software.hostname = computer.hostname;\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM computer WHERE hostname >= 'old'\n                       AND hostname <  'ole'\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM software WHERE computer.hostname >= 'old' AND computer.hostname < 'ole'\n                       AND software.hostname = computer.hostname;\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM computer WHERE hostname ~ '^old';\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM computer WHERE manufacturer = 'bim';\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nDELETE FROM software WHERE computer.manufacturer = 'bim'\n                       AND software.hostname = computer.hostname;\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nNestloop\n  ->  Index Scan using comp_manufidx on computer\n  ->  Index Scan using soft_hostidx on software\n", "source": "https://www.postgresql.org/docs/current/rules-triggers.html"},
{"sql": "\nCREATE TABLE ttest (\n    x integer\n);\n", "source": "https://www.postgresql.org/docs/current/trigger-example.html"},
{"sql": "\nCREATE FUNCTION trigf() RETURNS trigger\n    AS '", "source": "https://www.postgresql.org/docs/current/trigger-example.html"},
{"sql": "'\n    LANGUAGE C;\n\nCREATE TRIGGER tbefore BEFORE INSERT OR UPDATE OR DELETE ON ttest\n    FOR EACH ROW EXECUTE FUNCTION trigf();\n\nCREATE TRIGGER tafter AFTER INSERT OR UPDATE OR DELETE ON ttest\n    FOR EACH ROW EXECUTE FUNCTION trigf();\n", "source": "https://www.postgresql.org/docs/current/trigger-example.html"},
{"sql": "\nCALLED_AS_TRIGGER(fcinfo)\n", "source": "https://www.postgresql.org/docs/current/trigger-interface.html"},
{"sql": "\n((fcinfo)->context != NULL && IsA((fcinfo)->context, TriggerData))\n", "source": "https://www.postgresql.org/docs/current/trigger-interface.html"},
{"sql": "\ntypedef struct TriggerData\n{\n    NodeTag          type;\n    TriggerEvent     tg_event;\n    Relation         tg_relation;\n    HeapTuple        tg_trigtuple;\n    HeapTuple        tg_newtuple;\n    Trigger         *tg_trigger;\n    TupleTableSlot  *tg_trigslot;\n    TupleTableSlot  *tg_newslot;\n    Tuplestorestate *tg_oldtable;\n    Tuplestorestate *tg_newtable;\n    const Bitmapset *tg_updatedcols;\n} TriggerData;\n", "source": "https://www.postgresql.org/docs/current/trigger-interface.html"},
{"sql": "\ntypedef struct Trigger\n{\n    Oid         tgoid;\n    char       *tgname;\n    Oid         tgfoid;\n    int16       tgtype;\n    char        tgenabled;\n    bool        tgisinternal;\n    Oid         tgconstrrelid;\n    Oid         tgconstrindid;\n    Oid         tgconstraint;\n    bool        tgdeferrable;\n    bool        tginitdeferred;\n    int16       tgnargs;\n    int16       tgnattr;\n    int16      *tgattr;\n    char      **tgargs;\n    char       *tgqual;\n    char       *tgoldtable;\n    char       *tgnewtable;\n} Trigger;\n", "source": "https://www.postgresql.org/docs/current/trigger-interface.html"},
{"sql": "\nCREATE TABLE image (\n    name            text,\n    raster          oid\n);\n\nSELECT lo_creat(-1);       -- returns OID of new, empty large object\n\nSELECT lo_create(43213);   -- attempts to create large object with OID 43213\n\nSELECT lo_unlink(173454);  -- deletes large object with OID 173454\n\nINSERT INTO image (name, raster)\n    VALUES ('beautiful image', lo_import('/etc/motd'));\n\nINSERT INTO image (name, raster)  -- same as above, but specify OID to use\n    VALUES ('beautiful image', lo_import('/etc/motd', 68583));\n\nSELECT lo_export(image.raster, '/tmp/motd') FROM image\n    WHERE name = 'beautiful image';\n", "source": "https://www.postgresql.org/docs/current/lo-funcs.html"},
{"sql": "\ninv_oid = lo_creat(conn, INV_READ|INV_WRITE);\n", "source": "https://www.postgresql.org/docs/current/lo-interfaces.html"},
{"sql": "\ninv_oid = lo_create(conn, desired_oid);\n", "source": "https://www.postgresql.org/docs/current/lo-interfaces.html"},
{"sql": "\ninv_fd = lo_open(conn, inv_oid, INV_READ|INV_WRITE);\n", "source": "https://www.postgresql.org/docs/current/lo-interfaces.html"},
{"sql": "\nstruct JitProviderCallbacks\n{\n    JitProviderResetAfterErrorCB reset_after_error;\n    JitProviderReleaseContextCB release_context;\n    JitProviderCompileExprCB compile_expr;\n};\n\nextern void _PG_jit_provider_init(JitProviderCallbacks *cb);\n", "source": "https://www.postgresql.org/docs/current/jit-extensibility.html"},
{"sql": "\n\n/*\n * src/test/examples/testlibpq2.c\n *\n *\n * testlibpq2.c\n *      Test of the asynchronous notification interface\n *\n * Start this program, then from psql in another window do\n *   NOTIFY TBL2;\n * Repeat four times to get this program to exit.\n *\n * Or, if you want to get fancy, try this:\n * populate a database with the following commands\n * (provided in src/test/examples/testlibpq2.sql):\n *\n *   CREATE SCHEMA TESTLIBPQ2;\n *   SET search_path = TESTLIBPQ2;\n *   CREATE TABLE TBL1 (i int4);\n *   CREATE TABLE TBL2 (i int4);\n *   CREATE RULE r1 AS ON INSERT TO TBL1 DO\n *     (INSERT INTO TBL2 VALUES (new.i); NOTIFY TBL2);\n *\n * Start this program, then from psql do this four times:\n *\n *   INSERT INTO TESTLIBPQ2.TBL1 VALUES (10);\n */\n\n#ifdef WIN32\n#include <windows.h>\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>\n#endif\n\n#include \"libpq-fe.h\"\n\nstatic void\nexit_nicely(PGconn *conn)\n{\n    PQfinish(conn);\n    exit(1);\n}\n\nint\nmain(int argc, char **argv)\n{\n    const char *conninfo;\n    PGconn     *conn;\n    PGresult   *res;\n    PGnotify   *notify;\n    int         nnotifies;\n\n    /*\n     * If the user supplies a parameter on the command line, use it as the\n     * conninfo string; otherwise default to setting dbname=postgres and using\n     * environment variables or defaults for all other connection parameters.\n     */\n    if (argc > 1)\n        conninfo = argv[1];\n    else\n        conninfo = \"dbname = postgres\";\n\n    /* Make a connection to the database */\n    conn = PQconnectdb(conninfo);\n\n    /* Check to see that the backend connection was successfully made */\n    if (PQstatus(conn) != CONNECTION_OK)\n    {\n        fprintf(stderr, \"%s\", PQerrorMessage(conn));\n        exit_nicely(conn);\n    }\n\n    /* Set always-secure search path, so malicious users can't take control. */\n    res = PQexec(conn,\n                 \"SELECT pg_catalog.set_config('search_path', '', false)\");\n    if (PQresultStatus(res) != PGRES_TUPLES_OK)\n    {\n        fprintf(stderr, \"SET failed: %s\", PQerrorMessage(conn));\n        PQclear(res);\n        exit_nicely(conn);\n    }\n\n    /*\n     * Should PQclear PGresult whenever it is no longer needed to avoid memory\n     * leaks\n     */\n    PQclear(res);\n\n    /*\n     * Issue LISTEN command to enable notifications from the rule's NOTIFY.\n     */\n    res = PQexec(conn, \"LISTEN TBL2\");\n    if (PQresultStatus(res) != PGRES_COMMAND_OK)\n    {\n        fprintf(stderr, \"LISTEN command failed: %s\", PQerrorMessage(conn));\n        PQclear(res);\n        exit_nicely(conn);\n    }\n    PQclear(res);\n\n    /* Quit after four notifies are received. */\n    nnotifies = 0;\n    while (nnotifies < 4)\n    {\n        /*\n         * Sleep until something happens on the connection.  We use select(2)\n         * to wait for input, but you could also use poll() or similar\n         * facilities.\n         */\n        int         sock;\n        fd_set      input_mask;\n\n        sock = PQsocket(conn);\n\n        if (sock < 0)\n            break;              /* shouldn't happen */\n\n        FD_ZERO(&input_mask);\n        FD_SET(sock, &input_mask);\n\n        if (select(sock + 1, &input_mask, NULL, NULL, NULL) < 0)\n        {\n            fprintf(stderr, \"select() failed: %s\\n\", strerror(errno));\n            exit_nicely(conn);\n        }\n\n        /* Now check for input */\n        PQconsumeInput(conn);\n        while ((notify = PQnotifies(conn)) != NULL)\n        {\n            fprintf(stderr,\n                    \"ASYNC NOTIFY of '%s' received from backend PID %d\\n\",\n                    notify->relname, notify->be_pid);\n            PQfreemem(notify);\n            nnotifies++;\n            PQconsumeInput(conn);\n        }\n    }\n\n    fprintf(stderr, \"Done.\\n\");\n\n    /* close the connection to the database and cleanup */\n    PQfinish(conn);\n\n    return 0;\n}\n\n", "source": "https://www.postgresql.org/docs/current/libpq-example.html"},
{"sql": "\n\n/*\n * src/test/examples/testlibpq3.c\n *\n *\n * testlibpq3.c\n *      Test out-of-line parameters and binary I/O.\n *\n * Before running this, populate a database with the following commands\n * (provided in src/test/examples/testlibpq3.sql):\n *\n * CREATE SCHEMA testlibpq3;\n * SET search_path = testlibpq3;\n * SET standard_conforming_strings = ON;\n * CREATE TABLE test1 (i int4, t text, b bytea);\n * INSERT INTO test1 values (1, 'joe''s place', '\\000\\001\\002\\003\\004');\n * INSERT INTO test1 values (2, 'ho there', '\\004\\003\\002\\001\\000');\n *\n * The expected output is:\n *\n * tuple 0: got\n *  i = (4 bytes) 1\n *  t = (11 bytes) 'joe's place'\n *  b = (5 bytes) \\000\\001\\002\\003\\004\n *\n * tuple 0: got\n *  i = (4 bytes) 2\n *  t = (8 bytes) 'ho there'\n *  b = (5 bytes) \\004\\003\\002\\001\\000\n */\n\n#ifdef WIN32\n#include <windows.h>\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include <sys/types.h>\n#include \"libpq-fe.h\"\n\n/* for ntohl/htonl */\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n\nstatic void\nexit_nicely(PGconn *conn)\n{\n    PQfinish(conn);\n    exit(1);\n}\n\n/*\n * This function prints a query result that is a binary-format fetch from\n * a table defined as in the comment above.  We split it out because the\n * main() function uses it twice.\n */\nstatic void\nshow_binary_results(PGresult *res)\n{\n    int         i,\n                j;\n    int         i_fnum,\n                t_fnum,\n                b_fnum;\n\n    /* Use PQfnumber to avoid assumptions about field order in result */\n    i_fnum = PQfnumber(res, \"i\");\n    t_fnum = PQfnumber(res, \"t\");\n    b_fnum = PQfnumber(res, \"b\");\n\n    for (i = 0; i < PQntuples(res); i++)\n    {\n        char       *iptr;\n        char       *tptr;\n        char       *bptr;\n        int         blen;\n        int         ival;\n\n        /* Get the field values (we ignore possibility they are null!) */\n        iptr = PQgetvalue(res, i, i_fnum);\n        tptr = PQgetvalue(res, i, t_fnum);\n        bptr = PQgetvalue(res, i, b_fnum);\n\n        /*\n         * The binary representation of INT4 is in network byte order, which\n         * we'd better coerce to the local byte order.\n         */\n        ival = ntohl(*((uint32_t *) iptr));\n\n        /*\n         * The binary representation of TEXT is, well, text, and since libpq\n         * was nice enough to append a zero byte to it, it'll work just fine\n         * as a C string.\n         *\n         * The binary representation of BYTEA is a bunch of bytes, which could\n         * include embedded nulls so we have to pay attention to field length.\n         */\n        blen = PQgetlength(res, i, b_fnum);\n\n        printf(\"tuple %d: got\\n\", i);\n        printf(\" i = (%d bytes) %d\\n\",\n               PQgetlength(res, i, i_fnum), ival);\n        printf(\" t = (%d bytes) '%s'\\n\",\n               PQgetlength(res, i, t_fnum), tptr);\n        printf(\" b = (%d bytes) \", blen);\n        for (j = 0; j < blen; j++)\n            printf(\"\\\\%03o\", bptr[j]);\n        printf(\"\\n\\n\");\n    }\n}\n\nint\nmain(int argc, char **argv)\n{\n    const char *conninfo;\n    PGconn     *conn;\n    PGresult   *res;\n    const char *paramValues[1];\n    int         paramLengths[1];\n    int         paramFormats[1];\n    uint32_t    binaryIntVal;\n\n    /*\n     * If the user supplies a parameter on the command line, use it as the\n     * conninfo string; otherwise default to setting dbname=postgres and using\n     * environment variables or defaults for all other connection parameters.\n     */\n    if (argc > 1)\n        conninfo = argv[1];\n    else\n        conninfo = \"dbname = postgres\";\n\n    /* Make a connection to the database */\n    conn = PQconnectdb(conninfo);\n\n    /* Check to see that the backend connection was successfully made */\n    if (PQstatus(conn) != CONNECTION_OK)\n    {\n        fprintf(stderr, \"%s\", PQerrorMessage(conn));\n        exit_nicely(conn);\n    }\n\n    /* Set always-secure search path, so malicious users can't take control. */\n    res = PQexec(conn, \"SET search_path = testlibpq3\");\n    if (PQresultStatus(res) != PGRES_COMMAND_OK)\n    {\n        fprintf(stderr, \"SET failed: %s\", PQerrorMessage(conn));\n        PQclear(res);\n        exit_nicely(conn);\n    }\n    PQclear(res);\n\n    /*\n     * The point of this program is to illustrate use of PQexecParams() with\n     * out-of-line parameters, as well as binary transmission of data.\n     *\n     * This first example transmits the parameters as text, but receives the\n     * results in binary format.  By using out-of-line parameters we can avoid\n     * a lot of tedious mucking about with quoting and escaping, even though\n     * the data is text.  Notice how we don't have to do anything special with\n     * the quote mark in the parameter value.\n     */\n\n    /* Here is our out-of-line parameter value */\n    paramValues[0] = \"joe's place\";\n\n    res = PQexecParams(conn,\n                       \"SELECT * FROM test1 WHERE t = $1\",\n                       1,       /* one param */\n                       NULL,    /* let the backend deduce param type */\n                       paramValues,\n                       NULL,    /* don't need param lengths since text */\n                       NULL,    /* default to all text params */\n                       1);      /* ask for binary results */\n\n    if (PQresultStatus(res) != PGRES_TUPLES_OK)\n    {\n        fprintf(stderr, \"SELECT failed: %s\", PQerrorMessage(conn));\n        PQclear(res);\n        exit_nicely(conn);\n    }\n\n    show_binary_results(res);\n\n    PQclear(res);\n\n    /*\n     * In this second example we transmit an integer parameter in binary form,\n     * and again retrieve the results in binary form.\n     *\n     * Although we tell PQexecParams we are letting the backend deduce\n     * parameter type, we really force the decision by casting the parameter\n     * symbol in the query text.  This is a good safety measure when sending\n     * binary parameters.\n     */\n\n    /* Convert integer value \"2\" to network byte order */\n    binaryIntVal = htonl((uint32_t) 2);\n\n    /* Set up parameter arrays for PQexecParams */\n    paramValues[0] = (char *) &binaryIntVal;\n    paramLengths[0] = sizeof(binaryIntVal);\n    paramFormats[0] = 1;        /* binary */\n\n    res = PQexecParams(conn,\n                       \"SELECT * FROM test1 WHERE i = $1::int4\",\n                       1,       /* one param */\n                       NULL,    /* let the backend deduce param type */\n                       paramValues,\n                       paramLengths,\n                       paramFormats,\n                       1);      /* ask for binary results */\n\n    if (PQresultStatus(res) != PGRES_TUPLES_OK)\n    {\n        fprintf(stderr, \"SELECT failed: %s\", PQerrorMessage(conn));\n        PQclear(res);\n        exit_nicely(conn);\n    }\n\n    show_binary_results(res);\n\n    PQclear(res);\n\n    /* close the connection to the database and cleanup */\n    PQfinish(conn);\n\n    return 0;\n}\n\n", "source": "https://www.postgresql.org/docs/current/libpq-example.html"},
{"sql": "\n#include <libpq-fe.h>\n", "source": "https://www.postgresql.org/docs/current/libpq-build.html"},
{"sql": "\ncc -c -I/usr/local/pgsql/include testprog.c\n", "source": "https://www.postgresql.org/docs/current/libpq-build.html"},
{"sql": "\nCPPFLAGS += -I/usr/local/pgsql/include\n", "source": "https://www.postgresql.org/docs/current/libpq-build.html"},
{"sql": "\ncc -o testprog testprog1.o testprog2.o -L/usr/local/pgsql/lib -lpq\n", "source": "https://www.postgresql.org/docs/current/libpq-build.html"},
{"sql": "\npg_ctl start | rotatelogs /var/log/pgsql_log 86400\n", "source": "https://www.postgresql.org/docs/current/logfile-maintenance.html"},
{"sql": "\nSELECT c.oid::regclass as table_name,\n       greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age\nFROM pg_class c\nLEFT JOIN pg_class t ON c.reltoastrelid = t.oid\nWHERE c.relkind IN ('r', 'm');\n\nSELECT datname, age(datfrozenxid) FROM pg_database;\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nWARNING:  database \"mydb\" must be vacuumed within 39985967 transactions\nHINT:  To avoid a database shutdown, execute a database-wide VACUUM in that database.\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nERROR:  database is not accepting commands to avoid wraparound data loss in database \"mydb\"\nHINT:  Stop the postmaster and vacuum that database in single-user mode.\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nvacuum threshold = vacuum base threshold + vacuum scale factor * number of tuples\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nvacuum insert threshold = vacuum base insert threshold + vacuum insert scale factor * number of tuples\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nanalyze threshold = analyze base threshold + analyze scale factor * number of tuples\n", "source": "https://www.postgresql.org/docs/current/routine-vacuuming.html"},
{"sql": "\nCREATE TABLESPACE fastspace LOCATION '/ssd1/postgresql/data';\n", "source": "https://www.postgresql.org/docs/current/manage-ag-tablespaces.html"},
{"sql": "\nCREATE TABLE foo(i int) TABLESPACE space1;\n", "source": "https://www.postgresql.org/docs/current/manage-ag-tablespaces.html"},
{"sql": "\nSET default_tablespace = space1;\nCREATE TABLE foo(i int);\n", "source": "https://www.postgresql.org/docs/current/manage-ag-tablespaces.html"},
{"sql": "\nALTER DATABASE mydb SET geqo TO off;\n", "source": "https://www.postgresql.org/docs/current/manage-ag-config.html"},
{"sql": "\nCREATE DATABASE ", "source": "https://www.postgresql.org/docs/current/manage-ag-templatedbs.html"},
{"sql": " TEMPLATE template0;\n", "source": "https://www.postgresql.org/docs/current/manage-ag-templatedbs.html"},
{"sql": "\ncreatedb -T template0 ", "source": "https://www.postgresql.org/docs/current/manage-ag-templatedbs.html"},
{"sql": "\nopenssl req -new -x509 -days 365 -nodes -text -out server.crt \\\n  -keyout server.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\nchmod og-rwx server.key\n", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\nopenssl req -new -nodes -text -out root.csr \\\n  -keyout root.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\"\nchmod og-rwx root.key\n", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\nopenssl x509 -req -in root.csr -text -days 3650 \\\n  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \\\n  -signkey root.key -out root.crt\n", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\nopenssl req -new -nodes -text -out server.csr \\\n  -keyout server.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\"\nchmod og-rwx server.key\n\nopenssl x509 -req -in server.csr -text -days 365 \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out server.crt\n", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\n# root\nopenssl req -new -nodes -text -out root.csr \\\n  -keyout root.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\"\nchmod og-rwx root.key\nopenssl x509 -req -in root.csr -text -days 3650 \\\n  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \\\n  -signkey root.key -out root.crt\n\n# intermediate\nopenssl req -new -nodes -text -out intermediate.csr \\\n  -keyout intermediate.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\"\nchmod og-rwx intermediate.key\nopenssl x509 -req -in intermediate.csr -text -days 1825 \\\n  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \\\n  -CA root.crt -CAkey root.key -CAcreateserial \\\n  -out intermediate.crt\n\n# leaf\nopenssl req -new -nodes -text -out server.csr \\\n  -keyout server.key -subj \"/CN=", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\"\nchmod og-rwx server.key\nopenssl x509 -req -in server.csr -text -days 365 \\\n  -CA intermediate.crt -CAkey intermediate.key -CAcreateserial \\\n  -out server.crt\n", "source": "https://www.postgresql.org/docs/current/ssl-tcp.html"},
{"sql": "\n$config->{python} = 'c:\\python26';\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\n$ENV{PATH}=$ENV{PATH} . ';c:\\some\\where\\bison\\bin';\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\n$ENV{MSBFLAGS}=\"/m\";\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\n$ENV{CONFIG}=\"Debug\";\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\n$ENV{PERL5LIB}=$ENV{PERL5LIB} . ';c:\\IPC-Run-0.94\\lib';\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\nset PROVE_FLAGS=--timer --jobs 2\nset PROVE_TESTS=t/020*.pl t/010*.pl\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\n$ENV{PROVE_FLAGS}='--timer --jobs 2'\n$ENV{PROVE_TESTS}='t/020*.pl t/010*.pl'\n", "source": "https://www.postgresql.org/docs/current/install-windows-full.html"},
{"sql": "\nssh -L 63333:localhost:5432 joe@foo.com\n", "source": "https://www.postgresql.org/docs/current/ssh-tunnels.html"},
{"sql": "\npsql -h localhost -p 63333 postgres\n", "source": "https://www.postgresql.org/docs/current/ssh-tunnels.html"},
{"sql": "\nssh -L 63333:foo.com:5432 joe@foo.com\n", "source": "https://www.postgresql.org/docs/current/ssh-tunnels.html"},
{"sql": "\nssh -L 63333:db.foo.com:5432 joe@shell.foo.com\n", "source": "https://www.postgresql.org/docs/current/ssh-tunnels.html"},
{"sql": "\npg_dumpall -p 5432 | psql -d postgres -p 5433\n", "source": "https://www.postgresql.org/docs/current/upgrading.html"},
{"sql": "\nkern.sysv.shmmax=4194304\nkern.sysv.shmmin=1\nkern.sysv.shmmni=32\nkern.sysv.shmseg=8\nkern.sysv.shmall=1024\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nprojadd -c \"PostgreSQL DB User\" -K \"project.max-shm-memory=(privileged,8GB,deny)\" -U postgres -G postgres user.postgres\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nproject.max-shm-ids=(priv,32768,deny)\nproject.max-sem-ids=(priv,4096,deny)\nproject.max-msg-ids=(priv,4096,deny)\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nRemoveIPC=no\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nOut of Memory: Killed process 12345 (postgres).\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nsysctl -w vm.overcommit_memory=2\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\necho -1000 > /proc/self/oom_score_adj\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nexport PG_OOM_ADJUST_FILE=/proc/self/oom_score_adj\nexport PG_OOM_ADJUST_VALUE=0\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\n6490428K\n$ ", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nHugepagesize:       2048 kB\n$ ", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\nhugepages-1048576kB  hugepages-2048kB\n", "source": "https://www.postgresql.org/docs/current/kernel-resources.html"},
{"sql": "\npg_ctl start -l logfile\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\nsu postgres -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog'\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\nif [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then\n    su -l postgres -c '/usr/local/pgsql/bin/pg_ctl start -s -l /var/postgresql/log -D /usr/local/pgsql/data'\n    echo -n ' postgresql'\nfi\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\n/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\n[Unit]\nDescription=PostgreSQL database server\nDocumentation=man:postgres(1)\n\n[Service]\nType=notify\nUser=postgres\nExecStart=/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=mixed\nKillSignal=SIGINT\nTimeoutSec=0\n\n[Install]\nWantedBy=multi-user.target\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\nsu - postgres -c \"/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data\"\n", "source": "https://www.postgresql.org/docs/current/server-start.html"},
{"sql": "\nFATAL:  no pg_hba.conf entry for host \"123.123.123.123\", user \"andym\", database \"testdb\"\n", "source": "https://www.postgresql.org/docs/current/client-authentication-problems.html"},
{"sql": "\nFATAL:  password authentication failed for user \"andym\"\n", "source": "https://www.postgresql.org/docs/current/client-authentication-problems.html"},
{"sql": "\nFATAL:  user \"andym\" does not exist\n", "source": "https://www.postgresql.org/docs/current/client-authentication-problems.html"},
{"sql": "\nFATAL:  database \"testdb\" does not exist\n", "source": "https://www.postgresql.org/docs/current/client-authentication-problems.html"},
{"sql": "\nmymap   /^(.*)@mydomain\\.com$      \\1\nmymap   /^(.*)@otherdomain\\.com$   guest\n", "source": "https://www.postgresql.org/docs/current/auth-username-maps.html"},
{"sql": "\n# MAPNAME       SYSTEM-USERNAME         PG-USERNAME\n\nomicron         bryanh                  bryanh\nomicron         ann                     ann\n# bob has user name robert on these machines\nomicron         robert                  bob\n# bryanh can also connect as guest1\nomicron         bryanh                  guest1\n", "source": "https://www.postgresql.org/docs/current/auth-username-maps.html"},
{"sql": "\nopenssl x509 -in myclient.crt -noout --subject -nameopt RFC2253 | sed \"s/^subject=//\"\n", "source": "https://www.postgresql.org/docs/current/auth-pg-hba-conf.html"},
{"sql": "\n# Allow any user on the local system to connect to any database with\n# any database user name using Unix-domain sockets (the default for local\n# connections).\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             all                                     trust\n\n# The same using local loopback TCP/IP connections.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             all             127.0.0.1/32            trust\n\n# The same as the previous line, but using a separate netmask column\n#\n# TYPE  DATABASE        USER            IP-ADDRESS      IP-MASK             METHOD\nhost    all             all             127.0.0.1       255.255.255.255     trust\n\n# The same over IPv6.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             all             ::1/128                 trust\n\n# The same using a host name (would typically cover both IPv4 and IPv6).\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             all             localhost               trust\n\n# Allow any user from any host with IP address 192.168.93.x to connect\n# to database \"postgres\" as the same user name that ident reports for\n# the connection (typically the operating system user name).\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    postgres        all             192.168.93.0/24         ident\n\n# Allow any user from host 192.168.12.10 to connect to database\n# \"postgres\" if the user's password is correctly supplied.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    postgres        all             192.168.12.10/32        scram-sha-256\n\n# Allow any user from hosts in the example.com domain to connect to\n# any database if the user's password is correctly supplied.\n#\n# Require SCRAM authentication for most users, but make an exception\n# for user 'mike', who uses an older client that doesn't support SCRAM\n# authentication.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             mike            .example.com            md5\nhost    all             all             .example.com            scram-sha-256\n\n# In the absence of preceding \"host\" lines, these three lines will\n# reject all connections from 192.168.54.1 (since that entry will be\n# matched first), but allow GSSAPI-encrypted connections from anywhere else\n# on the Internet.  The zero mask causes no bits of the host IP address to\n# be considered, so it matches any host.  Unencrypted GSSAPI connections\n# (which \"fall through\" to the third line since \"hostgssenc\" only matches\n# encrypted GSSAPI connections) are allowed, but only from 192.168.12.10.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             all             192.168.54.1/32         reject\nhostgssenc all          all             0.0.0.0/0               gss\nhost    all             all             192.168.12.10/32        gss\n\n# Allow users from 192.168.x.x hosts to connect to any database, if\n# they pass the ident check.  If, for example, ident says the user is\n# \"bryanh\" and he requests to connect as PostgreSQL user \"guest1\", the\n# connection is allowed if there is an entry in pg_ident.conf for map\n# \"omicron\" that says \"bryanh\" is allowed to connect as \"guest1\".\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    all             all             192.168.0.0/16          ident map=omicron\n\n# If these are the only three lines for local connections, they will\n# allow local users to connect only to their own databases (databases\n# with the same name as their database user name) except for administrators\n# and members of role \"support\", who can connect to all databases.  The file\n# $PGDATA/admins contains a list of names of administrators.  Passwords\n# are required in all cases.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   sameuser        all                                     md5\nlocal   all             @admins                                 md5\nlocal   all             +support                                md5\n\n# The last two lines above can be combined into a single line:\nlocal   all             @admins,+support                        md5\n\n# The database column can also use lists and file names:\nlocal   db1,db2,@demodbs  all                                   md5\n", "source": "https://www.postgresql.org/docs/current/auth-pg-hba-conf.html"},
{"sql": "\nGRANT pg_signal_backend TO admin_user;\n", "source": "https://www.postgresql.org/docs/current/predefined-roles.html"},
{"sql": "\nALTER TABLE bobs_table OWNER TO alice;\n", "source": "https://www.postgresql.org/docs/current/role-removal.html"},
{"sql": "\nREASSIGN OWNED BY doomed_role TO successor_role;\nDROP OWNED BY doomed_role;\n-- repeat the above commands in each database of the cluster\nDROP ROLE doomed_role;\n", "source": "https://www.postgresql.org/docs/current/role-removal.html"},
{"sql": "\nCREATE ROLE ", "source": "https://www.postgresql.org/docs/current/role-attributes.html"},
{"sql": " LOGIN;\nCREATE USER ", "source": "https://www.postgresql.org/docs/current/role-attributes.html"},
{"sql": "\nALTER ROLE myname SET enable_indexscan TO off;\n", "source": "https://www.postgresql.org/docs/current/role-attributes.html"},
{"sql": "\nCREATE ROLE joe LOGIN INHERIT;\nCREATE ROLE admin NOINHERIT;\nCREATE ROLE wheel NOINHERIT;\nGRANT admin TO joe;\nGRANT wheel TO admin;\n", "source": "https://www.postgresql.org/docs/current/role-membership.html"},
{"sql": "\nSET ROLE admin;\n", "source": "https://www.postgresql.org/docs/current/role-membership.html"},
{"sql": "\nSET ROLE wheel;\n", "source": "https://www.postgresql.org/docs/current/role-membership.html"},
{"sql": "\nSET ROLE joe;\nSET ROLE NONE;\nRESET ROLE;\n", "source": "https://www.postgresql.org/docs/current/role-membership.html"},
{"sql": "\ndynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'\n", "source": "https://www.postgresql.org/docs/current/runtime-config-client.html"},
{"sql": "\ndynamic_library_path = 'C:\\tools\\postgresql;H:\\my_project\\lib;$libdir'\n", "source": "https://www.postgresql.org/docs/current/runtime-config-client.html"},
{"sql": "\nstderr log/postgresql.log\ncsvlog log/postgresql.csv\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nlocal0.*    /var/log/postgresql\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nSELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||\n       to_hex(pid)\nFROM pg_stat_activity;\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nlog_line_prefix = '%m [%p] %q%u@%d/%a '\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nCREATE TABLE postgres_log\n(\n  log_time timestamp(3) with time zone,\n  user_name text,\n  database_name text,\n  process_id integer,\n  connection_from text,\n  session_id text,\n  session_line_num bigint,\n  command_tag text,\n  session_start_time timestamp with time zone,\n  virtual_transaction_id text,\n  transaction_id bigint,\n  error_severity text,\n  sql_state_code text,\n  message text,\n  detail text,\n  hint text,\n  internal_query text,\n  internal_query_pos integer,\n  context text,\n  query text,\n  query_pos integer,\n  location text,\n  application_name text,\n  backend_type text,\n  leader_pid integer,\n  query_id bigint,\n  PRIMARY KEY (session_id, session_line_num)\n);\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nCOPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;\n", "source": "https://www.postgresql.org/docs/current/runtime-config-logging.html"},
{"sql": "\nrestore_command = 'cp /mnt/server/archivedir/%f \"%p\"'\nrestore_command = 'copy \"C:\\\\server\\\\archivedir\\\\%f\" \"%p\"'  # Windows\n", "source": "https://www.postgresql.org/docs/current/runtime-config-wal.html"},
{"sql": "archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'", "source": "https://www.postgresql.org/docs/current/runtime-config-wal.html"},
{"sql": "\narchive_command = 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'  # Unix\narchive_command = 'copy \"%p\" \"C:\\\\server\\\\archivedir\\\\%f\"'  # Windows\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\ntest ! -f /mnt/server/archivedir/00000001000000A900000065 && cp pg_wal/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nSELECT pg_start_backup('label', false, false);\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nSELECT * FROM pg_stop_backup(false, true);\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nSELECT pg_start_backup('label');\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nSELECT pg_start_backup('label', true);\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nSELECT pg_stop_backup();\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nrestore_command = 'cp /mnt/server/archivedir/%f %p'\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\narchive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || (test ! -f /var/lib/pgsql/archive/%f && cp %p /var/lib/pgsql/archive/%f)'\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\ntouch /var/lib/pgsql/backup_in_progress\npsql -c \"select pg_start_backup('hot_backup');\"\ntar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/\npsql -c \"select pg_stop_backup();\"\nrm /var/lib/pgsql/backup_in_progress\ntar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\narchive_command = 'gzip < %p > /mnt/server/archivedir/%f.gz'\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\nrestore_command = 'gunzip < /mnt/server/archivedir/%f.gz > %p'\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\narchive_command = 'local_backup_script.sh \"%p\" \"%f\"'\n", "source": "https://www.postgresql.org/docs/current/continuous-archiving.html"},
{"sql": "\n# This is a comment\nlog_connections = yes\nlog_destination = 'syslog'\nsearch_path = '\"$user\", public'\nshared_buffers = 128MB\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\nSET configuration_parameter TO DEFAULT;\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\nUPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\npostgres -c log_connections=yes -c log_destination='syslog'\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\nenv PGOPTIONS=\"-c geqo=off -c statement_timeout=5min\" psql\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\ninclude 'filename'\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\ninclude_dir 'directory'\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\ninclude 'shared.conf'\ninclude 'memory.conf'\ninclude 'server.conf'\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\ninclude_dir 'conf.d'\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\n00shared.conf\n01memory.conf\n02server.conf\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\n00shared.conf\n01memory-8GB.conf\n02server-foo.conf\n", "source": "https://www.postgresql.org/docs/current/config-setting.html"},
{"sql": "\nCREATE DATABASE ", "source": "https://www.postgresql.org/docs/current/manage-ag-createdb.html"},
{"sql": "\ncreatedb -O ", "source": "https://www.postgresql.org/docs/current/manage-ag-createdb.html"},
{"sql": "\ntar -cf backup.tar /usr/local/pgsql/data\n", "source": "https://www.postgresql.org/docs/current/backup-file.html"},
{"sql": "\nSELECT a < 'foo' FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a < ('foo' COLLATE \"fr_FR\") FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a < b FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a < b COLLATE \"de_DE\" FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a COLLATE \"de_DE\" < b FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a || b FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT * FROM test1 ORDER BY a || 'foo';\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT * FROM test1 ORDER BY a || b;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT * FROM test1 ORDER BY a || b COLLATE \"fr_FR\";\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nSELECT a COLLATE \"C\" < b COLLATE \"POSIX\" FROM test1;\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nCREATE COLLATION german (provider = libc, locale = 'de_DE');\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nCREATE COLLATION german FROM \"de_DE\";\nCREATE COLLATION french FROM \"fr-x-icu\";\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nCREATE COLLATION ndcoll (provider = icu, locale = 'und', deterministic = false);\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nCREATE COLLATION case_insensitive (provider = icu, locale = 'und-u-ks-level2', deterministic = false);\nCREATE COLLATION ignore_accents (provider = icu, locale = 'und-u-ks-level1-kc-true', deterministic = false);\n", "source": "https://www.postgresql.org/docs/current/collation.html"},
{"sql": "\nCREATE DATABASE korean WITH ENCODING 'EUC_KR' LC_COLLATE='ko_KR.euckr' LC_CTYPE='ko_KR.euckr' TEMPLATE=template0;\n", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\n\\encoding SJIS\n", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\nSET CLIENT_ENCODING TO '", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\nSET NAMES '", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\nSHOW client_encoding;\n", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\nRESET client_encoding;\n", "source": "https://www.postgresql.org/docs/current/multibyte.html"},
{"sql": "\npsql --set ON_ERROR_STOP=on ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\npg_dump -h ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": " | psql -h ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": " | gzip > ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\ngunzip -c ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": ".gz | psql ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": ".gz | gunzip | psql ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": " | split -b 2G - ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": " | split -b 2G --filter='gzip > $FILE.gz'\n", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\npg_dump -Fc ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\npg_restore -d ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\npg_dump -j ", "source": "https://www.postgresql.org/docs/current/backup-dump.html"},
{"sql": "\nprimary_conninfo = 'host=192.168.1.50 port=5432 user=foo password=foopass options=''-c wal_sender_timeout=5000'''\nrestore_command = 'cp /path/to/archive/%f %p'\narchive_cleanup_command = 'pg_archivecleanup /path/to/archive %r'\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\n# Allow the user \"foo\" from host 192.168.1.100 to connect to the primary\n# as a replication standby if the user's password is correctly supplied.\n#\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nhost    replication     foo             192.168.1.100/32        md5\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\n# The standby connects to the primary that is running on host 192.168.1.50\n# and port 5432 as the user \"foo\" whose password is \"foopass\".\nprimary_conninfo = 'host=192.168.1.50 port=5432 user=foo password=foopass'\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\npostgres=# SELECT * FROM pg_create_physical_replication_slot('node_a_slot');\n  slot_name  | lsn\n-------------+-----\n node_a_slot |\n\npostgres=# SELECT slot_name, slot_type, active FROM pg_replication_slots;\n  slot_name  | slot_type | active \n-------------+-----------+--------\n node_a_slot | physical  | f\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\nprimary_conninfo = 'host=192.168.1.50 port=5432 user=foo password=foopass'\nprimary_slot_name = 'node_a_slot'\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\nsynchronous_standby_names = 'FIRST 2 (s1, s2, s3)'\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\nsynchronous_standby_names = 'ANY 2 (s1, s2, s3)'\n", "source": "https://www.postgresql.org/docs/current/warm-standby.html"},
{"sql": "\n#!/usr/sbin/dtrace -qs\n\npostgresql$1:::transaction-start\n{\n      @start[\"Start\"] = count();\n      self->ts  = timestamp;\n}\n\npostgresql$1:::transaction-abort\n{\n      @abort[\"Abort\"] = count();\n}\n\npostgresql$1:::transaction-commit\n/self->ts/\n{\n      @commit[\"Commit\"] = count();\n      @time[\"Total time (ns)\"] = sum(timestamp - self->ts);\n      self->ts=0;\n}\n", "source": "https://www.postgresql.org/docs/current/dynamic-trace.html"},
{"sql": "\nprobe transaction__start(LocalTransactionId);\n", "source": "https://www.postgresql.org/docs/current/dynamic-trace.html"},
{"sql": "\nTRACE_POSTGRESQL_TRANSACTION_START(vxid.localTransactionId);\n", "source": "https://www.postgresql.org/docs/current/dynamic-trace.html"},
{"sql": "\nSELECT pid, wait_event_type, wait_event FROM pg_stat_activity WHERE wait_event is NOT NULL;\n pid  | wait_event_type | wait_event \n------+-----------------+------------\n 2540 | Lock            | relation\n 6644 | LWLock          | ProcArray\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/monitoring-stats.html"},
{"sql": "\nSELECT pg_stat_get_backend_pid(s.backendid) AS pid,\n       pg_stat_get_backend_activity(s.backendid) AS query\n    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;\n", "source": "https://www.postgresql.org/docs/current/monitoring-stats.html"},
{"sql": "\nwal_level = logical\n", "source": "https://www.postgresql.org/docs/current/logical-replication-quick-setup.html"},
{"sql": "\nhost     all     repuser     0.0.0.0/0     md5\n", "source": "https://www.postgresql.org/docs/current/logical-replication-quick-setup.html"},
{"sql": "\nCREATE PUBLICATION mypub FOR TABLE users, departments;\n", "source": "https://www.postgresql.org/docs/current/logical-replication-quick-setup.html"},
{"sql": "\nCREATE SUBSCRIPTION mysub CONNECTION 'dbname=foo host=bar user=repuser' PUBLICATION mypub;\n", "source": "https://www.postgresql.org/docs/current/logical-replication-quick-setup.html"},
{"sql": "\nSELECT pg_relation_filepath(oid), relpages FROM pg_class WHERE relname = 'customer';\n\n pg_relation_filepath | relpages\n----------------------+----------\n base/16384/16806     |       60\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/disk-usage.html"},
{"sql": "\nSELECT relname, relpages\nFROM pg_class,\n     (SELECT reltoastrelid\n      FROM pg_class\n      WHERE relname = 'customer') AS ss\nWHERE oid = ss.reltoastrelid OR\n      oid = (SELECT indexrelid\n             FROM pg_index\n             WHERE indrelid = ss.reltoastrelid)\nORDER BY relname;\n\n       relname        | relpages\n----------------------+----------\n pg_toast_16806       |        0\n pg_toast_16806_index |        1\n", "source": "https://www.postgresql.org/docs/current/disk-usage.html"},
{"sql": "\nSELECT c2.relname, c2.relpages\nFROM pg_class c, pg_class c2, pg_index i\nWHERE c.relname = 'customer' AND\n      c.oid = i.indrelid AND\n      c2.oid = i.indexrelid\nORDER BY c2.relname;\n\n      relname      | relpages\n-------------------+----------\n customer_id_index |       26\n", "source": "https://www.postgresql.org/docs/current/disk-usage.html"},
{"sql": "\nSELECT relname, relpages\nFROM pg_class\nORDER BY relpages DESC;\n\n       relname        | relpages\n----------------------+----------\n bigtable             |     3290\n customer             |     3144\n", "source": "https://www.postgresql.org/docs/current/disk-usage.html"},
{"sql": "\n# comment\n[mydb]\nhost=somehost\nport=5433\nuser=admin\n", "source": "https://www.postgresql.org/docs/current/libpq-pgservice.html"},
{"sql": "\n\n/* required header for libpq events (note: includes libpq-fe.h) */\n#include <libpq-events.h>\n\n/* The instanceData */\ntypedef struct\n{\n    int n;\n    char *str;\n} mydata;\n\n/* PGEventProc */\nstatic int myEventProc(PGEventId evtId, void *evtInfo, void *passThrough);\n\nint\nmain(void)\n{\n    mydata *data;\n    PGresult *res;\n    PGconn *conn =\n        PQconnectdb(\"dbname=postgres options=-csearch_path=\");\n\n    if (PQstatus(conn) != CONNECTION_OK)\n    {\n        /* PQerrorMessage's result includes a trailing newline */\n        fprintf(stderr, \"%s\", PQerrorMessage(conn));\n        PQfinish(conn);\n        return 1;\n    }\n\n    /* called once on any connection that should receive events.\n     * Sends a PGEVT_REGISTER to myEventProc.\n     */\n    if (!PQregisterEventProc(conn, myEventProc, \"mydata_proc\", NULL))\n    {\n        fprintf(stderr, \"Cannot register PGEventProc\\n\");\n        PQfinish(conn);\n        return 1;\n    }\n\n    /* conn instanceData is available */\n    data = PQinstanceData(conn, myEventProc);\n\n    /* Sends a PGEVT_RESULTCREATE to myEventProc */\n    res = PQexec(conn, \"SELECT 1 + 1\");\n\n    /* result instanceData is available */\n    data = PQresultInstanceData(res, myEventProc);\n\n    /* If PG_COPYRES_EVENTS is used, sends a PGEVT_RESULTCOPY to myEventProc */\n    res_copy = PQcopyResult(res, PG_COPYRES_TUPLES | PG_COPYRES_EVENTS);\n\n    /* result instanceData is available if PG_COPYRES_EVENTS was\n     * used during the PQcopyResult call.\n     */\n    data = PQresultInstanceData(res_copy, myEventProc);\n\n    /* Both clears send a PGEVT_RESULTDESTROY to myEventProc */\n    PQclear(res);\n    PQclear(res_copy);\n\n    /* Sends a PGEVT_CONNDESTROY to myEventProc */\n    PQfinish(conn);\n\n    return 0;\n}\n\nstatic int\nmyEventProc(PGEventId evtId, void *evtInfo, void *passThrough)\n{\n    switch (evtId)\n    {\n        case PGEVT_REGISTER:\n        {\n            PGEventRegister *e = (PGEventRegister *)evtInfo;\n            mydata *data = get_mydata(e->conn);\n\n            /* associate app specific data with connection */\n            PQsetInstanceData(e->conn, myEventProc, data);\n            break;\n        }\n\n        case PGEVT_CONNRESET:\n        {\n            PGEventConnReset *e = (PGEventConnReset *)evtInfo;\n            mydata *data = PQinstanceData(e->conn, myEventProc);\n\n            if (data)\n              memset(data, 0, sizeof(mydata));\n            break;\n        }\n\n        case PGEVT_CONNDESTROY:\n        {\n            PGEventConnDestroy *e = (PGEventConnDestroy *)evtInfo;\n            mydata *data = PQinstanceData(e->conn, myEventProc);\n\n            /* free instance data because the conn is being destroyed */\n            if (data)\n              free_mydata(data);\n            break;\n        }\n\n        case PGEVT_RESULTCREATE:\n        {\n            PGEventResultCreate *e = (PGEventResultCreate *)evtInfo;\n            mydata *conn_data = PQinstanceData(e->conn, myEventProc);\n            mydata *res_data = dup_mydata(conn_data);\n\n            /* associate app specific data with result (copy it from conn) */\n            PQsetResultInstanceData(e->result, myEventProc, res_data);\n            break;\n        }\n\n        case PGEVT_RESULTCOPY:\n        {\n            PGEventResultCopy *e = (PGEventResultCopy *)evtInfo;\n            mydata *src_data = PQresultInstanceData(e->src, myEventProc);\n            mydata *dest_data = dup_mydata(src_data);\n\n            /* associate app specific data with result (copy it from a result) */\n            PQsetResultInstanceData(e->dest, myEventProc, dest_data);\n            break;\n        }\n\n        case PGEVT_RESULTDESTROY:\n        {\n            PGEventResultDestroy *e = (PGEventResultDestroy *)evtInfo;\n            mydata *data = PQresultInstanceData(e->result, myEventProc);\n\n            /* free instance data because the result is being destroyed */\n            if (data)\n              free_mydata(data);\n            break;\n        }\n\n        /* unknown event ID, just return true. */\n        default:\n            break;\n    }\n\n    return true; /* event processing succeeded */\n}\n\n", "source": "https://www.postgresql.org/docs/current/libpq-events.html"},
{"sql": "\nversion:1\ndn:cn=mydatabase,dc=mycompany,dc=com\nchangetype:add\nobjectclass:top\nobjectclass:device\ncn:mydatabase\ndescription:host=dbserver.mycompany.com\ndescription:port=5439\ndescription:dbname=mydb\ndescription:user=mydb_user\ndescription:sslmode=require\n", "source": "https://www.postgresql.org/docs/current/libpq-ldap.html"},
{"sql": "\nldap://ldap.mycompany.com/dc=mycompany,dc=com?description?one?(cn=mydatabase)\n", "source": "https://www.postgresql.org/docs/current/libpq-ldap.html"},
{"sql": "\n# only host and port are stored in LDAP, specify dbname and user explicitly\n[customerdb]\ndbname=customer\nuser=appuser\nldap://ldap.acme.com/cn=dbserver,cn=hosts?pgconnectinfo?base?(objectclass=*)\n", "source": "https://www.postgresql.org/docs/current/libpq-ldap.html"},
{"sql": "\nstatic void\ndefaultNoticeProcessor(void *arg, const char *message)\n{\n    fprintf(stderr, \"%s\", message);\n}\n", "source": "https://www.postgresql.org/docs/current/libpq-notice-processing.html"},
{"sql": "\nBEGIN;\nSELECT x FROM mytable WHERE id = 42 FOR UPDATE;\n-- result: x=2\n-- client adds 1 to x:\nUPDATE mytable SET x = 3 WHERE id = 42;\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/libpq-pipeline-mode.html"},
{"sql": "\nUPDATE mytable SET x = x + 1 WHERE id = 42;\n", "source": "https://www.postgresql.org/docs/current/libpq-pipeline-mode.html"},
{"sql": "\nSELECT * FROM mytable WHERE x = $1::bigint;\n", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nSELECT 1 AS FOO, 2 AS \"BAR\";\n", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfname(res, 0)              ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfname(res, 1)              ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfnumber(res, \"FOO\")        ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfnumber(res, \"foo\")        ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfnumber(res, \"BAR\")        ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nPQfnumber(res, \"\\\"BAR\\\"\")    ", "source": "https://www.postgresql.org/docs/current/libpq-exec.html"},
{"sql": "\nEXEC SQL OPEN ", "source": "https://www.postgresql.org/docs/current/ecpg-develop.html"},
{"sql": "\nint callback_fn(char *buf, int size, PGconn *conn);\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\nhost=localhost port=5432 dbname=mydb connect_timeout=10\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\npostgresql://\npostgresql://localhost\npostgresql://localhost:5433\npostgresql://localhost/mydb\npostgresql://user@localhost\npostgresql://user:secret@localhost\npostgresql://other@localhost/otherdb?connect_timeout=10&application_name=myapp\npostgresql://host1:123,host2:456/somedb?target_session_attrs=any&application_name=myapp\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\npostgresql:///mydb?host=localhost&port=5433\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\npostgresql://user@localhost:5433/mydb?options=-c%20synchronous_commit%3Doff\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\npostgresql:///dbname?host=/var/lib/postgresql\npostgresql://%2Fvar%2Flib%2Fpostgresql/dbname\n", "source": "https://www.postgresql.org/docs/current/libpq-connect.html"},
{"sql": "\n$int j = 3;\n$CONNECT TO :dbname;\n$CREATE TABLE test(i INT PRIMARY KEY, j INT);\n$INSERT INTO test(i, j) VALUES (7, :j);\n$COMMIT;\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nstring userid; /* this variable will contain trimmed data */\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH MYCUR INTO :userid;\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\n$CLOSE DATABASE;                /* close the current connection */\nEXEC SQL CLOSE DATABASE;\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\nstruct sqlvar_compat\n{\n    short   sqltype;\n    int     sqllen;\n    char   *sqldata;\n    short  *sqlind;\n    char   *sqlname;\n    char   *sqlformat;\n    short   sqlitype;\n    short   sqlilen;\n    char   *sqlidata;\n    int     sqlxid;\n    char   *sqltypename;\n    short   sqltypelen;\n    short   sqlownerlen;\n    short   sqlsourcetype;\n    char   *sqlownername;\n    int     sqlsourceid;\n    char   *sqlilongdata;\n    int     sqlflags;\n    void   *sqlreserved;\n};\n\nstruct sqlda_compat\n{\n    short  sqld;\n    struct sqlvar_compat *sqlvar;\n    char   desc_name[19];\n    short  desc_occ;\n    struct sqlda_compat *desc_next;\n    void  *reserved;\n};\n\ntypedef struct sqlvar_compat    sqlvar_t;\ntypedef struct sqlda_compat     sqlda_t;\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\nif (*(int2 *)sqldata->sqlvar[i].sqlind != 0)\n    printf(\"value is NULL\\n\");\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\n$char c[] = \"abc       \";\n$short s = 17;\n$int i = -74874;\n\nrsetnull(CCHARTYPE, (char *) c);\nrsetnull(CSHORTTYPE, (char *) &s);\nrsetnull(CINTTYPE, (char *) &i);\n\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\n$char c[] = \"abc       \";\n$short s = 17;\n$int i = -74874;\n\nrisnull(CCHARTYPE, (char *) c);\nrisnull(CSHORTTYPE, (char *) &s);\nrisnull(CINTTYPE, (char *) &i);\n\n", "source": "https://www.postgresql.org/docs/current/ecpg-informix-compat.html"},
{"sql": "\nclass TestCpp\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char dbname[1024];\n    EXEC SQL END DECLARE SECTION;\n\n  public:\n    TestCpp();\n    void test();\n    ~TestCpp();\n};\n\nTestCpp::TestCpp()\n{\n    EXEC SQL CONNECT TO testdb1;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n}\n\nvoid Test::test()\n{\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current_database = %s\\n\", dbname);\n}\n\nTestCpp::~TestCpp()\n{\n    EXEC SQL DISCONNECT ALL;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\nvoid TestCpp::test()\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char tmp[1024];\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL SELECT current_database() INTO :tmp;\n    strlcpy(dbname, tmp, sizeof(tmp));\n\n    printf(\"current_database = %s\\n\", dbname);\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\n#include \"test_mod.h\"\n#include <stdio.h>\n\nvoid\ndb_connect()\n{\n    EXEC SQL CONNECT TO testdb1;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n}\n\nvoid\ndb_test()\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char dbname[1024];\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current_database = %s\\n\", dbname);\n}\n\nvoid\ndb_disconnect()\n{\n    EXEC SQL DISCONNECT ALL;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid db_connect();\nvoid db_test();\nvoid db_disconnect();\n\n#ifdef __cplusplus\n}\n#endif\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\n#include \"test_mod.h\"\n\nclass TestCpp\n{\n  public:\n    TestCpp();\n    void test();\n    ~TestCpp();\n};\n\nTestCpp::TestCpp()\n{\n    db_connect();\n}\n\nvoid\nTestCpp::test()\n{\n    db_test();\n}\n\nTestCpp::~TestCpp()\n{\n    db_disconnect();\n}\n\nint\nmain(void)\n{\n    TestCpp *t = new TestCpp();\n\n    t->test();\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\necpg -o test_mod.c test_mod.pgc\ncc -c test_mod.c -o test_mod.o\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\nc++ -c test_cpp.cpp -o test_cpp.o\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\nc++ test_cpp.o test_mod.o -lecpg -o test_cpp\n", "source": "https://www.postgresql.org/docs/current/ecpg-cpp.html"},
{"sql": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <libpq-fe.h>\n#include <libpq/libpq-fs.h>\n\nEXEC SQL WHENEVER SQLERROR STOP;\n\nint\nmain(void)\n{\n    PGconn     *conn;\n    Oid         loid;\n    int         fd;\n    char        buf[256];\n    int         buflen = 256;\n    char        buf2[256];\n    int         rc;\n\n    memset(buf, 1, buflen);\n\n    EXEC SQL CONNECT TO testdb AS con1;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    conn = ECPGget_PGconn(\"con1\");\n    printf(\"conn = %p\\n\", conn);\n\n    /* create */\n    loid = lo_create(conn, 0);\n    if (loid &lt; 0)\n        printf(\"lo_create() failed: %s\", PQerrorMessage(conn));\n\n    printf(\"loid = %d\\n\", loid);\n\n    /* write test */\n    fd = lo_open(conn, loid, INV_READ|INV_WRITE);\n    if (fd &lt; 0)\n        printf(\"lo_open() failed: %s\", PQerrorMessage(conn));\n\n    printf(\"fd = %d\\n\", fd);\n\n    rc = lo_write(conn, fd, buf, buflen);\n    if (rc &lt; 0)\n        printf(\"lo_write() failed\\n\");\n\n    rc = lo_close(conn, fd);\n    if (rc &lt; 0)\n        printf(\"lo_close() failed: %s\", PQerrorMessage(conn));\n\n    /* read test */\n    fd = lo_open(conn, loid, INV_READ);\n    if (fd &lt; 0)\n        printf(\"lo_open() failed: %s\", PQerrorMessage(conn));\n\n    printf(\"fd = %d\\n\", fd);\n\n    rc = lo_read(conn, fd, buf2, buflen);\n    if (rc &lt; 0)\n        printf(\"lo_read() failed\\n\");\n\n    rc = lo_close(conn, fd);\n    if (rc &lt; 0)\n        printf(\"lo_close() failed: %s\", PQerrorMessage(conn));\n\n    /* check */\n    rc = memcmp(buf, buf2, buflen);\n    printf(\"memcmp() = %d\\n\", rc);\n\n    /* cleanup */\n    rc = lo_unlink(conn, loid);\n    if (rc &lt; 0)\n        printf(\"lo_unlink() failed: %s\", PQerrorMessage(conn));\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-lo.html"},
{"sql": "\nEXEC SQL INCLUDE ", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": ";\nEXEC SQL INCLUDE <", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": ">;\nEXEC SQL INCLUDE \"", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\n#include <", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL DEFINE ", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": ";\nEXEC SQL DEFINE ", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL DEFINE HAVE_FEATURE;\n", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL DEFINE MYNUMBER 12;\nEXEC SQL DEFINE MYSTRING 'abc';\n", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL UNDEF MYNUMBER;\n", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL ifdef TZVAR;\nEXEC SQL SET TIMEZONE TO TZVAR;\nEXEC SQL elif TZNAME;\nEXEC SQL SET TIMEZONE TO TZNAME;\nEXEC SQL else;\nEXEC SQL SET TIMEZONE TO 'GMT';\nEXEC SQL endif;\n", "source": "https://www.postgresql.org/docs/current/ecpg-preproc.html"},
{"sql": "\nEXEC SQL WHENEVER ", "source": "https://www.postgresql.org/docs/current/ecpg-errors.html"},
{"sql": "\nEXEC SQL WHENEVER SQLWARNING SQLPRINT;\nEXEC SQL WHENEVER SQLERROR STOP;\n", "source": "https://www.postgresql.org/docs/current/ecpg-errors.html"},
{"sql": "\nstruct\n{\n    char sqlcaid[8];\n    long sqlabc;\n    long sqlcode;\n    struct\n    {\n        int sqlerrml;\n        char sqlerrmc[SQLERRMC_LEN];\n    } sqlerrm;\n    char sqlerrp[8];\n    long sqlerrd[6];\n    char sqlwarn[8];\n    char sqlstate[5];\n} sqlca;\n", "source": "https://www.postgresql.org/docs/current/ecpg-errors.html"},
{"sql": "\nEXEC SQL WHENEVER SQLERROR CALL print_sqlca();\n\nvoid\nprint_sqlca()\n{\n    fprintf(stderr, \"==== sqlca ====\\n\");\n    fprintf(stderr, \"sqlcode: %ld\\n\", sqlca.sqlcode);\n    fprintf(stderr, \"sqlerrm.sqlerrml: %d\\n\", sqlca.sqlerrm.sqlerrml);\n    fprintf(stderr, \"sqlerrm.sqlerrmc: %s\\n\", sqlca.sqlerrm.sqlerrmc);\n    fprintf(stderr, \"sqlerrd: %ld %ld %ld %ld %ld %ld\\n\", sqlca.sqlerrd[0],sqlca.sqlerrd[1],sqlca.sqlerrd[2],\n                                                          sqlca.sqlerrd[3],sqlca.sqlerrd[4],sqlca.sqlerrd[5]);\n    fprintf(stderr, \"sqlwarn: %d %d %d %d %d %d %d %d\\n\", sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],\n                                                          sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],\n                                                          sqlca.sqlwarn[6], sqlca.sqlwarn[7]);\n    fprintf(stderr, \"sqlstate: %5s\\n\", sqlca.sqlstate);\n    fprintf(stderr, \"===============\\n\");\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-errors.html"},
{"sql": "\necpg prog1.pgc\n", "source": "https://www.postgresql.org/docs/current/ecpg-process.html"},
{"sql": "\ncc -c prog1.c\n", "source": "https://www.postgresql.org/docs/current/ecpg-process.html"},
{"sql": "\nECPG = ecpg\n\n%.c: %.pgc\n        $(ECPG) $<\n", "source": "https://www.postgresql.org/docs/current/ecpg-process.html"},
{"sql": "\nEXEC SQL ALLOCATE DESCRIPTOR ", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL DEALLOCATE DESCRIPTOR ", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL FETCH NEXT FROM mycursor INTO SQL DESCRIPTOR mydesc;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nchar *sql_stmt = \"SELECT * FROM table1\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE stmt1 FROM :sql_stmt;\nEXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL GET DESCRIPTOR ", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL GET DESCRIPTOR ", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL SET DESCRIPTOR ", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nint id[5];\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH 5 FROM mycursor INTO SQL DESCRIPTOR mydesc;\n\nEXEC SQL GET DESCRIPTOR mydesc VALUE 1 :id = DATA;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL include sqlda.h;\nsqlda_t         *mysqlda;\n\nEXEC SQL FETCH 3 FROM mycursor INTO DESCRIPTOR mysqlda;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL DESCRIBE prepared_statement INTO mysqlda;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nstruct sqlda_struct\n{\n    char            sqldaid[8];\n    long            sqldabc;\n    short           sqln;\n    short           sqld;\n    struct sqlda_struct *desc_next;\n    struct sqlvar_struct sqlvar[1];\n};\n\ntypedef struct sqlda_struct sqlda_t;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nstruct sqlvar_struct\n{\n    short          sqltype;\n    short          sqllen;\n    char          *sqldata;\n    short         *sqlind;\n    struct sqlname sqlname;\n};\n\ntypedef struct sqlvar_struct sqlvar_t;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n#define NAMEDATALEN 64\n\nstruct sqlname\n{\n        short           length;\n        char            data[NAMEDATALEN];\n};\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nsqlda_t *sqlda1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nchar query[1024] = \"SELECT d.oid, * FROM pg_database d, pg_stat_database s WHERE d.oid = s.datid AND (d.datname = ? OR d.oid = ?)\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE stmt1 FROM :query;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nsqlda_t *sqlda2;\n\nsqlda2 = (sqlda_t *) malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\nmemset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n\nsqlda2->sqln = 2; /* number of input variables */\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nsqlda2->sqlvar[0].sqltype = ECPGt_char;\nsqlda2->sqlvar[0].sqldata = \"postgres\";\nsqlda2->sqlvar[0].sqllen  = 8;\n\nint intval = 1;\nsqlda2->sqlvar[1].sqltype = ECPGt_int;\nsqlda2->sqlvar[1].sqldata = (char *) &intval;\nsqlda2->sqlvar[1].sqllen  = sizeof(intval);\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nfree(sqlda2);\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL include sqlda.h;\n\nsqlda_t *sqlda1; /* an output descriptor */\nsqlda_t *sqlda2; /* an input descriptor  */\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nint\nmain(void)\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char query[1024] = \"SELECT d.oid,* FROM pg_database d, pg_stat_database s WHERE d.oid=s.datid AND ( d.datname=? OR d.oid=? )\";\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb AS con1 USER testuser;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    EXEC SQL PREPARE stmt1 FROM :query;\n    EXEC SQL DECLARE cur1 CURSOR FOR stmt1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n    /* Create SQLDA structure for input parameters. */\n    sqlda2 = (sqlda_t *) malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\n    memset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n    sqlda2->sqln = 2; /* number of input variables */\n\n    sqlda2->sqlvar[0].sqltype = ECPGt_char;\n    sqlda2->sqlvar[0].sqldata = \"postgres\";\n    sqlda2->sqlvar[0].sqllen  = 8;\n\n    intval = 1;\n    sqlda2->sqlvar[1].sqltype = ECPGt_int;\n    sqlda2->sqlvar[1].sqldata = (char *)&intval;\n    sqlda2->sqlvar[1].sqllen  = sizeof(intval);\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n    /* Open a cursor with input parameters. */\n    EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n    while (1)\n    {\n        sqlda_t *cur_sqlda;\n\n        /* Assign descriptor to the cursor  */\n        EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n        /* Print every column in a row. */\n        for (i = 0; i < sqlda1->sqld; i++)\n        {\n            sqlvar_t v = sqlda1->sqlvar[i];\n            char *sqldata = v.sqldata;\n            short sqllen  = v.sqllen;\n\n            strncpy(name_buf, v.sqlname.data, v.sqlname.length);\n            name_buf[v.sqlname.length] = '\\0';\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n    EXEC SQL CLOSE cur1;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DISCONNECT ALL;\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\n#include <stdlib.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n\nEXEC SQL include sqlda.h;\n\nsqlda_t *sqlda1; /* descriptor for output */\nsqlda_t *sqlda2; /* descriptor for input */\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\nEXEC SQL WHENEVER SQLERROR STOP;\n\nint\nmain(void)\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char query[1024] = \"SELECT d.oid,* FROM pg_database d, pg_stat_database s WHERE d.oid=s.datid AND ( d.datname=? OR d.oid=? )\";\n\n    int intval;\n    unsigned long long int longlongval;\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO uptimedb AS con1 USER uptime;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    EXEC SQL PREPARE stmt1 FROM :query;\n    EXEC SQL DECLARE cur1 CURSOR FOR stmt1;\n\n    /* Create an SQLDA structure for an input parameter */\n    sqlda2 = (sqlda_t *)malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\n    memset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n    sqlda2->sqln = 2; /* a number of input variables */\n\n    sqlda2->sqlvar[0].sqltype = ECPGt_char;\n    sqlda2->sqlvar[0].sqldata = \"postgres\";\n    sqlda2->sqlvar[0].sqllen  = 8;\n\n    intval = 1;\n    sqlda2->sqlvar[1].sqltype = ECPGt_int;\n    sqlda2->sqlvar[1].sqldata = (char *) &intval;\n    sqlda2->sqlvar[1].sqllen  = sizeof(intval);\n\n    /* Open a cursor with input parameters. */\n    EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n\n    while (1)\n    {\n        sqlda_t *cur_sqlda;\n\n        /* Assign descriptor to the cursor  */\n        EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n\n        for (cur_sqlda = sqlda1 ;\n             cur_sqlda != NULL ;\n             cur_sqlda = cur_sqlda->desc_next)\n        {\n            int i;\n            char name_buf[1024];\n            char var_buf[1024];\n\n            /* Print every column in a row. */\n            for (i=0 ; i<cur_sqlda->sqld ; i++)\n            {\n                sqlvar_t v = cur_sqlda->sqlvar[i];\n                char *sqldata = v.sqldata;\n                short sqllen  = v.sqllen;\n\n                strncpy(name_buf, v.sqlname.data, v.sqlname.length);\n                name_buf[v.sqlname.length] = '\\0';\n\n                switch (v.sqltype)\n                {\n                    case ECPGt_char:\n                        memset(&var_buf, 0, sizeof(var_buf));\n                        memcpy(&var_buf, sqldata, (sizeof(var_buf)<=sqllen ? sizeof(var_buf)-1 : sqllen) );\n                        break;\n\n                    case ECPGt_int: /* integer */\n                        memcpy(&intval, sqldata, sqllen);\n                        snprintf(var_buf, sizeof(var_buf), \"%d\", intval);\n                        break;\n\n                    case ECPGt_long_long: /* bigint */\n                        memcpy(&longlongval, sqldata, sqllen);\n                        snprintf(var_buf, sizeof(var_buf), \"%lld\", longlongval);\n                        break;\n\n                    default:\n                    {\n                        int i;\n                        memset(var_buf, 0, sizeof(var_buf));\n                        for (i = 0; i < sqllen; i++)\n                        {\n                            char tmpbuf[16];\n                            snprintf(tmpbuf, sizeof(tmpbuf), \"%02x \", (unsigned char) sqldata[i]);\n                            strncat(var_buf, tmpbuf, sizeof(var_buf));\n                        }\n                    }\n                        break;\n                }\n\n                printf(\"%s = %s (type: %d)\\n\", name_buf, var_buf, v.sqltype);\n            }\n\n            printf(\"\\n\");\n        }\n    }\n\n    EXEC SQL CLOSE cur1;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DISCONNECT ALL;\n\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-descriptors.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n   date date1;\n   timestamp ts1, tsout;\n   interval iv1;\n   char *out;\nEXEC SQL END DECLARE SECTION;\n\nPGTYPESdate_today(&date1);\nEXEC SQL SELECT started, duration INTO :ts1, :iv1 FROM datetbl WHERE d=:date1;\nPGTYPEStimestamp_add_interval(&ts1, &iv1, &tsout);\nout = PGTYPEStimestamp_to_asc(&tsout);\nprintf(\"Started + duration: %s\\n\", out);\nPGTYPESchar_free(out);\n\n", "source": "https://www.postgresql.org/docs/current/ecpg-pgtypes.html"},
{"sql": "\nEXEC SQL DEALLOCATE PREPARE ", "source": "https://www.postgresql.org/docs/current/ecpg-dynamic.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nchar dbaname[128];\nchar datname[128];\nchar *stmt = \"SELECT u.usename as dbaname, d.datname \"\n             \"  FROM pg_database d, pg_user u \"\n             \"  WHERE d.datdba = u.usesysid\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL CONNECT TO testdb AS con1 USER testuser;\nEXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\nEXEC SQL PREPARE stmt1 FROM :stmt;\n\nEXEC SQL DECLARE cursor1 CURSOR FOR stmt1;\nEXEC SQL OPEN cursor1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    EXEC SQL FETCH cursor1 INTO :dbaname,:datname;\n    printf(\"dbaname=%s, datname=%s\\n\", dbaname, datname);\n}\n\nEXEC SQL CLOSE cursor1;\n\nEXEC SQL COMMIT;\nEXEC SQL DISCONNECT ALL;\n", "source": "https://www.postgresql.org/docs/current/ecpg-dynamic.html"},
{"sql": "\nEXEC SQL INSERT INTO sometable VALUES (:v1, 'foo', :v2);\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL END DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nint   x = 4;\nchar  foo[16], bar[16];\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL int i = 4;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    char str[50];\nEXEC SQL END DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nVARCHAR var[180];\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nstruct varchar_var { int len; char arr[180]; } var;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\n#include <pgtypes_timestamp.h>\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\ntimestamp ts;\nEXEC SQL END DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL SELECT now()::timestamp INTO :ts;\n\nprintf(\"ts = %s\\n\", PGTYPEStimestamp_to_asc(ts));\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <pgtypes_interval.h>\n\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    interval *in;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    in = PGTYPESinterval_new();\n    EXEC SQL SELECT '1 min'::interval INTO :in;\n    printf(\"interval = %s\\n\", PGTYPESinterval_to_asc(in));\n    PGTYPESinterval_free(in);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <pgtypes_numeric.h>\n\nEXEC SQL WHENEVER SQLERROR STOP;\n\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    numeric *num;\n    numeric *num2;\n    decimal *dec;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    num = PGTYPESnumeric_new();\n    dec = PGTYPESdecimal_new();\n\n    EXEC SQL SELECT 12.345::numeric(4,2), 23.456::decimal(4,2) INTO :num, :dec;\n\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 0));\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 1));\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 2));\n\n    /* Convert decimal to numeric to show a decimal value. */\n    num2 = PGTYPESnumeric_new();\n    PGTYPESnumeric_from_decimal(dec, num2);\n\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 0));\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 1));\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 2));\n\n    PGTYPESnumeric_free(num2);\n    PGTYPESdecimal_free(dec);\n    PGTYPESnumeric_free(num);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nbytea var[180];\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nstruct bytea_var { int len; char arr[180]; } var;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    int dbid[8];\n    char dbname[8][16];\n    int i;\nEXEC SQL END DECLARE SECTION;\n\n    memset(dbname, 0, sizeof(char)* 16 * 8);\n    memset(dbid, 0, sizeof(int) * 8);\n\n    EXEC SQL CONNECT TO testdb;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    /* Retrieve multiple rows into arrays at once. */\n    EXEC SQL SELECT oid,datname INTO :dbid, :dbname FROM pg_database;\n\n    for (i = 0; i < 8; i++)\n        printf(\"oid=%d, dbname=%s\\n\", dbid[i], dbname[i]);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef struct\n    {\n       int oid;\n       char datname[65];\n       long long int size;\n    } dbinfo_t;\n\n    dbinfo_t dbval;\nEXEC SQL END DECLARE SECTION;\n\n    memset(&dbval, 0, sizeof(dbinfo_t));\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;\n    EXEC SQL OPEN cur1;\n\n    /* when end of result set reached, break out of while loop */\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        /* Fetch multiple columns into one structure. */\n        EXEC SQL FETCH FROM cur1 INTO :dbval;\n\n        /* Print members of the structure. */\n        printf(\"oid=%d, datname=%s, size=%lld\\n\", dbval.oid, dbval.datname, dbval.size);\n    }\n\n    EXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef struct\n    {\n       int oid;\n       char datname[65];\n    } dbinfo_t;\n\n    dbinfo_t dbval;\n    long long int size;\nEXEC SQL END DECLARE SECTION;\n\n    memset(&dbval, 0, sizeof(dbinfo_t));\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;\n    EXEC SQL OPEN cur1;\n\n    /* when end of result set reached, break out of while loop */\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        /* Fetch multiple columns into one structure. */\n        EXEC SQL FETCH FROM cur1 INTO :dbval, :size;\n\n        /* Print members of the structure. */\n        printf(\"oid=%d, datname=%s, size=%lld\\n\", dbval.oid, dbval.datname, size);\n    }\n\n    EXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef char mychartype[40];\n    typedef long serial_t;\nEXEC SQL END DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL TYPE serial_t IS long;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    int   *intp;\n    char **charp;\nEXEC SQL END DECLARE SECTION;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nCREATE TABLE t3 (\n    ii integer[]\n);\n\ntestdb=> SELECT * FROM t3;\n     ii\n-------------\n {1,2,3,4,5}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nint ii;\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT ii[4] FROM t3;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    EXEC SQL FETCH FROM cur1 INTO :ii ;\n    printf(\"ii=%d\\n\", ii);\n}\n\nEXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nCREATE TYPE comp_t AS (intval integer, textval varchar(32));\nCREATE TABLE t4 (compval comp_t);\nINSERT INTO t4 VALUES ( (256, 'PostgreSQL') );\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\nint intval;\nvarchar textval[33];\nEXEC SQL END DECLARE SECTION;\n\n/* Put each element of the composite type column in the SELECT list. */\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* Fetch each element of the composite type column into host variables. */\n    EXEC SQL FETCH FROM cur1 INTO :intval, :textval;\n\n    printf(\"intval=%d, textval=%s\\n\", intval, textval.arr);\n}\n\nEXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\ntypedef struct\n{\n    int intval;\n    varchar textval[33];\n} comp_t;\n\ncomp_t compval;\nEXEC SQL END DECLARE SECTION;\n\n/* Put each element of the composite type column in the SELECT list. */\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* Put all values in the SELECT list into one structure. */\n    EXEC SQL FETCH FROM cur1 INTO :compval;\n\n    printf(\"intval=%d, textval=%s\\n\", compval.intval, compval.textval.arr);\n}\n\nEXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\n    varchar a[64];\n    varchar b[64];\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL INSERT INTO test_complex VALUES ('(1,1)', '(3,3)');\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT a, b FROM test_complex;\n    EXEC SQL OPEN cur1;\n\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        EXEC SQL FETCH FROM cur1 INTO :a, :b;\n        printf(\"a=%s, b=%s\\n\", a.arr, b.arr);\n    }\n\n    EXEC SQL CLOSE cur1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nCREATE FUNCTION create_complex(r double, i double) RETURNS complex\nLANGUAGE SQL\nIMMUTABLE\nAS $$ SELECT $1 * complex '(1,0')' + $2 * complex '(0,1)' $$;\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL BEGIN DECLARE SECTION;\ndouble a, b, c, d;\nEXEC SQL END DECLARE SECTION;\n\na = 1;\nb = 2;\nc = 3;\nd = 4;\n\nEXEC SQL INSERT INTO test_complex VALUES (create_complex(:a, :b), create_complex(:c, :d));\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL INSERT INTO test_complex VALUES ('(1,2)', '(3,4)');\n", "source": "https://www.postgresql.org/docs/current/ecpg-variables.html"},
{"sql": "\nEXEC SQL CREATE TABLE foo (number integer, ascii char(16));\nEXEC SQL CREATE UNIQUE INDEX num1 ON foo(number);\nEXEC SQL COMMIT;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL INSERT INTO foo (number, ascii) VALUES (9999, 'doodad');\nEXEC SQL COMMIT;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL DELETE FROM foo WHERE number = 9999;\nEXEC SQL COMMIT;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL UPDATE foo\n    SET ascii = 'foobar'\n    WHERE number = 9999;\nEXEC SQL COMMIT;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL SELECT foo INTO :FooBar FROM table1 WHERE ascii = 'doodad';\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL SHOW search_path INTO :var;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL PREPARE stmt1 FROM \"SELECT oid, datname FROM pg_database WHERE oid = ?\";\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL EXECUTE stmt1 INTO :dboid, :dbname USING 1;\n", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL DEALLOCATE PREPARE ", "source": "https://www.postgresql.org/docs/current/ecpg-commands.html"},
{"sql": "\nEXEC SQL CONNECT TO ", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\nEXEC SQL AT ", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\nEXEC SQL SET CONNECTION ", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\n#include <stdio.h>\n\nEXEC SQL BEGIN DECLARE SECTION;\n    char dbname[1024];\nEXEC SQL END DECLARE SECTION;\n\nint\nmain()\n{\n    EXEC SQL CONNECT TO testdb1 AS con1 USER testuser;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n    EXEC SQL CONNECT TO testdb2 AS con2 USER testuser;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n    EXEC SQL CONNECT TO testdb3 AS con3 USER testuser;\n    EXEC SQL SELECT pg_catalog.set_config('search_path', '', false); EXEC SQL COMMIT;\n\n    /* This query would be executed in the last opened database \"testdb3\". */\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current=%s (should be testdb3)\\n\", dbname);\n\n    /* Using \"AT\" to run a query in \"testdb2\" */\n    EXEC SQL AT con2 SELECT current_database() INTO :dbname;\n    printf(\"current=%s (should be testdb2)\\n\", dbname);\n\n    /* Switch the current connection to \"testdb1\". */\n    EXEC SQL SET CONNECTION con1;\n\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current=%s (should be testdb1)\\n\", dbname);\n\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\nEXEC SQL AT ", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": " STATEMENT;\nEXEC SQL PREPARE ", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\n#include <stdio.h>\n\nEXEC SQL BEGIN DECLARE SECTION;\nchar dbname[128];\nchar *dyn_sql = \"SELECT current_database()\";\nEXEC SQL END DECLARE SECTION;\n\nint main(){\n  EXEC SQL CONNECT TO postgres AS con1;\n  EXEC SQL CONNECT TO testdb AS con2;\n  EXEC SQL AT con1 DECLARE stmt STATEMENT;\n  EXEC SQL PREPARE stmt FROM :dyn_sql;\n  EXEC SQL EXECUTE stmt INTO :dbname;\n  printf(\"%s\\n\", dbname);\n\n  EXEC SQL DISCONNECT ALL;\n  return 0;\n}\n", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\nEXEC SQL DISCONNECT [", "source": "https://www.postgresql.org/docs/current/ecpg-connect.html"},
{"sql": "\nSET LOCAL search_path TO @extschema@, pg_temp;\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\nCREATE TABLE my_config (key text, value text);\nCREATE SEQUENCE my_config_seq;\n\nSELECT pg_catalog.pg_extension_config_dump('my_config', '');\nSELECT pg_catalog.pg_extension_config_dump('my_config_seq', '');\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\nCREATE TABLE my_config (key text, value text, standard_entry boolean);\n\nSELECT pg_catalog.pg_extension_config_dump('my_config', 'WHERE NOT standard_entry');\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\nSELECT * FROM pg_extension_update_paths('", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\n-- complain if script is sourced in psql, rather than via CREATE EXTENSION\n\\echo Use \"CREATE EXTENSION pair\" to load this file. \\quit\n\nCREATE TYPE pair AS ( k text, v text );\n\nCREATE FUNCTION pair(text, text)\nRETURNS pair LANGUAGE SQL AS 'SELECT ROW($1, $2)::@extschema@.pair;';\n\nCREATE OPERATOR ~> (LEFTARG = text, RIGHTARG = text, FUNCTION = pair);\n\n-- \"SET search_path\" is easy to get right, but qualified names perform better.\nCREATE FUNCTION lower(pair)\nRETURNS pair LANGUAGE SQL\nAS 'SELECT ROW(lower($1.k), lower($1.v))::@extschema@.pair;'\nSET search_path = pg_temp;\n\nCREATE FUNCTION pair_concat(pair, pair)\nRETURNS pair LANGUAGE SQL\nAS 'SELECT ROW($1.k OPERATOR(pg_catalog.||) $2.k,\n               $1.v OPERATOR(pg_catalog.||) $2.v)::@extschema@.pair;';\n\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\n# pair extension\ncomment = 'A key/value pair data type'\ndefault_version = '1.0'\n# cannot be relocatable because of use of @extschema@\nrelocatable = false\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\nEXTENSION = pair\nDATA = pair--1.0.sql\n\nPG_CONFIG = pg_config\nPGXS := $(shell $(PG_CONFIG) --pgxs)\ninclude $(PGXS)\n", "source": "https://www.postgresql.org/docs/current/extend-extensions.html"},
{"sql": "\n#define Mag(c)  ((c)->x*(c)->x + (c)->y*(c)->y)\n\nstatic int\ncomplex_abs_cmp_internal(Complex *a, Complex *b)\n{\n    double      amag = Mag(a),\n                bmag = Mag(b);\n\n    if (amag < bmag)\n        return -1;\n    if (amag > bmag)\n        return 1;\n    return 0;\n}\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(complex_abs_lt);\n\nDatum\ncomplex_abs_lt(PG_FUNCTION_ARGS)\n{\n    Complex    *a = (Complex *) PG_GETARG_POINTER(0);\n    Complex    *b = (Complex *) PG_GETARG_POINTER(1);\n\n    PG_RETURN_BOOL(complex_abs_cmp_internal(a, b) < 0);\n}\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nCREATE FUNCTION complex_abs_lt(complex, complex) RETURNS bool\n    AS '", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "', 'complex_abs_lt'\n    LANGUAGE C IMMUTABLE STRICT;\n\nCREATE OPERATOR < (\n   leftarg = complex, rightarg = complex, procedure = complex_abs_lt,\n   commutator = > , negator = >= ,\n   restrict = scalarltsel, join = scalarltjoinsel\n);\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nCREATE FUNCTION complex_abs_cmp(complex, complex)\n    RETURNS integer\n    AS '", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "'\n    LANGUAGE C IMMUTABLE STRICT;\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nCREATE OPERATOR CLASS complex_abs_ops\n    DEFAULT FOR TYPE complex USING btree AS\n        OPERATOR        1       < ,\n        OPERATOR        2       <= ,\n        OPERATOR        3       = ,\n        OPERATOR        4       >= ,\n        OPERATOR        5       > ,\n        FUNCTION        1       complex_abs_cmp(complex, complex);\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\n        OPERATOR        1       < (complex, complex) ,\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nCREATE OPERATOR FAMILY integer_ops USING btree;\n\nCREATE OPERATOR CLASS int8_ops\nDEFAULT FOR TYPE int8 USING btree FAMILY integer_ops AS\n  -- standard int8 comparisons\n  OPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint8cmp(int8, int8) ,\n  FUNCTION 2 btint8sortsupport(internal) ,\n  FUNCTION 3 in_range(int8, int8, int8, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;\n\nCREATE OPERATOR CLASS int4_ops\nDEFAULT FOR TYPE int4 USING btree FAMILY integer_ops AS\n  -- standard int4 comparisons\n  OPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint4cmp(int4, int4) ,\n  FUNCTION 2 btint4sortsupport(internal) ,\n  FUNCTION 3 in_range(int4, int4, int4, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;\n\nCREATE OPERATOR CLASS int2_ops\nDEFAULT FOR TYPE int2 USING btree FAMILY integer_ops AS\n  -- standard int2 comparisons\n  OPERATOR 1 < ,\n  OPERATOR 2 <= ,\n  OPERATOR 3 = ,\n  OPERATOR 4 >= ,\n  OPERATOR 5 > ,\n  FUNCTION 1 btint2cmp(int2, int2) ,\n  FUNCTION 2 btint2sortsupport(internal) ,\n  FUNCTION 3 in_range(int2, int2, int2, boolean, boolean) ,\n  FUNCTION 4 btequalimage(oid) ;\n\nALTER OPERATOR FAMILY integer_ops USING btree ADD\n  -- cross-type comparisons int8 vs int2\n  OPERATOR 1 < (int8, int2) ,\n  OPERATOR 2 <= (int8, int2) ,\n  OPERATOR 3 = (int8, int2) ,\n  OPERATOR 4 >= (int8, int2) ,\n  OPERATOR 5 > (int8, int2) ,\n  FUNCTION 1 btint82cmp(int8, int2) ,\n\n  -- cross-type comparisons int8 vs int4\n  OPERATOR 1 < (int8, int4) ,\n  OPERATOR 2 <= (int8, int4) ,\n  OPERATOR 3 = (int8, int4) ,\n  OPERATOR 4 >= (int8, int4) ,\n  OPERATOR 5 > (int8, int4) ,\n  FUNCTION 1 btint84cmp(int8, int4) ,\n\n  -- cross-type comparisons int4 vs int2\n  OPERATOR 1 < (int4, int2) ,\n  OPERATOR 2 <= (int4, int2) ,\n  OPERATOR 3 = (int4, int2) ,\n  OPERATOR 4 >= (int4, int2) ,\n  OPERATOR 5 > (int4, int2) ,\n  FUNCTION 1 btint42cmp(int4, int2) ,\n\n  -- cross-type comparisons int4 vs int8\n  OPERATOR 1 < (int4, int8) ,\n  OPERATOR 2 <= (int4, int8) ,\n  OPERATOR 3 = (int4, int8) ,\n  OPERATOR 4 >= (int4, int8) ,\n  OPERATOR 5 > (int4, int8) ,\n  FUNCTION 1 btint48cmp(int4, int8) ,\n\n  -- cross-type comparisons int2 vs int8\n  OPERATOR 1 < (int2, int8) ,\n  OPERATOR 2 <= (int2, int8) ,\n  OPERATOR 3 = (int2, int8) ,\n  OPERATOR 4 >= (int2, int8) ,\n  OPERATOR 5 > (int2, int8) ,\n  FUNCTION 1 btint28cmp(int2, int8) ,\n\n  -- cross-type comparisons int2 vs int4\n  OPERATOR 1 < (int2, int4) ,\n  OPERATOR 2 <= (int2, int4) ,\n  OPERATOR 3 = (int2, int4) ,\n  OPERATOR 4 >= (int2, int4) ,\n  OPERATOR 5 > (int2, int4) ,\n  FUNCTION 1 btint24cmp(int2, int4) ,\n\n  -- cross-type in_range functions\n  FUNCTION 3 in_range(int4, int4, int8, boolean, boolean) ,\n  FUNCTION 3 in_range(int4, int4, int2, boolean, boolean) ,\n  FUNCTION 3 in_range(int2, int2, int8, boolean, boolean) ,\n  FUNCTION 3 in_range(int2, int2, int4, boolean, boolean) ;\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nSELECT * FROM mytable ORDER BY somecol USING ~<~;\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nSELECT sum(x) OVER (ORDER BY x RANGE BETWEEN 5 PRECEDING AND 10 FOLLOWING)\n  FROM mytable;\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nSELECT * FROM places ORDER BY location <-> point '(101,456)' LIMIT 10;\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nOPERATOR 15    <-> (point, point) FOR ORDER BY float_ops\n\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\nSELECT * FROM table WHERE integer_column < 4;\n", "source": "https://www.postgresql.org/docs/current/xindex.html"},
{"sql": "\ncolumn OP constant\n", "source": "https://www.postgresql.org/docs/current/xoper-optimization.html"},
{"sql": "\ntable1.column1 OP table2.column2\n", "source": "https://www.postgresql.org/docs/current/xoper-optimization.html"},
{"sql": "\nMODULES = isbn_issn\nEXTENSION = isbn_issn\nDATA = isbn_issn--1.0.sql\nDOCS = README.isbn_issn\nHEADERS_isbn_issn = isbn_issn.h\n\nPG_CONFIG = pg_config\nPGXS := $(shell $(PG_CONFIG) --pgxs)\ninclude $(PGXS)\n", "source": "https://www.postgresql.org/docs/current/extend-pgxs.html"},
{"sql": "\nmkdir build_dir\ncd build_dir\nmake -f /path/to/extension/source/tree/Makefile\nmake -f /path/to/extension/source/tree/Makefile install\n", "source": "https://www.postgresql.org/docs/current/extend-pgxs.html"},
{"sql": "\nmake VPATH=/path/to/extension/source/tree\nmake VPATH=/path/to/extension/source/tree install\n", "source": "https://www.postgresql.org/docs/current/extend-pgxs.html"},
{"sql": "\nCREATE FUNCTION complex_add(complex, complex)\n    RETURNS complex\n    AS '", "source": "https://www.postgresql.org/docs/current/xoper.html"},
{"sql": "', 'complex_add'\n    LANGUAGE C IMMUTABLE STRICT;\n\nCREATE OPERATOR + (\n    leftarg = complex,\n    rightarg = complex,\n    function = complex_add,\n    commutator = +\n);\n", "source": "https://www.postgresql.org/docs/current/xoper.html"},
{"sql": "\ntypedef struct Complex {\n    double      x;\n    double      y;\n} Complex;\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(complex_in);\n\nDatum\ncomplex_in(PG_FUNCTION_ARGS)\n{\n    char       *str = PG_GETARG_CSTRING(0);\n    double      x,\n                y;\n    Complex    *result;\n\n    if (sscanf(str, \" ( %lf , %lf )\", &x, &y) != 2)\n        ereport(ERROR,\n                (errcode(ERRCODE_INVALID_TEXT_REPRESENTATION),\n                 errmsg(\"invalid input syntax for type %s: \\\"%s\\\"\",\n                        \"complex\", str)));\n\n    result = (Complex *) palloc(sizeof(Complex));\n    result->x = x;\n    result->y = y;\n    PG_RETURN_POINTER(result);\n}\n\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(complex_out);\n\nDatum\ncomplex_out(PG_FUNCTION_ARGS)\n{\n    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);\n    char       *result;\n\n    result = psprintf(\"(%g,%g)\", complex->x, complex->y);\n    PG_RETURN_CSTRING(result);\n}\n\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(complex_recv);\n\nDatum\ncomplex_recv(PG_FUNCTION_ARGS)\n{\n    StringInfo  buf = (StringInfo) PG_GETARG_POINTER(0);\n    Complex    *result;\n\n    result = (Complex *) palloc(sizeof(Complex));\n    result->x = pq_getmsgfloat8(buf);\n    result->y = pq_getmsgfloat8(buf);\n    PG_RETURN_POINTER(result);\n}\n\nPG_FUNCTION_INFO_V1(complex_send);\n\nDatum\ncomplex_send(PG_FUNCTION_ARGS)\n{\n    Complex    *complex = (Complex *) PG_GETARG_POINTER(0);\n    StringInfoData buf;\n\n    pq_begintypsend(&buf);\n    pq_sendfloat8(&buf, complex->x);\n    pq_sendfloat8(&buf, complex->y);\n    PG_RETURN_BYTEA_P(pq_endtypsend(&buf));\n}\n\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nCREATE TYPE complex;\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nCREATE FUNCTION complex_in(cstring)\n    RETURNS complex\n    AS '", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "'\n    LANGUAGE C IMMUTABLE STRICT;\n\nCREATE FUNCTION complex_out(complex)\n    RETURNS cstring\n    AS '", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "'\n    LANGUAGE C IMMUTABLE STRICT;\n\nCREATE FUNCTION complex_recv(internal)\n   RETURNS complex\n   AS '", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "'\n   LANGUAGE C IMMUTABLE STRICT;\n\nCREATE FUNCTION complex_send(complex)\n   RETURNS bytea\n   AS '", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "'\n   LANGUAGE C IMMUTABLE STRICT;\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nCREATE TYPE complex (\n   internallength = 16,\n   input = complex_in,\n   output = complex_out,\n   receive = complex_recv,\n   send = complex_send,\n   alignment = double\n);\n", "source": "https://www.postgresql.org/docs/current/xtypes.html"},
{"sql": "\nsupportfn(internal) returns internal\n", "source": "https://www.postgresql.org/docs/current/xfunc-optimization.html"},
{"sql": "\nCREATE AGGREGATE sum (complex)\n(\n    sfunc = complex_add,\n    stype = complex,\n    initcond = '(0,0)'\n);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nSELECT sum(a) FROM test_complex;\n\n   sum\n-----------\n (34,53.9)\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nCREATE AGGREGATE avg (float8)\n(\n    sfunc = float8_accum,\n    stype = float8[],\n    finalfunc = float8_avg,\n    initcond = '{0,0,0}'\n);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nCREATE AGGREGATE sum (complex)\n(\n    sfunc = complex_add,\n    stype = complex,\n    initcond = '(0,0)',\n    msfunc = complex_add,\n    minvfunc = complex_sub,\n    mstype = complex,\n    minitcond = '(0,0)'\n);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nCREATE AGGREGATE unsafe_sum (float8)\n(\n    stype = float8,\n    sfunc = float8pl,\n    mstype = float8,\n    msfunc = float8pl,\n    minvfunc = float8mi\n);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nSELECT\n  unsafe_sum(x) OVER (ORDER BY n ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)\nFROM (VALUES (1, 1.0e20::float8),\n             (2, 1.0::float8)) AS v (n,x);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nCREATE AGGREGATE array_accum (anycompatible)\n(\n    sfunc = array_append,\n    stype = anycompatiblearray,\n    initcond = '{}'\n);\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nSELECT attrelid::regclass, array_accum(attname)\n    FROM pg_attribute\n    WHERE attnum > 0 AND attrelid = 'pg_tablespace'::regclass\n    GROUP BY attrelid;\n\n   attrelid    |              array_accum              \n---------------+---------------------------------------\n pg_tablespace | {spcname,spcowner,spcacl,spcoptions}\n(1 row)\n\nSELECT attrelid::regclass, array_accum(atttypid::regtype)\n    FROM pg_attribute\n    WHERE attnum > 0 AND attrelid = 'pg_tablespace'::regclass\n    GROUP BY attrelid;\n\n   attrelid    |        array_accum        \n---------------+---------------------------\n pg_tablespace | {name,oid,aclitem[],text[]}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nSELECT percentile_disc(0.5) WITHIN GROUP (ORDER BY income) FROM households;\n percentile_disc\n-----------------\n           50489\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nif (AggCheckCallContext(fcinfo, NULL))\n", "source": "https://www.postgresql.org/docs/current/xaggr.html"},
{"sql": "\nPG_MODULE_MAGIC;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n/* 4-byte integer, passed by value */\ntypedef int int4;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n/* 16-byte structure, passed by reference */\ntypedef struct\n{\n    double  x, y;\n} Point;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ntypedef struct {\n    int32 length;\n    char data[FLEXIBLE_ARRAY_MEMBER];\n} text;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nDatum funcname(PG_FUNCTION_ARGS)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(funcname);\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n#include \"postgres.h\"\n#include <string.h>\n#include \"fmgr.h\"\n#include \"utils/geo_decls.h\"\n\nPG_MODULE_MAGIC;\n\n/* by value */\n\nPG_FUNCTION_INFO_V1(add_one);\n\nDatum\nadd_one(PG_FUNCTION_ARGS)\n{\n    int32   arg = PG_GETARG_INT32(0);\n\n    PG_RETURN_INT32(arg + 1);\n}\n\n/* by reference, fixed length */\n\nPG_FUNCTION_INFO_V1(add_one_float8);\n\nDatum\nadd_one_float8(PG_FUNCTION_ARGS)\n{\n    /* The macros for FLOAT8 hide its pass-by-reference nature. */\n    float8   arg = PG_GETARG_FLOAT8(0);\n\n    PG_RETURN_FLOAT8(arg + 1.0);\n}\n\nPG_FUNCTION_INFO_V1(makepoint);\n\nDatum\nmakepoint(PG_FUNCTION_ARGS)\n{\n    /* Here, the pass-by-reference nature of Point is not hidden. */\n    Point     *pointx = PG_GETARG_POINT_P(0);\n    Point     *pointy = PG_GETARG_POINT_P(1);\n    Point     *new_point = (Point *) palloc(sizeof(Point));\n\n    new_point->x = pointx->x;\n    new_point->y = pointy->y;\n\n    PG_RETURN_POINT_P(new_point);\n}\n\n/* by reference, variable length */\n\nPG_FUNCTION_INFO_V1(copytext);\n\nDatum\ncopytext(PG_FUNCTION_ARGS)\n{\n    text     *t = PG_GETARG_TEXT_PP(0);\n\n    /*\n     * VARSIZE_ANY_EXHDR is the size of the struct in bytes, minus the\n     * VARHDRSZ or VARHDRSZ_SHORT of its header.  Construct the copy with a\n     * full-length header.\n     */\n    text     *new_t = (text *) palloc(VARSIZE_ANY_EXHDR(t) + VARHDRSZ);\n    SET_VARSIZE(new_t, VARSIZE_ANY_EXHDR(t) + VARHDRSZ);\n\n    /*\n     * VARDATA is a pointer to the data region of the new struct.  The source\n     * could be a short datum, so retrieve its data through VARDATA_ANY.\n     */\n    memcpy((void *) VARDATA(new_t), /* destination */\n           (void *) VARDATA_ANY(t), /* source */\n           VARSIZE_ANY_EXHDR(t));   /* how many bytes */\n    PG_RETURN_TEXT_P(new_t);\n}\n\nPG_FUNCTION_INFO_V1(concat_text);\n\nDatum\nconcat_text(PG_FUNCTION_ARGS)\n{\n    text  *arg1 = PG_GETARG_TEXT_PP(0);\n    text  *arg2 = PG_GETARG_TEXT_PP(1);\n    int32 arg1_size = VARSIZE_ANY_EXHDR(arg1);\n    int32 arg2_size = VARSIZE_ANY_EXHDR(arg2);\n    int32 new_text_size = arg1_size + arg2_size + VARHDRSZ;\n    text *new_text = (text *) palloc(new_text_size);\n\n    SET_VARSIZE(new_text, new_text_size);\n    memcpy(VARDATA(new_text), VARDATA_ANY(arg1), arg1_size);\n    memcpy(VARDATA(new_text) + arg1_size, VARDATA_ANY(arg2), arg2_size);\n    PG_RETURN_TEXT_P(new_text);\n}\n\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE FUNCTION add_one(integer) RETURNS integer\n     AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'add_one'\n     LANGUAGE C STRICT;\n\n-- note overloading of SQL function name \"add_one\"\nCREATE FUNCTION add_one(double precision) RETURNS double precision\n     AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'add_one_float8'\n     LANGUAGE C STRICT;\n\nCREATE FUNCTION makepoint(point, point) RETURNS point\n     AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'makepoint'\n     LANGUAGE C STRICT;\n\nCREATE FUNCTION copytext(text) RETURNS text\n     AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'copytext'\n     LANGUAGE C STRICT;\n\nCREATE FUNCTION concat_text(text, text) RETURNS text\n     AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'concat_text'\n     LANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ngcc -fPIC -c foo.c\ngcc -shared -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ncc +z -c foo.c\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ngcc -fPIC -c foo.c\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nld -b -o foo.sl foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ncc -fPIC -c foo.c\ncc -shared -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ncc -c foo.c\ncc -bundle -flat_namespace -undefined suppress -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ngcc -fPIC -c foo.c\ngcc -shared -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ngcc -fPIC -c foo.c\nld -Bshareable -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ncc -KPIC -c foo.c\ncc -G -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ngcc -fPIC -c foo.c\ngcc -G -o foo.so foo.o\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSELECT name, c_overpaid(emp, 1500) AS overpaid\n    FROM emp\n    WHERE name = 'Bill' OR name = 'Sam';\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n#include \"postgres.h\"\n#include \"executor/executor.h\"  /* for GetAttributeByName() */\n\nPG_MODULE_MAGIC;\n\nPG_FUNCTION_INFO_V1(c_overpaid);\n\nDatum\nc_overpaid(PG_FUNCTION_ARGS)\n{\n    HeapTupleHeader  t = PG_GETARG_HEAPTUPLEHEADER(0);\n    int32            limit = PG_GETARG_INT32(1);\n    bool isnull;\n    Datum salary;\n\n    salary = GetAttributeByName(t, \"salary\", &isnull);\n    if (isnull)\n        PG_RETURN_BOOL(false);\n    /* Alternatively, we might prefer to do PG_RETURN_NULL() for null salary. */\n\n    PG_RETURN_BOOL(DatumGetInt32(salary) > limit);\n}\n\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE FUNCTION c_overpaid(emp, integer) RETURNS boolean\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'c_overpaid'\n    LANGUAGE C STRICT;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n#include \"funcapi.h\"\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nTypeFuncClass get_call_result_type(FunctionCallInfo fcinfo,\n                                   Oid *resultTypeId,\n                                   TupleDesc *resultTupleDesc)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nTupleDesc RelationNameGetTupleDesc(const char *relname)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nTupleDesc TypeGetTupleDesc(Oid typeoid, List *colaliases)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nTupleDesc BlessTupleDesc(TupleDesc tupdesc)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nAttInMetadata *TupleDescGetAttInMetadata(TupleDesc tupdesc)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nHeapTuple heap_form_tuple(TupleDesc tupdesc, Datum *values, bool *isnull)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nHeapTuple BuildTupleFromCStrings(AttInMetadata *attinmeta, char **values)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nHeapTupleGetDatum(HeapTuple tuple)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\ntypedef struct FuncCallContext\n{\n    /*\n     * Number of times we've been called before\n     *\n     * call_cntr is initialized to 0 for you by SRF_FIRSTCALL_INIT(), and\n     * incremented for you every time SRF_RETURN_NEXT() is called.\n     */\n    uint64 call_cntr;\n\n    /*\n     * OPTIONAL maximum number of calls\n     *\n     * max_calls is here for convenience only and setting it is optional.\n     * If not set, you must provide alternative means to know when the\n     * function is done.\n     */\n    uint64 max_calls;\n\n    /*\n     * OPTIONAL pointer to miscellaneous user-provided context information\n     *\n     * user_fctx is for use as a pointer to your own data to retain\n     * arbitrary context information between calls of your function.\n     */\n    void *user_fctx;\n\n    /*\n     * OPTIONAL pointer to struct containing attribute type input metadata\n     *\n     * attinmeta is for use when returning tuples (i.e., composite data types)\n     * and is not used when returning base data types. It is only needed\n     * if you intend to use BuildTupleFromCStrings() to create the return\n     * tuple.\n     */\n    AttInMetadata *attinmeta;\n\n    /*\n     * memory context used for structures that must live for multiple calls\n     *\n     * multi_call_memory_ctx is set by SRF_FIRSTCALL_INIT() for you, and used\n     * by SRF_RETURN_DONE() for cleanup. It is the most appropriate memory\n     * context for any memory that is to be reused across multiple calls\n     * of the SRF.\n     */\n    MemoryContext multi_call_memory_ctx;\n\n    /*\n     * OPTIONAL pointer to struct containing tuple description\n     *\n     * tuple_desc is for use when returning tuples (i.e., composite data types)\n     * and is only needed if you are going to build the tuples with\n     * heap_form_tuple() rather than with BuildTupleFromCStrings().  Note that\n     * the TupleDesc pointer stored here should usually have been run through\n     * BlessTupleDesc() first.\n     */\n    TupleDesc tuple_desc;\n\n} FuncCallContext;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSRF_IS_FIRSTCALL()\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSRF_FIRSTCALL_INIT()\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSRF_PERCALL_SETUP()\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSRF_RETURN_NEXT(funcctx, result)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nSRF_RETURN_DONE(funcctx)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nDatum\nmy_set_returning_function(PG_FUNCTION_ARGS)\n{\n    FuncCallContext  *funcctx;\n    Datum             result;\n    ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n\n    if (SRF_IS_FIRSTCALL())\n    {\n        MemoryContext oldcontext;\n\n        funcctx = SRF_FIRSTCALL_INIT();\n        oldcontext = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);\n        /* One-time setup code appears here: */\n        ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n            ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n        MemoryContextSwitchTo(oldcontext);\n    }\n\n    /* Each-time setup code appears here: */\n    ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n    funcctx = SRF_PERCALL_SETUP();\n    ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n\n    /* this is just one way we might test whether we are done: */\n    if (funcctx->call_cntr < funcctx->max_calls)\n    {\n        /* Here we want to return another item: */\n        ", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\n        SRF_RETURN_NEXT(funcctx, result);\n    }\n    else\n    {\n        /* Here we are done returning items, so just report that fact. */\n        /* (Resist the temptation to put cleanup code here.) */\n        SRF_RETURN_DONE(funcctx);\n    }\n}\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(retcomposite);\n\nDatum\nretcomposite(PG_FUNCTION_ARGS)\n{\n    FuncCallContext     *funcctx;\n    int                  call_cntr;\n    int                  max_calls;\n    TupleDesc            tupdesc;\n    AttInMetadata       *attinmeta;\n\n    /* stuff done only on the first call of the function */\n    if (SRF_IS_FIRSTCALL())\n    {\n        MemoryContext   oldcontext;\n\n        /* create a function context for cross-call persistence */\n        funcctx = SRF_FIRSTCALL_INIT();\n\n        /* switch to memory context appropriate for multiple function calls */\n        oldcontext = MemoryContextSwitchTo(funcctx->multi_call_memory_ctx);\n\n        /* total number of tuples to be returned */\n        funcctx->max_calls = PG_GETARG_UINT32(0);\n\n        /* Build a tuple descriptor for our result type */\n        if (get_call_result_type(fcinfo, NULL, &tupdesc) != TYPEFUNC_COMPOSITE)\n            ereport(ERROR,\n                    (errcode(ERRCODE_FEATURE_NOT_SUPPORTED),\n                     errmsg(\"function returning record called in context \"\n                            \"that cannot accept type record\")));\n\n        /*\n         * generate attribute metadata needed later to produce tuples from raw\n         * C strings\n         */\n        attinmeta = TupleDescGetAttInMetadata(tupdesc);\n        funcctx->attinmeta = attinmeta;\n\n        MemoryContextSwitchTo(oldcontext);\n    }\n\n    /* stuff done on every call of the function */\n    funcctx = SRF_PERCALL_SETUP();\n\n    call_cntr = funcctx->call_cntr;\n    max_calls = funcctx->max_calls;\n    attinmeta = funcctx->attinmeta;\n\n    if (call_cntr < max_calls)    /* do when there is more left to send */\n    {\n        char       **values;\n        HeapTuple    tuple;\n        Datum        result;\n\n        /*\n         * Prepare a values array for building the returned tuple.\n         * This should be an array of C strings which will\n         * be processed later by the type input functions.\n         */\n        values = (char **) palloc(3 * sizeof(char *));\n        values[0] = (char *) palloc(16 * sizeof(char));\n        values[1] = (char *) palloc(16 * sizeof(char));\n        values[2] = (char *) palloc(16 * sizeof(char));\n\n        snprintf(values[0], 16, \"%d\", 1 * PG_GETARG_INT32(1));\n        snprintf(values[1], 16, \"%d\", 2 * PG_GETARG_INT32(1));\n        snprintf(values[2], 16, \"%d\", 3 * PG_GETARG_INT32(1));\n\n        /* build a tuple */\n        tuple = BuildTupleFromCStrings(attinmeta, values);\n\n        /* make the tuple into a datum */\n        result = HeapTupleGetDatum(tuple);\n\n        /* clean up (this is not really necessary) */\n        pfree(values[0]);\n        pfree(values[1]);\n        pfree(values[2]);\n        pfree(values);\n\n        SRF_RETURN_NEXT(funcctx, result);\n    }\n    else    /* do when there is no more left */\n    {\n        SRF_RETURN_DONE(funcctx);\n    }\n}\n\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE TYPE __retcomposite AS (f1 integer, f2 integer, f3 integer);\n\nCREATE OR REPLACE FUNCTION retcomposite(integer, integer)\n    RETURNS SETOF __retcomposite\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "', 'retcomposite'\n    LANGUAGE C IMMUTABLE STRICT;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION retcomposite(IN integer, IN integer,\n    OUT f1 integer, OUT f2 integer, OUT f3 integer)\n    RETURNS SETOF record\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "', 'retcomposite'\n    LANGUAGE C IMMUTABLE STRICT;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nPG_FUNCTION_INFO_V1(make_array);\nDatum\nmake_array(PG_FUNCTION_ARGS)\n{\n    ArrayType  *result;\n    Oid         element_type = get_fn_expr_argtype(fcinfo->flinfo, 0);\n    Datum       element;\n    bool        isnull;\n    int16       typlen;\n    bool        typbyval;\n    char        typalign;\n    int         ndims;\n    int         dims[MAXDIM];\n    int         lbs[MAXDIM];\n\n    if (!OidIsValid(element_type))\n        elog(ERROR, \"could not determine data type of input\");\n\n    /* get the provided element, being careful in case it's NULL */\n    isnull = PG_ARGISNULL(0);\n    if (isnull)\n        element = (Datum) 0;\n    else\n        element = PG_GETARG_DATUM(0);\n\n    /* we have one dimension */\n    ndims = 1;\n    /* and one element */\n    dims[0] = 1;\n    /* and lower bound is 1 */\n    lbs[0] = 1;\n\n    /* get required info about the element type */\n    get_typlenbyvalalign(element_type, &typlen, &typbyval, &typalign);\n\n    /* now build the array */\n    result = construct_md_array(&element, &isnull, ndims, dims, lbs,\n                                element_type, typlen, typbyval, typalign);\n\n    PG_RETURN_ARRAYTYPE_P(result);\n}\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE FUNCTION make_array(anyelement) RETURNS anyarray\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "/funcs', 'make_array'\n    LANGUAGE C IMMUTABLE;\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nvoid RequestAddinShmemSpace(int size)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nvoid RequestNamedLWLockTranche(const char *tranche_name, int num_lwlocks)\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nstatic mystruct *ptr = NULL;\n\nif (!ptr)\n{\n        bool    found;\n\n        LWLockAcquire(AddinShmemInitLock, LW_EXCLUSIVE);\n        ptr = ShmemInitStruct(\"my struct name\", size, &found);\n        if (!found)\n        {\n                initialize contents of shmem area;\n                acquire any requested LWLocks using:\n                ptr->locks = GetNamedLWLockTranche(\"my tranche name\");\n        }\n        LWLockRelease(AddinShmemInitLock);\n}\n", "source": "https://www.postgresql.org/docs/current/xfunc-c.html"},
{"sql": "\nCREATE FUNCTION test(int) RETURNS int\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-overload.html"},
{"sql": "', 'test_1arg'\n    LANGUAGE C;\nCREATE FUNCTION test(int, int) RETURNS int\n    AS '", "source": "https://www.postgresql.org/docs/current/xfunc-overload.html"},
{"sql": "', 'test_2arg'\n    LANGUAGE C;\n", "source": "https://www.postgresql.org/docs/current/xfunc-overload.html"},
{"sql": "\nCREATE FUNCTION square_root(double precision) RETURNS double precision\n    AS 'dsqrt'\n    LANGUAGE internal\n    STRICT;\n", "source": "https://www.postgresql.org/docs/current/xfunc-internal.html"},
{"sql": "\nINSERT INTO mytable VALUES ($1);\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nINSERT INTO $1 VALUES (42);\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno;\n    SELECT 1;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT tf1(17, 100.0);\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno;\n    SELECT balance FROM bank WHERE accountno = tf1.accountno;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION tf1 (accountno integer, debit numeric) RETURNS numeric AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tf1.accountno\n    RETURNING balance;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION add_em(integer, integer) RETURNS float8 AS $$\n    SELECT $1 + $2;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION new_emp() RETURNS emp AS $$\n    SELECT text 'None' AS name,\n        1000.0 AS salary,\n        25 AS age,\n        point '(2,2)' AS cubicle;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION new_emp() RETURNS emp AS $$\n    SELECT ROW('None', 1000.0, 25, '(2,2)')::emp;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE PROCEDURE tp1 (accountno integer, debit numeric, OUT new_balance numeric) AS $$\n    UPDATE bank\n        SET balance = balance - debit\n        WHERE accountno = tp1.accountno\n    RETURNING balance;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCALL tp1(17, 100.0, NULL);\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$\n    SELECT * FROM foo WHERE fooid = $1;\n$$ LANGUAGE SQL;\n\nSELECT * FROM getfoo(1) AS t1;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE TABLE tab (y int, z int);\nINSERT INTO tab VALUES (1, 2), (3, 4), (5, 6), (7, 8);\n\nCREATE FUNCTION sum_n_product_with_tab (x int, OUT sum int, OUT product int)\nRETURNS SETOF record\nAS $$\n    SELECT $1 + tab.y, $1 * tab.y FROM tab;\n$$ LANGUAGE SQL;\n\nSELECT * FROM sum_n_product_with_tab(10);\n sum | product\n-----+---------\n  11 |      10\n  13 |      30\n  15 |      50\n  17 |      70\n(4 rows)\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT x, generate_series(1,5) AS g FROM tab;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT x, g FROM tab, LATERAL generate_series(1,5) AS g;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT srf1(srf2(x), srf3(y)), srf4(srf5(z)) FROM tab;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT x, CASE WHEN x > 0 THEN generate_series(1, 5) ELSE 0 END FROM tab;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT x, CASE WHEN y > 0 THEN generate_series(1, z) ELSE 5 END FROM tab;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION case_generate_series(cond bool, start int, fin int, els int)\n  RETURNS SETOF int AS $$\nBEGIN\n  IF cond THEN\n    RETURN QUERY SELECT generate_series(start, fin);\n  ELSE\n    RETURN QUERY SELECT els;\n  END IF;\nEND$$ LANGUAGE plpgsql;\n\nSELECT x, case_generate_series(y > 0, 1, z, 5) FROM tab;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION sum_n_product_with_tab (x int)\nRETURNS TABLE(sum int, product int) AS $$\n    SELECT $1 + tab.y, $1 * tab.y FROM tab;\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT anyleast('abc'::text, 'ABC');\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nSELECT anyleast('abc'::text, 'ABC' COLLATE \"C\");\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nCREATE FUNCTION anyleast (VARIADIC anyarray) RETURNS anyelement AS $$\n    SELECT min($1[i] COLLATE \"en_US\") FROM generate_subscripts($1, 1) g(i);\n$$ LANGUAGE SQL;\n", "source": "https://www.postgresql.org/docs/current/xfunc-sql.html"},
{"sql": "\nmake -C src/bin check PROVE_FLAGS='--timer'\n", "source": "https://www.postgresql.org/docs/current/regress-tap.html"},
{"sql": "\nmake check PROVE_TESTS='t/001_test1.pl t/003_test3.pl'\n", "source": "https://www.postgresql.org/docs/current/regress-tap.html"},
{"sql": "\nfloat4:out:hppa.*-hp-hpux10.*=float4-misrounded-input.out\n", "source": "https://www.postgresql.org/docs/current/regress-variant.html"},
{"sql": "\nmake check LANG=de_DE.utf8\n", "source": "https://www.postgresql.org/docs/current/regress-evaluation.html"},
{"sql": "\nmake check NO_LOCALE=1\n", "source": "https://www.postgresql.org/docs/current/regress-evaluation.html"},
{"sql": "\ndiff results/random.out expected/random.out\n", "source": "https://www.postgresql.org/docs/current/regress-evaluation.html"},
{"sql": "\nmake check-world PG_TEST_EXTRA='kerberos ldap ssl'\n", "source": "https://www.postgresql.org/docs/current/regress-run.html"},
{"sql": "\n#include \"postgres.h\"\n#include \"commands/event_trigger.h\"\n\n\nPG_MODULE_MAGIC;\n\nPG_FUNCTION_INFO_V1(noddl);\n\nDatum\nnoddl(PG_FUNCTION_ARGS)\n{\n    EventTriggerData *trigdata;\n\n    if (!CALLED_AS_EVENT_TRIGGER(fcinfo))  /* internal error */\n        elog(ERROR, \"not fired by event trigger manager\");\n\n    trigdata = (EventTriggerData *) fcinfo->context;\n\n    ereport(ERROR,\n        (errcode(ERRCODE_INSUFFICIENT_PRIVILEGE),\n                 errmsg(\"command \\\"%s\\\" denied\", trigdata->tag)));\n\n    PG_RETURN_NULL();\n}\n", "source": "https://www.postgresql.org/docs/current/event-trigger-example.html"},
{"sql": "\nCREATE FUNCTION noddl() RETURNS event_trigger\n    AS 'noddl' LANGUAGE C;\n\nCREATE EVENT TRIGGER noddl ON ddl_command_start\n    EXECUTE FUNCTION noddl();\n", "source": "https://www.postgresql.org/docs/current/event-trigger-example.html"},
{"sql": "\nBEGIN;\nALTER EVENT TRIGGER noddl DISABLE;\nCREATE TABLE foo (id serial);\nALTER EVENT TRIGGER noddl ENABLE;\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/event-trigger-example.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION no_rewrite()\n RETURNS event_trigger\n LANGUAGE plpgsql AS\n$$\n---\n--- Implement local Table Rewriting policy:\n---   public.foo is not allowed rewriting, ever\n---   other tables are only allowed rewriting between 1am and 6am\n---   unless they have more than 100 blocks\n---\nDECLARE\n  table_oid oid := pg_event_trigger_table_rewrite_oid();\n  current_hour integer := extract('hour' from current_time);\n  pages integer;\n  max_pages integer := 100;\nBEGIN\n  IF pg_event_trigger_table_rewrite_oid() = 'public.foo'::regclass\n  THEN\n        RAISE EXCEPTION 'you''re not allowed to rewrite the table %',\n                        table_oid::regclass;\n  END IF;\n\n  SELECT INTO pages relpages FROM pg_class WHERE oid = table_oid;\n  IF pages > max_pages\n  THEN\n        RAISE EXCEPTION 'rewrites only allowed for table with less than % pages',\n                        max_pages;\n  END IF;\n\n  IF current_hour NOT BETWEEN 1 AND 6\n  THEN\n        RAISE EXCEPTION 'rewrites only allowed between 1am and 6am';\n  END IF;\nEND;\n$$;\n\nCREATE EVENT TRIGGER no_rewrite_allowed\n                  ON table_rewrite\n   EXECUTE FUNCTION no_rewrite();\n", "source": "https://www.postgresql.org/docs/current/event-trigger-table-rewrite-example.html"},
{"sql": "\nCALLED_AS_EVENT_TRIGGER(fcinfo)\n", "source": "https://www.postgresql.org/docs/current/event-trigger-interface.html"},
{"sql": "\n((fcinfo)->context != NULL && IsA((fcinfo)->context, EventTriggerData))\n", "source": "https://www.postgresql.org/docs/current/event-trigger-interface.html"},
{"sql": "\ntypedef struct EventTriggerData\n{\n    NodeTag     type;\n    const char *event;      /* event name */\n    Node       *parsetree;  /* parse tree */\n    CommandTag  tag;        /* command tag */\n} EventTriggerData;\n", "source": "https://www.postgresql.org/docs/current/event-trigger-interface.html"},
{"sql": "\nCREATE [ OR REPLACE ] RULE ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": " ]\n    DO [ ALSO | INSTEAD ] { NOTHING | ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE TABLE shoelace_log (\n    sl_name    text,          -- shoelace changed\n    sl_avail   integer,       -- new available value\n    log_who    text,          -- who did it\n    log_when   timestamp      -- when\n);\n\nCREATE RULE log_shoelace AS ON UPDATE TO shoelace_data\n    WHERE NEW.sl_avail <> OLD.sl_avail\n    DO INSERT INTO shoelace_log VALUES (\n                                    NEW.sl_name,\n                                    NEW.sl_avail,\n                                    current_user,\n                                    current_timestamp\n                                );\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data SET sl_avail = 6 WHERE sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace_log;\n\n sl_name | sl_avail | log_who | log_when                        \n---------+----------+---------+----------------------------------\n sl7     |        6 | Al      | Tue Oct 20 16:14:45 1998 MET DST\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data SET sl_avail = 6\n  FROM shoelace_data shoelace_data\n WHERE shoelace_data.sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nNEW.sl_avail <> OLD.sl_avail\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       new.sl_name, new.sl_avail,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE new.sl_avail <> old.sl_avail\n   ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": ",\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": " <> old.sl_avail\n   AND shoelace_data.sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, 6,\n       current_user, current_timestamp )\n  FROM shoelace_data new, shoelace_data old,\n       shoelace_data shoelace_data\n WHERE 6 <> ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\n   AND shoelace_data.sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, 6,\n       current_user, current_timestamp )\n  FROM shoelace_data\n WHERE 6 <> shoelace_data.sl_avail\n   AND shoelace_data.sl_name = 'sl7';\n\nUPDATE shoelace_data SET sl_avail = 6\n WHERE sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data SET sl_color = 'green'\n WHERE sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log VALUES (\n       shoelace_data.sl_name, ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": ",\n       current_user, current_timestamp )\n  FROM shoelace_data\n WHERE ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": " <> shoelace_data.sl_avail\n   AND shoelace_data.sl_name = 'sl7';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data SET sl_avail = 0\n WHERE sl_color = 'black';\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log\nSELECT shoelace_data.sl_name, 0,\n       current_user, current_timestamp\n  FROM shoelace_data\n WHERE 0 <> shoelace_data.sl_avail\n   AND ", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE RULE shoe_ins_protect AS ON INSERT TO shoe\n    DO INSTEAD NOTHING;\nCREATE RULE shoe_upd_protect AS ON UPDATE TO shoe\n    DO INSTEAD NOTHING;\nCREATE RULE shoe_del_protect AS ON DELETE TO shoe\n    DO INSTEAD NOTHING;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE RULE shoelace_ins AS ON INSERT TO shoelace\n    DO INSTEAD\n    INSERT INTO shoelace_data VALUES (\n           NEW.sl_name,\n           NEW.sl_avail,\n           NEW.sl_color,\n           NEW.sl_len,\n           NEW.sl_unit\n    );\n\nCREATE RULE shoelace_upd AS ON UPDATE TO shoelace\n    DO INSTEAD\n    UPDATE shoelace_data\n       SET sl_name = NEW.sl_name,\n           sl_avail = NEW.sl_avail,\n           sl_color = NEW.sl_color,\n           sl_len = NEW.sl_len,\n           sl_unit = NEW.sl_unit\n     WHERE sl_name = OLD.sl_name;\n\nCREATE RULE shoelace_del AS ON DELETE TO shoelace\n    DO INSTEAD\n    DELETE FROM shoelace_data\n     WHERE sl_name = OLD.sl_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE RULE shoelace_ins AS ON INSERT TO shoelace\n    DO INSTEAD\n    INSERT INTO shoelace_data VALUES (\n           NEW.sl_name,\n           NEW.sl_avail,\n           NEW.sl_color,\n           NEW.sl_len,\n           NEW.sl_unit\n    )\n    RETURNING\n           shoelace_data.*,\n           (SELECT shoelace_data.sl_len * u.un_fact\n            FROM unit u WHERE shoelace_data.sl_unit = u.un_name);\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE TABLE shoelace_arrive (\n    arr_name    text,\n    arr_quant   integer\n);\n\nCREATE TABLE shoelace_ok (\n    ok_name     text,\n    ok_quant    integer\n);\n\nCREATE RULE shoelace_ok_ins AS ON INSERT TO shoelace_ok\n    DO INSTEAD\n    UPDATE shoelace\n       SET sl_avail = sl_avail + NEW.ok_quant\n     WHERE sl_name = NEW.ok_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace_arrive;\n\n arr_name | arr_quant\n----------+-----------\n sl3      |        10\n sl6      |        20\n sl8      |        20\n(3 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace;\n\n sl_name  | sl_avail | sl_color | sl_len | sl_unit | sl_len_cm\n----------+----------+----------+--------+---------+-----------\n sl1      |        5 | black    |     80 | cm      |        80\n sl2      |        6 | black    |    100 | cm      |       100\n sl7      |        6 | brown    |     60 | cm      |        60\n sl3      |        0 | black    |     35 | inch    |      88.9\n sl4      |        8 | black    |     40 | inch    |     101.6\n sl8      |        1 | brown    |     40 | inch    |     101.6\n sl5      |        4 | brown    |      1 | m       |       100\n sl6      |        0 | brown    |    0.9 | m       |        90\n(8 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_ok SELECT * FROM shoelace_arrive;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace ORDER BY sl_name;\n\n sl_name  | sl_avail | sl_color | sl_len | sl_unit | sl_len_cm\n----------+----------+----------+--------+---------+-----------\n sl1      |        5 | black    |     80 | cm      |        80\n sl2      |        6 | black    |    100 | cm      |       100\n sl7      |        6 | brown    |     60 | cm      |        60\n sl4      |        8 | black    |     40 | inch    |     101.6\n sl3      |       10 | black    |     35 | inch    |      88.9\n sl8      |       21 | brown    |     40 | inch    |     101.6\n sl5      |        4 | brown    |      1 | m       |       100\n sl6      |       20 | brown    |    0.9 | m       |        90\n(8 rows)\n\nSELECT * FROM shoelace_log;\n\n sl_name | sl_avail | log_who| log_when                        \n---------+----------+--------+----------------------------------\n sl7     |        6 | Al     | Tue Oct 20 19:14:45 1998 MET DST\n sl3     |       10 | Al     | Tue Oct 20 19:25:16 1998 MET DST\n sl6     |       20 | Al     | Tue Oct 20 19:25:16 1998 MET DST\n sl8     |       21 | Al     | Tue Oct 20 19:25:16 1998 MET DST\n(4 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_ok\nSELECT shoelace_arrive.arr_name, shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace\n   SET sl_avail = shoelace.sl_avail + shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace\n WHERE shoelace.sl_name = shoelace_arrive.arr_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data\n   SET sl_name = shoelace.sl_name,\n       sl_avail = shoelace.sl_avail + shoelace_arrive.arr_quant,\n       sl_color = shoelace.sl_color,\n       sl_len = shoelace.sl_len,\n       sl_unit = shoelace.sl_unit\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data\n WHERE shoelace.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = shoelace.sl_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nUPDATE shoelace_data\n   SET sl_name = s.sl_name,\n       sl_avail = s.sl_avail + shoelace_arrive.arr_quant,\n       sl_color = s.sl_color,\n       sl_len = s.sl_len,\n       sl_unit = s.sl_unit\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data,\n       shoelace old, shoelace new,\n       shoelace_data s, unit u\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log\nSELECT s.sl_name,\n       s.sl_avail + shoelace_arrive.arr_quant,\n       current_user,\n       current_timestamp\n  FROM shoelace_arrive shoelace_arrive, shoelace_ok shoelace_ok,\n       shoelace_ok old, shoelace_ok new,\n       shoelace shoelace, shoelace old,\n       shoelace new, shoelace_data shoelace_data,\n       shoelace old, shoelace new,\n       shoelace_data s, unit u,\n       shoelace_data old, shoelace_data new\n       shoelace_log shoelace_log\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name\n   AND (s.sl_avail + shoelace_arrive.arr_quant) <> s.sl_avail;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace_log\nSELECT s.sl_name,\n       s.sl_avail + shoelace_arrive.arr_quant,\n       current_user,\n       current_timestamp\n  FROM shoelace_arrive shoelace_arrive, shoelace_data shoelace_data,\n       shoelace_data s\n WHERE s.sl_name = shoelace_arrive.arr_name\n   AND shoelace_data.sl_name = s.sl_name\n   AND s.sl_avail + shoelace_arrive.arr_quant <> s.sl_avail;\n\nUPDATE shoelace_data\n   SET sl_avail = shoelace_data.sl_avail + shoelace_arrive.arr_quant\n  FROM shoelace_arrive shoelace_arrive,\n       shoelace_data shoelace_data,\n       shoelace_data s\n WHERE s.sl_name = shoelace_arrive.sl_name\n   AND shoelace_data.sl_name = s.sl_name;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nINSERT INTO shoelace VALUES ('sl9', 0, 'pink', 35.0, 'inch', 0.0);\nINSERT INTO shoelace VALUES ('sl10', 1000, 'magenta', 40.0, 'inch', 0.0);\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE VIEW shoelace_mismatch AS\n    SELECT * FROM shoelace WHERE NOT EXISTS\n        (SELECT shoename FROM shoe WHERE slcolor = sl_color);\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace_mismatch;\n\n sl_name | sl_avail | sl_color | sl_len | sl_unit | sl_len_cm\n---------+----------+----------+--------+---------+-----------\n sl9     |        0 | pink     |     35 | inch    |      88.9\n sl10    |     1000 | magenta  |     40 | inch    |     101.6\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE VIEW shoelace_can_delete AS\n    SELECT * FROM shoelace_mismatch WHERE sl_avail = 0;\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nDELETE FROM shoelace WHERE EXISTS\n    (SELECT * FROM shoelace_can_delete\n             WHERE sl_name = shoelace.sl_name);\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nSELECT * FROM shoelace;\n\n sl_name | sl_avail | sl_color | sl_len | sl_unit | sl_len_cm\n---------+----------+----------+--------+---------+-----------\n sl1     |        5 | black    |     80 | cm      |        80\n sl2     |        6 | black    |    100 | cm      |       100\n sl7     |        6 | brown    |     60 | cm      |        60\n sl4     |        8 | black    |     40 | inch    |     101.6\n sl3     |       10 | black    |     35 | inch    |      88.9\n sl8     |       21 | brown    |     40 | inch    |     101.6\n sl10    |     1000 | magenta  |     40 | inch    |     101.6\n sl5     |        4 | brown    |      1 | m       |       100\n sl6     |       20 | brown    |    0.9 | m       |        90\n(9 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-update.html"},
{"sql": "\nCREATE MATERIALIZED VIEW mymatview AS SELECT * FROM mytab;\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nCREATE TABLE mymatview AS SELECT * FROM mytab;\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nREFRESH MATERIALIZED VIEW mymatview;\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nCREATE TABLE invoice (\n    invoice_no    integer        PRIMARY KEY,\n    seller_no     integer,       -- ID of salesperson\n    invoice_date  date,          -- date of sale\n    invoice_amt   numeric(13,2)  -- amount of sale\n);\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nCREATE MATERIALIZED VIEW sales_summary AS\n  SELECT\n      seller_no,\n      invoice_date,\n      sum(invoice_amt)::numeric(13,2) as sales_amt\n    FROM invoice\n    WHERE invoice_date < CURRENT_DATE\n    GROUP BY\n      seller_no,\n      invoice_date;\n\nCREATE UNIQUE INDEX sales_summary_seller\n  ON sales_summary (seller_no, invoice_date);\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nREFRESH MATERIALIZED VIEW sales_summary;\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nCREATE EXTENSION file_fdw;\nCREATE SERVER local_file FOREIGN DATA WRAPPER file_fdw;\nCREATE FOREIGN TABLE words (word text NOT NULL)\n  SERVER local_file\n  OPTIONS (filename '/usr/share/dict/words');\nCREATE MATERIALIZED VIEW wrd AS SELECT * FROM words;\nCREATE UNIQUE INDEX wrd_word ON wrd (word);\nCREATE EXTENSION pg_trgm;\nCREATE INDEX wrd_trgm ON wrd USING gist (word gist_trgm_ops);\nVACUUM ANALYZE wrd;\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nSELECT count(*) FROM words WHERE word = 'caterpiler';\n\n count \n-------\n     0\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\n Aggregate  (cost=21763.99..21764.00 rows=1 width=0) (actual time=188.180..188.181 rows=1 loops=1)\n   ->  Foreign Scan on words  (cost=0.00..21761.41 rows=1032 width=0) (actual time=188.177..188.177 rows=0 loops=1)\n         Filter: (word = 'caterpiler'::text)\n         Rows Removed by Filter: 479829\n         Foreign File: /usr/share/dict/words\n         Foreign File Size: 4953699\n Planning time: 0.118 ms\n Execution time: 188.273 ms\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\n Aggregate  (cost=4.44..4.45 rows=1 width=0) (actual time=0.042..0.042 rows=1 loops=1)\n   ->  Index Only Scan using wrd_word on wrd  (cost=0.42..4.44 rows=1 width=0) (actual time=0.039..0.039 rows=0 loops=1)\n         Index Cond: (word = 'caterpiler'::text)\n         Heap Fetches: 0\n Planning time: 0.164 ms\n Execution time: 0.117 ms\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nSELECT word FROM words ORDER BY word <-> 'caterpiler' LIMIT 10;\n\n     word     \n---------------\n cater\n caterpillar\n Caterpillar\n caterpillars\n caterpillar's\n Caterpillar's\n caterer\n caterer's\n caters\n catered\n(10 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\n Limit  (cost=11583.61..11583.64 rows=10 width=32) (actual time=1431.591..1431.594 rows=10 loops=1)\n   ->  Sort  (cost=11583.61..11804.76 rows=88459 width=32) (actual time=1431.589..1431.591 rows=10 loops=1)\n         Sort Key: ((word <-> 'caterpiler'::text))\n         Sort Method: top-N heapsort  Memory: 25kB\n         ->  Foreign Scan on words  (cost=0.00..9672.05 rows=88459 width=32) (actual time=0.057..1286.455 rows=479829 loops=1)\n               Foreign File: /usr/share/dict/words\n               Foreign File Size: 4953699\n Planning time: 0.128 ms\n Execution time: 1431.679 ms\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\n Limit  (cost=0.29..1.06 rows=10 width=10) (actual time=187.222..188.257 rows=10 loops=1)\n   ->  Index Scan using wrd_trgm on wrd  (cost=0.29..37020.87 rows=479829 width=10) (actual time=187.219..188.252 rows=10 loops=1)\n         Order By: (word <-> 'caterpiler'::text)\n Planning time: 0.196 ms\n Execution time: 198.640 ms\n", "source": "https://www.postgresql.org/docs/current/rules-materializedviews.html"},
{"sql": "\nCREATE TABLE phone_data (person text, phone text, private boolean);\nCREATE VIEW phone_number AS\n    SELECT person, CASE WHEN NOT private THEN phone END AS phone\n    FROM phone_data;\nGRANT SELECT ON phone_number TO assistant;\n", "source": "https://www.postgresql.org/docs/current/rules-privileges.html"},
{"sql": "\nCREATE VIEW phone_number AS\n    SELECT person, phone FROM phone_data WHERE phone NOT LIKE '412%';\n", "source": "https://www.postgresql.org/docs/current/rules-privileges.html"},
{"sql": "\nCREATE FUNCTION tricky(text, text) RETURNS bool AS $$\nBEGIN\n    RAISE NOTICE '% => %', $1, $2;\n    RETURN true;\nEND;\n$$ LANGUAGE plpgsql COST 0.0000000000000000000001;\n\nSELECT * FROM phone_number WHERE tricky(person, phone);\n", "source": "https://www.postgresql.org/docs/current/rules-privileges.html"},
{"sql": "\nCREATE VIEW phone_number WITH (security_barrier) AS\n    SELECT person, phone FROM phone_data WHERE phone NOT LIKE '412%';\n", "source": "https://www.postgresql.org/docs/current/rules-privileges.html"},
{"sql": "\nCREATE VIEW myview AS SELECT * FROM mytab;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nCREATE TABLE myview (", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": ");\nCREATE RULE \"_RETURN\" AS ON SELECT TO myview DO INSTEAD\n    SELECT * FROM mytab;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nCREATE TABLE shoe_data (\n    shoename   text,          -- primary key\n    sh_avail   integer,       -- available number of pairs\n    slcolor    text,          -- preferred shoelace color\n    slminlen   real,          -- minimum shoelace length\n    slmaxlen   real,          -- maximum shoelace length\n    slunit     text           -- length unit\n);\n\nCREATE TABLE shoelace_data (\n    sl_name    text,          -- primary key\n    sl_avail   integer,       -- available number of pairs\n    sl_color   text,          -- shoelace color\n    sl_len     real,          -- shoelace length\n    sl_unit    text           -- length unit\n);\n\nCREATE TABLE unit (\n    un_name    text,          -- primary key\n    un_fact    real           -- factor to transform to cm\n);\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nCREATE VIEW shoe AS\n    SELECT sh.shoename,\n           sh.sh_avail,\n           sh.slcolor,\n           sh.slminlen,\n           sh.slminlen * un.un_fact AS slminlen_cm,\n           sh.slmaxlen,\n           sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n           sh.slunit\n      FROM shoe_data sh, unit un\n     WHERE sh.slunit = un.un_name;\n\nCREATE VIEW shoelace AS\n    SELECT s.sl_name,\n           s.sl_avail,\n           s.sl_color,\n           s.sl_len,\n           s.sl_unit,\n           s.sl_len * u.un_fact AS sl_len_cm\n      FROM shoelace_data s, unit u\n     WHERE s.sl_unit = u.un_name;\n\nCREATE VIEW shoe_ready AS\n    SELECT rsh.shoename,\n           rsh.sh_avail,\n           rsl.sl_name,\n           rsl.sl_avail,\n           least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n      FROM shoe rsh, shoelace rsl\n     WHERE rsl.sl_color = rsh.slcolor\n       AND rsl.sl_len_cm >= rsh.slminlen_cm\n       AND rsl.sl_len_cm <= rsh.slmaxlen_cm;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nINSERT INTO unit VALUES ('cm', 1.0);\nINSERT INTO unit VALUES ('m', 100.0);\nINSERT INTO unit VALUES ('inch', 2.54);\n\nINSERT INTO shoe_data VALUES ('sh1', 2, 'black', 70.0, 90.0, 'cm');\nINSERT INTO shoe_data VALUES ('sh2', 0, 'black', 30.0, 40.0, 'inch');\nINSERT INTO shoe_data VALUES ('sh3', 4, 'brown', 50.0, 65.0, 'cm');\nINSERT INTO shoe_data VALUES ('sh4', 3, 'brown', 40.0, 50.0, 'inch');\n\nINSERT INTO shoelace_data VALUES ('sl1', 5, 'black', 80.0, 'cm');\nINSERT INTO shoelace_data VALUES ('sl2', 6, 'black', 100.0, 'cm');\nINSERT INTO shoelace_data VALUES ('sl3', 0, 'black', 35.0 , 'inch');\nINSERT INTO shoelace_data VALUES ('sl4', 8, 'black', 40.0 , 'inch');\nINSERT INTO shoelace_data VALUES ('sl5', 4, 'brown', 1.0 , 'm');\nINSERT INTO shoelace_data VALUES ('sl6', 0, 'brown', 0.9 , 'm');\nINSERT INTO shoelace_data VALUES ('sl7', 7, 'brown', 60 , 'cm');\nINSERT INTO shoelace_data VALUES ('sl8', 1, 'brown', 40 , 'inch');\n\nSELECT * FROM shoelace;\n\n sl_name   | sl_avail | sl_color | sl_len | sl_unit | sl_len_cm\n-----------+----------+----------+--------+---------+-----------\n sl1       |        5 | black    |     80 | cm      |        80\n sl2       |        6 | black    |    100 | cm      |       100\n sl7       |        7 | brown    |     60 | cm      |        60\n sl3       |        0 | black    |     35 | inch    |      88.9\n sl4       |        8 | black    |     40 | inch    |     101.6\n sl8       |        1 | brown    |     40 | inch    |     101.6\n sl5       |        4 | brown    |      1 | m       |       100\n sl6       |        0 | brown    |    0.9 | m       |        90\n(8 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT shoelace.sl_name, shoelace.sl_avail,\n       shoelace.sl_color, shoelace.sl_len,\n       shoelace.sl_unit, shoelace.sl_len_cm\n  FROM shoelace shoelace;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT s.sl_name, s.sl_avail,\n       s.sl_color, s.sl_len, s.sl_unit,\n       s.sl_len * u.un_fact AS sl_len_cm\n  FROM shoelace old, shoelace new,\n       shoelace_data s, unit u\n WHERE s.sl_unit = u.un_name;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT shoelace.sl_name, shoelace.sl_avail,\n       shoelace.sl_color, shoelace.sl_len,\n       shoelace.sl_unit, shoelace.sl_len_cm\n  FROM (SELECT s.sl_name,\n               s.sl_avail,\n               s.sl_color,\n               s.sl_len,\n               s.sl_unit,\n               s.sl_len * u.un_fact AS sl_len_cm\n          FROM shoelace_data s, unit u\n         WHERE s.sl_unit = u.un_name) shoelace;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT * FROM shoe_ready WHERE total_avail >= 2;\n\n shoename | sh_avail | sl_name | sl_avail | total_avail\n----------+----------+---------+----------+-------------\n sh1      |        2 | sl1     |        5 |           2\n sh3      |        4 | sl7     |        7 |           4\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM shoe_ready shoe_ready\n WHERE shoe_ready.total_avail >= 2;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM (SELECT rsh.shoename,\n               rsh.sh_avail,\n               rsl.sl_name,\n               rsl.sl_avail,\n               least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n          FROM shoe rsh, shoelace rsl\n         WHERE rsl.sl_color = rsh.slcolor\n           AND rsl.sl_len_cm >= rsh.slminlen_cm\n           AND rsl.sl_len_cm <= rsh.slmaxlen_cm) shoe_ready\n WHERE shoe_ready.total_avail >= 2;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT shoe_ready.shoename, shoe_ready.sh_avail,\n       shoe_ready.sl_name, shoe_ready.sl_avail,\n       shoe_ready.total_avail\n  FROM (SELECT rsh.shoename,\n               rsh.sh_avail,\n               rsl.sl_name,\n               rsl.sl_avail,\n               least(rsh.sh_avail, rsl.sl_avail) AS total_avail\n          FROM (SELECT sh.shoename,\n                       sh.sh_avail,\n                       sh.slcolor,\n                       sh.slminlen,\n                       sh.slminlen * un.un_fact AS slminlen_cm,\n                       sh.slmaxlen,\n                       sh.slmaxlen * un.un_fact AS slmaxlen_cm,\n                       sh.slunit\n                  FROM shoe_data sh, unit un\n                 WHERE sh.slunit = un.un_name) rsh,\n               (SELECT s.sl_name,\n                       s.sl_avail,\n                       s.sl_color,\n                       s.sl_len,\n                       s.sl_unit,\n                       s.sl_len * u.un_fact AS sl_len_cm\n                  FROM shoelace_data s, unit u\n                 WHERE s.sl_unit = u.un_name) rsl\n         WHERE rsl.sl_color = rsh.slcolor\n           AND rsl.sl_len_cm >= rsh.slminlen_cm\n           AND rsl.sl_len_cm <= rsh.slmaxlen_cm) shoe_ready\n WHERE shoe_ready.total_avail > 2;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT t2.b FROM t1, t2 WHERE t1.a = t2.a;\n\nUPDATE t1 SET b = t2.b FROM t2 WHERE t1.a = t2.a;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nUPDATE t1 SET a = t1.a, b = t2.b FROM t2 WHERE t1.a = t2.a;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT t1.a, t2.b FROM t1, t2 WHERE t1.a = t2.a;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nSELECT t1.a, t2.b, t1.ctid FROM t1, t2 WHERE t1.a = t2.a;\n", "source": "https://www.postgresql.org/docs/current/rules-views.html"},
{"sql": "\nINSERT INTO foo (foo) VALUES (foo(foo));\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\nINSERT INTO dest (col) SELECT foo + bar FROM src;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\n#variable_conflict error\n#variable_conflict use_variable\n#variable_conflict use_column\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\nCREATE FUNCTION stamp_user(id int, comment text) RETURNS void AS $$\n    #variable_conflict use_variable\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = curtime, comment = comment\n          WHERE users.id = id;\n    END;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\nCREATE FUNCTION stamp_user(id int, comment text) RETURNS void AS $$\n    <<fn>>\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = fn.curtime, comment = stamp_user.comment\n          WHERE users.id = stamp_user.id;\n    END;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\nCREATE FUNCTION logfunc1(logtxt text) RETURNS void AS $$\n    BEGIN\n        INSERT INTO logtable VALUES (logtxt, 'now');\n    END;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\nCREATE FUNCTION logfunc2(logtxt text) RETURNS void AS $$\n    DECLARE\n        curtime timestamp;\n    BEGIN\n        curtime := 'now';\n        INSERT INTO logtable VALUES (logtxt, curtime);\n    END;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-implementation.html"},
{"sql": "\n\\i filename.sql\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := ''Blah'';\nSELECT * FROM users WHERE f_name=''foobar'';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := 'Blah';\nSELECT * FROM users WHERE f_name='foobar';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || '' AND name LIKE ''''foobar'''' AND xyz''\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || $$ AND name LIKE 'foobar' AND xyz$$\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || '' AND name LIKE ''''foobar''''''\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || $$ AND name LIKE 'foobar'$$\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || '' if v_'' ||\n    referrer_keys.kind || '' like ''''''''''\n    || referrer_keys.key_string || ''''''''''\n    then return ''''''  || referrer_keys.referrer_type\n    || ''''''; end if;'';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\na_output := a_output || $$ if v_$$ || referrer_keys.kind || $$ like '$$\n    || referrer_keys.key_string || $$'\n    then return '$$  || referrer_keys.referrer_type\n    || $$'; end if;$$;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\nSET plpgsql.extra_warnings TO 'shadowed_variables';\n\nCREATE FUNCTION foo(f1 int) RETURNS int AS $$\nDECLARE\nf1 int;\nBEGIN\nRETURN f1;\nEND;\n$$ LANGUAGE plpgsql;\nWARNING:  variable \"f1\" shadows a previously defined variable\nLINE 3: f1 int;\n        ^\nCREATE FUNCTION\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\nSET plpgsql.extra_warnings TO 'strict_multi_assignment';\n\nCREATE OR REPLACE FUNCTION public.foo()\n RETURNS void\n LANGUAGE plpgsql\nAS $$\nDECLARE\n  x int;\n  y int;\nBEGIN\n  SELECT 1 INTO x, y;\n  SELECT 1, 2 INTO x, y;\n  SELECT 1, 2, 3 INTO x, y;\nEND;\n$$;\n\nSELECT foo();\nWARNING:  number of source and target fields in assignment does not match\nDETAIL:  strict_multi_assignment check of extra_warnings is active.\nHINT:  Make sure the query returns the exact list of columns.\nWARNING:  number of source and target fields in assignment does not match\nDETAIL:  strict_multi_assignment check of extra_warnings is active.\nHINT:  Make sure the query returns the exact list of columns.\n\n foo \n-----\n \n(1 row)\n", "source": "https://www.postgresql.org/docs/current/plpgsql-development-tips.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION cs_fmt_browser_version(v_name varchar2,\n                                                  v_version varchar2)\nRETURN varchar2 IS\nBEGIN\n    IF v_version IS NULL THEN\n        RETURN v_name;\n    END IF;\n    RETURN v_name || '/' || v_version;\nEND;\n/\nshow errors;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION cs_fmt_browser_version(v_name varchar,\n                                                  v_version varchar)\nRETURNS varchar AS $$\nBEGIN\n    IF v_version IS NULL THEN\n        RETURN v_name;\n    END IF;\n    RETURN v_name || '/' || v_version;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE PROCEDURE cs_update_referrer_type_proc IS\n    CURSOR referrer_keys IS\n        SELECT * FROM cs_referrer_keys\n        ORDER BY try_order;\n    func_cmd VARCHAR(4000);\nBEGIN\n    func_cmd := 'CREATE OR REPLACE FUNCTION cs_find_referrer_type(v_host IN VARCHAR2,\n                 v_domain IN VARCHAR2, v_url IN VARCHAR2) RETURN VARCHAR2 IS BEGIN';\n\n    FOR referrer_key IN referrer_keys LOOP\n        func_cmd := func_cmd ||\n          ' IF v_' || referrer_key.kind\n          || ' LIKE ''' || referrer_key.key_string\n          || ''' THEN RETURN ''' || referrer_key.referrer_type\n          || '''; END IF;';\n    END LOOP;\n\n    func_cmd := func_cmd || ' RETURN NULL; END;';\n\n    EXECUTE IMMEDIATE func_cmd;\nEND;\n/\nshow errors;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE PROCEDURE cs_update_referrer_type_proc() AS $func$\nDECLARE\n    referrer_keys CURSOR IS\n        SELECT * FROM cs_referrer_keys\n        ORDER BY try_order;\n    func_body text;\n    func_cmd text;\nBEGIN\n    func_body := 'BEGIN';\n\n    FOR referrer_key IN referrer_keys LOOP\n        func_body := func_body ||\n          ' IF v_' || referrer_key.kind\n          || ' LIKE ' || quote_literal(referrer_key.key_string)\n          || ' THEN RETURN ' || quote_literal(referrer_key.referrer_type)\n          || '; END IF;' ;\n    END LOOP;\n\n    func_body := func_body || ' RETURN NULL; END;';\n\n    func_cmd :=\n      'CREATE OR REPLACE FUNCTION cs_find_referrer_type(v_host varchar,\n                                                        v_domain varchar,\n                                                        v_url varchar)\n        RETURNS varchar AS '\n      || quote_literal(func_body)\n      || ' LANGUAGE plpgsql;' ;\n\n    EXECUTE func_cmd;\nEND;\n$func$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE PROCEDURE cs_parse_url(\n    v_url IN VARCHAR2,\n    v_host OUT VARCHAR2,  -- This will be passed back\n    v_path OUT VARCHAR2,  -- This one too\n    v_query OUT VARCHAR2) -- And this one\nIS\n    a_pos1 INTEGER;\n    a_pos2 INTEGER;\nBEGIN\n    v_host := NULL;\n    v_path := NULL;\n    v_query := NULL;\n    a_pos1 := instr(v_url, '//');\n\n    IF a_pos1 = 0 THEN\n        RETURN;\n    END IF;\n    a_pos2 := instr(v_url, '/', a_pos1 + 2);\n    IF a_pos2 = 0 THEN\n        v_host := substr(v_url, a_pos1 + 2);\n        v_path := '/';\n        RETURN;\n    END IF;\n\n    v_host := substr(v_url, a_pos1 + 2, a_pos2 - a_pos1 - 2);\n    a_pos1 := instr(v_url, '?', a_pos2 + 1);\n\n    IF a_pos1 = 0 THEN\n        v_path := substr(v_url, a_pos2);\n        RETURN;\n    END IF;\n\n    v_path := substr(v_url, a_pos2, a_pos1 - a_pos2);\n    v_query := substr(v_url, a_pos1 + 1);\nEND;\n/\nshow errors;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION cs_parse_url(\n    v_url IN VARCHAR,\n    v_host OUT VARCHAR,  -- This will be passed back\n    v_path OUT VARCHAR,  -- This one too\n    v_query OUT VARCHAR) -- And this one\nAS $$\nDECLARE\n    a_pos1 INTEGER;\n    a_pos2 INTEGER;\nBEGIN\n    v_host := NULL;\n    v_path := NULL;\n    v_query := NULL;\n    a_pos1 := instr(v_url, '//');\n\n    IF a_pos1 = 0 THEN\n        RETURN;\n    END IF;\n    a_pos2 := instr(v_url, '/', a_pos1 + 2);\n    IF a_pos2 = 0 THEN\n        v_host := substr(v_url, a_pos1 + 2);\n        v_path := '/';\n        RETURN;\n    END IF;\n\n    v_host := substr(v_url, a_pos1 + 2, a_pos2 - a_pos1 - 2);\n    a_pos1 := instr(v_url, '?', a_pos2 + 1);\n\n    IF a_pos1 = 0 THEN\n        v_path := substr(v_url, a_pos2);\n        RETURN;\n    END IF;\n\n    v_path := substr(v_url, a_pos2, a_pos1 - a_pos2);\n    v_query := substr(v_url, a_pos1 + 1);\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nSELECT * FROM cs_parse_url('http://foobar.com/query.cgi?baz');\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE PROCEDURE cs_create_job(v_job_id IN INTEGER) IS\n    a_running_job_count INTEGER;\nBEGIN\n    LOCK TABLE cs_jobs IN EXCLUSIVE MODE;\n\n    SELECT count(*) INTO a_running_job_count FROM cs_jobs WHERE end_stamp IS NULL;\n\n    IF a_running_job_count > 0 THEN\n        COMMIT; -- free lock\n        raise_application_error(-20000,\n                 'Unable to create a new job: a job is currently running.');\n    END IF;\n\n    DELETE FROM cs_active_job;\n    INSERT INTO cs_active_job(job_id) VALUES (v_job_id);\n\n    BEGIN\n        INSERT INTO cs_jobs (job_id, start_stamp) VALUES (v_job_id, now());\n    EXCEPTION\n        WHEN dup_val_on_index THEN NULL; -- don't worry if it already exists\n    END;\n    COMMIT;\nEND;\n/\nshow errors\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE OR REPLACE PROCEDURE cs_create_job(v_job_id integer) AS $$\nDECLARE\n    a_running_job_count integer;\nBEGIN\n    LOCK TABLE cs_jobs IN EXCLUSIVE MODE;\n\n    SELECT count(*) INTO a_running_job_count FROM cs_jobs WHERE end_stamp IS NULL;\n\n    IF a_running_job_count > 0 THEN\n        COMMIT; -- free lock\n        RAISE EXCEPTION 'Unable to create a new job: a job is currently running'; -- ", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "(1)\n    END IF;\n\n    DELETE FROM cs_active_job;\n    INSERT INTO cs_active_job(job_id) VALUES (v_job_id);\n\n    BEGIN\n        INSERT INTO cs_jobs (job_id, start_stamp) VALUES (v_job_id, now());\n    EXCEPTION\n        WHEN unique_violation THEN -- ", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "(2)\n            -- don't worry if it already exists\n    END;\n    COMMIT;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\n--\n-- instr functions that mimic Oracle's counterpart\n-- Syntax: instr(string1, string2 [, n [, m]])\n-- where [] denotes optional parameters.\n--\n-- Search string1, beginning at the nth character, for the mth occurrence\n-- of string2.  If n is negative, search backwards, starting at the abs(n)'th\n-- character from the end of string1.\n-- If n is not passed, assume 1 (search starts at first character).\n-- If m is not passed, assume 1 (find first occurrence).\n-- Returns starting index of string2 in string1, or 0 if string2 is not found.\n--\n\nCREATE FUNCTION instr(varchar, varchar) RETURNS integer AS $$\nBEGIN\n    RETURN instr($1, $2, 1);\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;\n\n\nCREATE FUNCTION instr(string varchar, string_to_search_for varchar,\n                      beg_index integer)\nRETURNS integer AS $$\nDECLARE\n    pos integer NOT NULL DEFAULT 0;\n    temp_str varchar;\n    beg integer;\n    length integer;\n    ss_length integer;\nBEGIN\n    IF beg_index > 0 THEN\n        temp_str := substring(string FROM beg_index);\n        pos := position(string_to_search_for IN temp_str);\n\n        IF pos = 0 THEN\n            RETURN 0;\n        ELSE\n            RETURN pos + beg_index - 1;\n        END IF;\n    ELSIF beg_index < 0 THEN\n        ss_length := char_length(string_to_search_for);\n        length := char_length(string);\n        beg := length + 1 + beg_index;\n\n        WHILE beg > 0 LOOP\n            temp_str := substring(string FROM beg FOR ss_length);\n            IF string_to_search_for = temp_str THEN\n                RETURN beg;\n            END IF;\n\n            beg := beg - 1;\n        END LOOP;\n\n        RETURN 0;\n    ELSE\n        RETURN 0;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;\n\n\nCREATE FUNCTION instr(string varchar, string_to_search_for varchar,\n                      beg_index integer, occur_index integer)\nRETURNS integer AS $$\nDECLARE\n    pos integer NOT NULL DEFAULT 0;\n    occur_number integer NOT NULL DEFAULT 0;\n    temp_str varchar;\n    beg integer;\n    i integer;\n    length integer;\n    ss_length integer;\nBEGIN\n    IF occur_index <= 0 THEN\n        RAISE 'argument ''%'' is out of range', occur_index\n          USING ERRCODE = '22003';\n    END IF;\n\n    IF beg_index > 0 THEN\n        beg := beg_index - 1;\n        FOR i IN 1..occur_index LOOP\n            temp_str := substring(string FROM beg + 1);\n            pos := position(string_to_search_for IN temp_str);\n            IF pos = 0 THEN\n                RETURN 0;\n            END IF;\n            beg := beg + pos;\n        END LOOP;\n\n        RETURN beg;\n    ELSIF beg_index < 0 THEN\n        ss_length := char_length(string_to_search_for);\n        length := char_length(string);\n        beg := length + 1 + beg_index;\n\n        WHILE beg > 0 LOOP\n            temp_str := substring(string FROM beg FOR ss_length);\n            IF string_to_search_for = temp_str THEN\n                occur_number := occur_number + 1;\n                IF occur_number = occur_index THEN\n                    RETURN beg;\n                END IF;\n            END IF;\n\n            beg := beg - 1;\n        END LOOP;\n\n        RETURN 0;\n    ELSE\n        RETURN 0;\n    END IF;\nEND;\n$$ LANGUAGE plpgsql STRICT IMMUTABLE;\n\n", "source": "https://www.postgresql.org/docs/current/plpgsql-porting.html"},
{"sql": "\nCREATE TABLE emp (\n    empname text,\n    salary integer,\n    last_date timestamp,\n    last_user text\n);\n\nCREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$\n    BEGIN\n        -- Check that empname and salary are given\n        IF NEW.empname IS NULL THEN\n            RAISE EXCEPTION 'empname cannot be null';\n        END IF;\n        IF NEW.salary IS NULL THEN\n            RAISE EXCEPTION '% cannot have null salary', NEW.empname;\n        END IF;\n\n        -- Who works for us when they must pay for it?\n        IF NEW.salary < 0 THEN\n            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname;\n        END IF;\n\n        -- Remember who changed the payroll when\n        NEW.last_date := current_timestamp;\n        NEW.last_user := current_user;\n        RETURN NEW;\n    END;\n$emp_stamp$ LANGUAGE plpgsql;\n\nCREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp\n    FOR EACH ROW EXECUTE FUNCTION emp_stamp();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\nCREATE TABLE emp (\n    empname           text NOT NULL,\n    salary            integer\n);\n\nCREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    stamp             timestamp NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary integer\n);\n\nCREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$\n    BEGIN\n        --\n        -- Create a row in emp_audit to reflect the operation performed on emp,\n        -- making use of the special variable TG_OP to work out the operation.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            INSERT INTO emp_audit SELECT 'D', now(), user, OLD.*;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            INSERT INTO emp_audit SELECT 'U', now(), user, NEW.*;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp_audit SELECT 'I', now(), user, NEW.*;\n        END IF;\n        RETURN NULL; -- result is ignored since this is an AFTER trigger\n    END;\n$emp_audit$ LANGUAGE plpgsql;\n\nCREATE TRIGGER emp_audit\nAFTER INSERT OR UPDATE OR DELETE ON emp\n    FOR EACH ROW EXECUTE FUNCTION process_emp_audit();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\nCREATE TABLE emp (\n    empname           text PRIMARY KEY,\n    salary            integer\n);\n\nCREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary            integer,\n    stamp             timestamp NOT NULL\n);\n\nCREATE VIEW emp_view AS\n    SELECT e.empname,\n           e.salary,\n           max(ea.stamp) AS last_updated\n      FROM emp e\n      LEFT JOIN emp_audit ea ON ea.empname = e.empname\n     GROUP BY 1, 2;\n\nCREATE OR REPLACE FUNCTION update_emp_view() RETURNS TRIGGER AS $$\n    BEGIN\n        --\n        -- Perform the required operation on emp, and create a row in emp_audit\n        -- to reflect the change made to emp.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            DELETE FROM emp WHERE empname = OLD.empname;\n            IF NOT FOUND THEN RETURN NULL; END IF;\n\n            OLD.last_updated = now();\n            INSERT INTO emp_audit VALUES('D', user, OLD.*);\n            RETURN OLD;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            UPDATE emp SET salary = NEW.salary WHERE empname = OLD.empname;\n            IF NOT FOUND THEN RETURN NULL; END IF;\n\n            NEW.last_updated = now();\n            INSERT INTO emp_audit VALUES('U', user, NEW.*);\n            RETURN NEW;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp VALUES(NEW.empname, NEW.salary);\n\n            NEW.last_updated = now();\n            INSERT INTO emp_audit VALUES('I', user, NEW.*);\n            RETURN NEW;\n        END IF;\n    END;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER emp_audit\nINSTEAD OF INSERT OR UPDATE OR DELETE ON emp_view\n    FOR EACH ROW EXECUTE FUNCTION update_emp_view();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\n--\n-- Main tables - time dimension and sales fact.\n--\nCREATE TABLE time_dimension (\n    time_key                    integer NOT NULL,\n    day_of_week                 integer NOT NULL,\n    day_of_month                integer NOT NULL,\n    month                       integer NOT NULL,\n    quarter                     integer NOT NULL,\n    year                        integer NOT NULL\n);\nCREATE UNIQUE INDEX time_dimension_key ON time_dimension(time_key);\n\nCREATE TABLE sales_fact (\n    time_key                    integer NOT NULL,\n    product_key                 integer NOT NULL,\n    store_key                   integer NOT NULL,\n    amount_sold                 numeric(12,2) NOT NULL,\n    units_sold                  integer NOT NULL,\n    amount_cost                 numeric(12,2) NOT NULL\n);\nCREATE INDEX sales_fact_time ON sales_fact(time_key);\n\n--\n-- Summary table - sales by time.\n--\nCREATE TABLE sales_summary_bytime (\n    time_key                    integer NOT NULL,\n    amount_sold                 numeric(15,2) NOT NULL,\n    units_sold                  numeric(12) NOT NULL,\n    amount_cost                 numeric(15,2) NOT NULL\n);\nCREATE UNIQUE INDEX sales_summary_bytime_key ON sales_summary_bytime(time_key);\n\n--\n-- Function and trigger to amend summarized column(s) on UPDATE, INSERT, DELETE.\n--\nCREATE OR REPLACE FUNCTION maint_sales_summary_bytime() RETURNS TRIGGER\nAS $maint_sales_summary_bytime$\n    DECLARE\n        delta_time_key          integer;\n        delta_amount_sold       numeric(15,2);\n        delta_units_sold        numeric(12);\n        delta_amount_cost       numeric(15,2);\n    BEGIN\n\n        -- Work out the increment/decrement amount(s).\n        IF (TG_OP = 'DELETE') THEN\n\n            delta_time_key = OLD.time_key;\n            delta_amount_sold = -1 * OLD.amount_sold;\n            delta_units_sold = -1 * OLD.units_sold;\n            delta_amount_cost = -1 * OLD.amount_cost;\n\n        ELSIF (TG_OP = 'UPDATE') THEN\n\n            -- forbid updates that change the time_key -\n            -- (probably not too onerous, as DELETE + INSERT is how most\n            -- changes will be made).\n            IF ( OLD.time_key != NEW.time_key) THEN\n                RAISE EXCEPTION 'Update of time_key : % -> % not allowed',\n                                                      OLD.time_key, NEW.time_key;\n            END IF;\n\n            delta_time_key = OLD.time_key;\n            delta_amount_sold = NEW.amount_sold - OLD.amount_sold;\n            delta_units_sold = NEW.units_sold - OLD.units_sold;\n            delta_amount_cost = NEW.amount_cost - OLD.amount_cost;\n\n        ELSIF (TG_OP = 'INSERT') THEN\n\n            delta_time_key = NEW.time_key;\n            delta_amount_sold = NEW.amount_sold;\n            delta_units_sold = NEW.units_sold;\n            delta_amount_cost = NEW.amount_cost;\n\n        END IF;\n\n\n        -- Insert or update the summary row with the new values.\n        <<insert_update>>\n        LOOP\n            UPDATE sales_summary_bytime\n                SET amount_sold = amount_sold + delta_amount_sold,\n                    units_sold = units_sold + delta_units_sold,\n                    amount_cost = amount_cost + delta_amount_cost\n                WHERE time_key = delta_time_key;\n\n            EXIT insert_update WHEN found;\n\n            BEGIN\n                INSERT INTO sales_summary_bytime (\n                            time_key,\n                            amount_sold,\n                            units_sold,\n                            amount_cost)\n                    VALUES (\n                            delta_time_key,\n                            delta_amount_sold,\n                            delta_units_sold,\n                            delta_amount_cost\n                           );\n\n                EXIT insert_update;\n\n            EXCEPTION\n                WHEN UNIQUE_VIOLATION THEN\n                    -- do nothing\n            END;\n        END LOOP insert_update;\n\n        RETURN NULL;\n\n    END;\n$maint_sales_summary_bytime$ LANGUAGE plpgsql;\n\nCREATE TRIGGER maint_sales_summary_bytime\nAFTER INSERT OR UPDATE OR DELETE ON sales_fact\n    FOR EACH ROW EXECUTE FUNCTION maint_sales_summary_bytime();\n\nINSERT INTO sales_fact VALUES(1,1,1,10,3,15);\nINSERT INTO sales_fact VALUES(1,2,1,20,5,35);\nINSERT INTO sales_fact VALUES(2,2,1,40,15,135);\nINSERT INTO sales_fact VALUES(2,3,1,10,1,13);\nSELECT * FROM sales_summary_bytime;\nDELETE FROM sales_fact WHERE product_key = 1;\nSELECT * FROM sales_summary_bytime;\nUPDATE sales_fact SET units_sold = units_sold * 2;\nSELECT * FROM sales_summary_bytime;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\nCREATE TABLE emp (\n    empname           text NOT NULL,\n    salary            integer\n);\n\nCREATE TABLE emp_audit(\n    operation         char(1)   NOT NULL,\n    stamp             timestamp NOT NULL,\n    userid            text      NOT NULL,\n    empname           text      NOT NULL,\n    salary integer\n);\n\nCREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$\n    BEGIN\n        --\n        -- Create rows in emp_audit to reflect the operations performed on emp,\n        -- making use of the special variable TG_OP to work out the operation.\n        --\n        IF (TG_OP = 'DELETE') THEN\n            INSERT INTO emp_audit\n                SELECT 'D', now(), user, o.* FROM old_table o;\n        ELSIF (TG_OP = 'UPDATE') THEN\n            INSERT INTO emp_audit\n                SELECT 'U', now(), user, n.* FROM new_table n;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO emp_audit\n                SELECT 'I', now(), user, n.* FROM new_table n;\n        END IF;\n        RETURN NULL; -- result is ignored since this is an AFTER trigger\n    END;\n$emp_audit$ LANGUAGE plpgsql;\n\nCREATE TRIGGER emp_audit_ins\n    AFTER INSERT ON emp\n    REFERENCING NEW TABLE AS new_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();\nCREATE TRIGGER emp_audit_upd\n    AFTER UPDATE ON emp\n    REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();\nCREATE TRIGGER emp_audit_del\n    AFTER DELETE ON emp\n    REFERENCING OLD TABLE AS old_table\n    FOR EACH STATEMENT EXECUTE FUNCTION process_emp_audit();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$\nBEGIN\n    RAISE NOTICE 'snitch: % %', tg_event, tg_tag;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE FUNCTION snitch();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-trigger.html"},
{"sql": "\nRAISE NOTICE 'Calling cs_create_job(%)', v_job_id;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html"},
{"sql": "\nRAISE EXCEPTION 'Nonexistent ID --> %', user_id\n      USING HINT = 'Please check your user ID';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html"},
{"sql": "\nRAISE 'Duplicate user ID: %', user_id USING ERRCODE = 'unique_violation';\nRAISE 'Duplicate user ID: %', user_id USING ERRCODE = '23505';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html"},
{"sql": "\nRAISE division_by_zero;\nRAISE SQLSTATE '22012';\n", "source": "https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html"},
{"sql": "\nRAISE unique_violation USING MESSAGE = 'Duplicate user ID: ' || user_id;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-errors-and-messages.html"},
{"sql": "\nCREATE PROCEDURE transaction_test1()\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    FOR i IN 0..9 LOOP\n        INSERT INTO test1 (a) VALUES (i);\n        IF i % 2 = 0 THEN\n            COMMIT;\n        ELSE\n            ROLLBACK;\n        END IF;\n    END LOOP;\nEND;\n$$;\n\nCALL transaction_test1();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-transactions.html"},
{"sql": "\nCREATE PROCEDURE transaction_test2()\nLANGUAGE plpgsql\nAS $$\nDECLARE\n    r RECORD;\nBEGIN\n    FOR r IN SELECT * FROM test2 ORDER BY x LOOP\n        INSERT INTO test1 (a) VALUES (r.x);\n        COMMIT;\n    END LOOP;\nEND;\n$$;\n\nCALL transaction_test2();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-transactions.html"},
{"sql": "\n-- functions returning a scalar type\nRETURN 1 + 2;\nRETURN scalar_var;\n\n-- functions returning a composite type\nRETURN composite_type_var;\nRETURN (1, 2, 'three'::text);  -- must cast columns to correct types\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE TABLE foo (fooid INT, foosubid INT, fooname TEXT);\nINSERT INTO foo VALUES (1, 2, 'three');\nINSERT INTO foo VALUES (4, 5, 'six');\n\nCREATE OR REPLACE FUNCTION get_all_foo() RETURNS SETOF foo AS\n$BODY$\nDECLARE\n    r foo%rowtype;\nBEGIN\n    FOR r IN\n        SELECT * FROM foo WHERE fooid > 0\n    LOOP\n        -- can do some processing here\n        RETURN NEXT r; -- return current row of SELECT\n    END LOOP;\n    RETURN;\nEND;\n$BODY$\nLANGUAGE plpgsql;\n\nSELECT * FROM get_all_foo();\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE FUNCTION get_available_flightid(date) RETURNS SETOF integer AS\n$BODY$\nBEGIN\n    RETURN QUERY SELECT flightid\n                   FROM flight\n                  WHERE flightdate >= $1\n                    AND flightdate < ($1 + 1);\n\n    -- Since execution is not finished, we can check whether rows were returned\n    -- and raise exception if not.\n    IF NOT FOUND THEN\n        RAISE EXCEPTION 'No flight at %.', $1;\n    END IF;\n\n    RETURN;\n END;\n$BODY$\nLANGUAGE plpgsql;\n\n-- Returns available flights or raises exception if there are no\n-- available flights.\nSELECT * FROM get_available_flightid(CURRENT_DATE);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE PROCEDURE triple(INOUT x int)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    x := x * 3;\nEND;\n$$;\n\nDO $$\nDECLARE myvar int := 5;\nBEGIN\n  CALL triple(myvar);\n  RAISE NOTICE 'myvar = %', myvar;  -- prints 15\nEND;\n$$;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nIF v_user_id <> 0 THEN\n    UPDATE users SET email = v_email WHERE user_id = v_user_id;\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nIF parentid IS NULL OR parentid = ''\nTHEN\n    RETURN fullname;\nELSE\n    RETURN hp_true_filename(parentid) || '/' || fullname;\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nIF v_count > 0 THEN\n    INSERT INTO users_count (count) VALUES (v_count);\n    RETURN 't';\nELSE\n    RETURN 'f';\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nIF number = 0 THEN\n    result := 'zero';\nELSIF number > 0 THEN\n    result := 'positive';\nELSIF number < 0 THEN\n    result := 'negative';\nELSE\n    -- hmm, the only other possibility is that number is null\n    result := 'NULL';\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nIF demo_row.sex = 'm' THEN\n    pretty_sex := 'man';\nELSE\n    IF demo_row.sex = 'f' THEN\n        pretty_sex := 'woman';\n    END IF;\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCASE x\n    WHEN 1, 2 THEN\n        msg := 'one or two';\n    ELSE\n        msg := 'other value than one or two';\nEND CASE;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCASE\n    WHEN x BETWEEN 0 AND 10 THEN\n        msg := 'value is between zero and ten';\n    WHEN x BETWEEN 11 AND 20 THEN\n        msg := 'value is between eleven and twenty';\nEND CASE;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nLOOP\n    -- some computations\n    IF count > 0 THEN\n        EXIT;  -- exit loop\n    END IF;\nEND LOOP;\n\nLOOP\n    -- some computations\n    EXIT WHEN count > 0;  -- same result as previous example\nEND LOOP;\n\n<<ablock>>\nBEGIN\n    -- some computations\n    IF stocks > 100000 THEN\n        EXIT ablock;  -- causes exit from the BEGIN block\n    END IF;\n    -- computations here will be skipped when stocks > 100000\nEND;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nLOOP\n    -- some computations\n    EXIT WHEN count > 100;\n    CONTINUE WHEN count < 50;\n    -- some computations for count IN [50 .. 100]\nEND LOOP;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nWHILE amount_owed > 0 AND gift_certificate_balance > 0 LOOP\n    -- some computations here\nEND LOOP;\n\nWHILE NOT done LOOP\n    -- some computations here\nEND LOOP;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nFOR i IN 1..10 LOOP\n    -- i will take on the values 1,2,3,4,5,6,7,8,9,10 within the loop\nEND LOOP;\n\nFOR i IN REVERSE 10..1 LOOP\n    -- i will take on the values 10,9,8,7,6,5,4,3,2,1 within the loop\nEND LOOP;\n\nFOR i IN REVERSE 10..1 BY 2 LOOP\n    -- i will take on the values 10,8,6,4,2 within the loop\nEND LOOP;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE FUNCTION sum(int[]) RETURNS int8 AS $$\nDECLARE\n  s int8 := 0;\n  x int;\nBEGIN\n  FOREACH x IN ARRAY $1\n  LOOP\n    s := s + x;\n  END LOOP;\n  RETURN s;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE FUNCTION scan_rows(int[]) RETURNS void AS $$\nDECLARE\n  x int[];\nBEGIN\n  FOREACH x SLICE 1 IN ARRAY $1\n  LOOP\n    RAISE NOTICE 'row = %', x;\n  END LOOP;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT scan_rows(ARRAY[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]);\n\nNOTICE:  row = {1,2,3}\nNOTICE:  row = {4,5,6}\nNOTICE:  row = {7,8,9}\nNOTICE:  row = {10,11,12}\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nINSERT INTO mytab(firstname, lastname) VALUES('Tom', 'Jones');\nBEGIN\n    UPDATE mytab SET firstname = 'Joe' WHERE lastname = 'Jones';\n    x := x + 1;\n    y := x / 0;\nEXCEPTION\n    WHEN division_by_zero THEN\n        RAISE NOTICE 'caught division_by_zero';\n        RETURN x;\nEND;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE TABLE db (a INT PRIMARY KEY, b TEXT);\n\nCREATE FUNCTION merge_db(key INT, data TEXT) RETURNS VOID AS\n$$\nBEGIN\n    LOOP\n        -- first try to update the key\n        UPDATE db SET b = data WHERE a = key;\n        IF found THEN\n            RETURN;\n        END IF;\n        -- not there, so try to insert the key\n        -- if someone else inserts the same key concurrently,\n        -- we could get a unique-key failure\n        BEGIN\n            INSERT INTO db(a,b) VALUES (key, data);\n            RETURN;\n        EXCEPTION WHEN unique_violation THEN\n            -- Do nothing, and loop to try the UPDATE again.\n        END;\n    END LOOP;\nEND;\n$$\nLANGUAGE plpgsql;\n\nSELECT merge_db(1, 'david');\nSELECT merge_db(1, 'dennis');\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION outer_func() RETURNS integer AS $$\nBEGIN\n  RETURN inner_func();\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE FUNCTION inner_func() RETURNS integer AS $$\nDECLARE\n  stack text;\nBEGIN\n  GET DIAGNOSTICS stack = PG_CONTEXT;\n  RAISE NOTICE E'--- Call Stack ---\\n%', stack;\n  RETURN 1;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT outer_func();\n\nNOTICE:  --- Call Stack ---\nPL/pgSQL function inner_func() line 5 at GET DIAGNOSTICS\nPL/pgSQL function outer_func() line 3 at RETURN\nCONTEXT:  PL/pgSQL function outer_func() line 3 at RETURN\n outer_func\n ------------\n           1\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/plpgsql-control-structures.html"},
{"sql": "\ntax := subtotal * 0.06;\nmy_record.user_id := 20;\nmy_array[j] := 20;\nmy_array[1:3] := array[1,2,3];\ncomplex_array[n].realpart = 12.3;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nCREATE TABLE mytable (id int primary key, data text);\nINSERT INTO mytable VALUES (1,'one'), (2,'two');\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nPERFORM create_mv('cs_session_page_requests_mv', my_query);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nSELECT * INTO myrec FROM emp WHERE empname = myname;\nIF NOT FOUND THEN\n    RAISE EXCEPTION 'employee % not found', myname;\nEND IF;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nBEGIN\n    SELECT * INTO STRICT myrec FROM emp WHERE empname = myname;\n    EXCEPTION\n        WHEN NO_DATA_FOUND THEN\n            RAISE EXCEPTION 'employee % not found', myname;\n        WHEN TOO_MANY_ROWS THEN\n            RAISE EXCEPTION 'employee % not unique', myname;\nEND;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nCREATE FUNCTION get_userid(username text) RETURNS int\nAS $$\n#print_strict_params on\nDECLARE\nuserid int;\nBEGIN\n    SELECT users.userid INTO STRICT userid\n        FROM users WHERE users.username = get_userid.username;\n    RETURN userid;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nERROR:  query returned no rows\nDETAIL:  parameters: $1 = 'nosuchuser'\nCONTEXT:  PL/pgSQL function get_userid(text) line 6 at SQL statement\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE 'SELECT count(*) FROM mytable WHERE inserted_by = $1 AND inserted <= $2'\n   INTO c\n   USING checked_user, checked_date;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE 'SELECT count(*) FROM '\n    || quote_ident(tabname)\n    || ' WHERE inserted_by = $1 AND inserted <= $2'\n   INTO c\n   USING checked_user, checked_date;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE format('SELECT count(*) FROM %I '\n   'WHERE inserted_by = $1 AND inserted <= $2', tabname)\n   INTO c\n   USING checked_user, checked_date;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE format('UPDATE tbl SET %I = $1 '\n   'WHERE key = $2', colname) USING newvalue, keyvalue;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = '\n        || quote_literal(newvalue)\n        || ' WHERE key = '\n        || quote_literal(keyvalue);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = '\n        || quote_nullable(newvalue)\n        || ' WHERE key = '\n        || quote_nullable(keyvalue);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\n'WHERE key = ' || quote_nullable(keyvalue)\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\n'WHERE key IS NOT DISTINCT FROM ' || quote_nullable(keyvalue)\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE 'UPDATE tbl SET '\n        || quote_ident(colname)\n        || ' = $$'\n        || newvalue\n        || '$$ WHERE key = '\n        || quote_literal(keyvalue);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE format('UPDATE tbl SET %I = %L '\n   'WHERE key = %L', colname, newvalue, keyvalue);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nEXECUTE format('UPDATE tbl SET %I = $1 WHERE key = $2', colname)\n   USING newvalue, keyvalue;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nGET DIAGNOSTICS integer_var = ROW_COUNT;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nBEGIN\n    y := x / 0;\nEXCEPTION\n    WHEN division_by_zero THEN\n        NULL;  -- ignore the error\nEND;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nBEGIN\n    y := x / 0;\nEXCEPTION\n    WHEN division_by_zero THEN  -- ignore the error\nEND;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-statements.html"},
{"sql": "\nDECLARE\n    curs1 refcursor;\n    curs2 CURSOR FOR SELECT * FROM tenk1;\n    curs3 CURSOR (key integer) FOR SELECT * FROM tenk1 WHERE unique1 = key;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nOPEN curs1 FOR SELECT * FROM foo WHERE key = mykey;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nOPEN curs1 FOR EXECUTE format('SELECT * FROM %I WHERE col1 = $1',tabname) USING keyvalue;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nOPEN curs2;\nOPEN curs3(42);\nOPEN curs3(key := 42);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nDECLARE\n    key integer;\n    curs4 CURSOR FOR SELECT * FROM tenk1 WHERE unique1 = key;\nBEGIN\n    key := 42;\n    OPEN curs4;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nFETCH curs1 INTO rowvar;\nFETCH curs2 INTO foo, bar, baz;\nFETCH LAST FROM curs3 INTO x, y;\nFETCH RELATIVE -2 FROM curs4 INTO x;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nMOVE curs1;\nMOVE LAST FROM curs3;\nMOVE RELATIVE -2 FROM curs4;\nMOVE FORWARD 2 FROM curs4;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nUPDATE foo SET dataval = myval WHERE CURRENT OF curs1;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nCLOSE curs1;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nCREATE TABLE test (col text);\nINSERT INTO test VALUES ('123');\n\nCREATE FUNCTION reffunc(refcursor) RETURNS refcursor AS '\nBEGIN\n    OPEN $1 FOR SELECT col FROM test;\n    RETURN $1;\nEND;\n' LANGUAGE plpgsql;\n\nBEGIN;\nSELECT reffunc('funccursor');\nFETCH ALL IN funccursor;\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nCREATE FUNCTION reffunc2() RETURNS refcursor AS '\nDECLARE\n    ref refcursor;\nBEGIN\n    OPEN ref FOR SELECT col FROM test;\n    RETURN ref;\nEND;\n' LANGUAGE plpgsql;\n\n-- need to be in a transaction to use cursors.\nBEGIN;\nSELECT reffunc2();\n\n      reffunc2\n--------------------\n <unnamed cursor 1>\n(1 row)\n\nFETCH ALL IN \"<unnamed cursor 1>\";\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nCREATE FUNCTION myfunc(refcursor, refcursor) RETURNS SETOF refcursor AS $$\nBEGIN\n    OPEN $1 FOR SELECT * FROM table_1;\n    RETURN NEXT $1;\n    OPEN $2 FOR SELECT * FROM table_2;\n    RETURN NEXT $2;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- need to be in a transaction to use cursors.\nBEGIN;\n\nSELECT * FROM myfunc('a', 'b');\n\nFETCH ALL FROM a;\nFETCH ALL FROM b;\nCOMMIT;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-cursors.html"},
{"sql": "\nCREATE FUNCTION somefunc(integer, text) RETURNS integer\nAS '", "source": "https://www.postgresql.org/docs/current/plpgsql-structure.html"},
{"sql": "'\nLANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-structure.html"},
{"sql": "\nCREATE FUNCTION somefunc() RETURNS integer AS $$\n<< outerblock >>\nDECLARE\n    quantity integer := 30;\nBEGIN\n    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30\n    quantity := 50;\n    --\n    -- Create a subblock\n    --\n    DECLARE\n        quantity integer := 80;\n    BEGIN\n        RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80\n        RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50\n    END;\n\n    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50\n\n    RETURN quantity;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-structure.html"},
{"sql": "(integer, integer) AS SELECT $1 < $2;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-expressions.html"},
{"sql": "\nuser_id integer;\nquantity numeric(5);\nurl varchar;\nmyrow tablename%ROWTYPE;\nmyfield tablename.columnname%TYPE;\narow RECORD;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nquantity integer DEFAULT 32;\nurl varchar := 'http://mysite.com';\nuser_id CONSTANT integer := 10;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION sales_tax(subtotal real) RETURNS real AS $$\nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION sales_tax(real) RETURNS real AS $$\nDECLARE\n    subtotal ALIAS FOR $1;\nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION instr(varchar, integer) RETURNS integer AS $$\nDECLARE\n    v_string ALIAS FOR $1;\n    index ALIAS FOR $2;\nBEGIN\n    -- some computations using v_string and index here\nEND;\n$$ LANGUAGE plpgsql;\n\n\nCREATE FUNCTION concat_selected_fields(in_t sometablename) RETURNS text AS $$\nBEGIN\n    RETURN in_t.f1 || in_t.f3 || in_t.f5 || in_t.f7;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION sales_tax(subtotal real, OUT tax real) AS $$\nBEGIN\n    tax := subtotal * 0.06;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nSELECT sales_tax(100.00);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION sum_n_product(x int, y int, OUT sum int, OUT prod int) AS $$\nBEGIN\n    sum := x + y;\n    prod := x * y;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT * FROM sum_n_product(2, 4);\n sum | prod\n-----+------\n   6 |    8\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE PROCEDURE sum_n_product(x int, y int, OUT sum int, OUT prod int) AS $$\nBEGIN\n    sum := x + y;\n    prod := x * y;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCALL sum_n_product(2, 4, NULL, NULL);\n sum | prod\n-----+------\n   6 |    8\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION extended_sales(p_itemno int)\nRETURNS TABLE(quantity int, total numeric) AS $$\nBEGIN\n    RETURN QUERY SELECT s.quantity, s.quantity * s.price FROM sales AS s\n                 WHERE s.itemno = p_itemno;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement)\nRETURNS anyelement AS $$\nDECLARE\n    result ALIAS FOR $0;\nBEGIN\n    result := v1 + v2 + v3;\n    RETURN result;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement,\n                                 OUT sum anyelement)\nAS $$\nBEGIN\n    sum := v1 + v2 + v3;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION add_three_values(v1 anycompatible, v2 anycompatible, v3 anycompatible)\nRETURNS anycompatible AS $$\nBEGIN\n    RETURN v1 + v2 + v3;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nSELECT add_three_values(1, 2, 4.7);\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nDECLARE\n  prior ALIAS FOR old;\n  updated ALIAS FOR new;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nuser_id users.user_id%TYPE;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$\nBEGIN\n    RETURN a < b;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT less_than(text_field_1, text_field_2) FROM table1;\nSELECT less_than(text_field_1, text_field_2 COLLATE \"C\") FROM table1;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$\nDECLARE\n    local_a text := a;\n    local_b text := b;\nBEGIN\n    RETURN local_a < local_b;\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nDECLARE\n    local_a text COLLATE \"en_US\";\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE FUNCTION less_than_c(a text, b text) RETURNS boolean AS $$\nBEGIN\n    RETURN a < b COLLATE \"C\";\nEND;\n$$ LANGUAGE plpgsql;\n", "source": "https://www.postgresql.org/docs/current/plpgsql-declarations.html"},
{"sql": "\nCREATE PROCEDURE transaction_test1()\nLANGUAGE pltcl\nAS $$\nfor {set i 0} {$i < 10} {incr i} {\n    spi_exec \"INSERT INTO test1 (a) VALUES ($i)\"\n    if {$i % 2 == 0} {\n        commit\n    } else {\n        rollback\n    }\n}\n$$;\n\nCALL transaction_test1();\n", "source": "https://www.postgresql.org/docs/current/pltcl-transactions.html"},
{"sql": "\nif {[catch { spi_exec $sql_command }]} {\n    if {[lindex $::errorCode 0] == \"POSTGRES\"} {\n        array set errorArray $::errorCode\n        if {$errorArray(condition) == \"undefined_table\"} {\n            # deal with missing table\n        } else {\n            # deal with some other type of SQL error\n        }\n    }\n}\n", "source": "https://www.postgresql.org/docs/current/pltcl-error-handling.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION tclsnitch() RETURNS event_trigger AS $$\n  elog NOTICE \"tclsnitch: $TG_event $TG_tag\"\n$$ LANGUAGE pltcl;\n\nCREATE EVENT TRIGGER tcl_a_snitch ON ddl_command_start EXECUTE FUNCTION tclsnitch();\n", "source": "https://www.postgresql.org/docs/current/pltcl-event-trigger.html"},
{"sql": "\nCREATE FUNCTION trigfunc_modcount() RETURNS trigger AS $$\n    switch $TG_op {\n        INSERT {\n            set NEW($1) 0\n        }\n        UPDATE {\n            set NEW($1) $OLD($1)\n            incr NEW($1)\n        }\n        default {\n            return OK\n        }\n    }\n    return [array get NEW]\n$$ LANGUAGE pltcl;\n\nCREATE TABLE mytab (num integer, description text, modcnt integer);\n\nCREATE TRIGGER trig_mytab_modcount BEFORE INSERT OR UPDATE ON mytab\n    FOR EACH ROW EXECUTE FUNCTION trigfunc_modcount('modcnt');\n", "source": "https://www.postgresql.org/docs/current/pltcl-trigger.html"},
{"sql": "\nCREATE FUNCTION transfer_funds() RETURNS void AS $$\n    if [catch {\n        spi_exec \"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\"\n        spi_exec \"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\"\n    } errormsg] {\n        set result [format \"error transferring funds: %s\" $errormsg]\n    } else {\n        set result \"funds transferred successfully\"\n    }\n    spi_exec \"INSERT INTO operations (result) VALUES ('[quote $result]')\"\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-subtransactions.html"},
{"sql": "\nCREATE FUNCTION transfer_funds2() RETURNS void AS $$\n    if [catch {\n        subtransaction {\n            spi_exec \"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\"\n            spi_exec \"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\"\n        }\n    } errormsg] {\n        set result [format \"error transferring funds: %s\" $errormsg]\n    } else {\n        set result \"funds transferred successfully\"\n    }\n    spi_exec \"INSERT INTO operations (result) VALUES ('[quote $result]')\"\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-subtransactions.html"},
{"sql": "\nspi_exec \"SELECT count(*) AS cnt FROM pg_proc\"\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\nspi_exec -array C \"SELECT * FROM pg_class\" {\n    elog DEBUG \"have table $C(relname)\"\n}\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\nCREATE FUNCTION t1_count(integer, integer) RETURNS integer AS $$\n    if {![ info exists GD(plan) ]} {\n        # prepare the saved plan on the first call\n        set GD(plan) [ spi_prepare \\\n                \"SELECT count(*) AS cnt FROM t1 WHERE num >= \\$1 AND num <= \\$2\" \\\n                [ list int4 int4 ] ]\n    }\n    spi_execp -count 1 $GD(plan) [ list $1 $2 ]\n    return $cnt\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\n\"SELECT '$val' AS ret\"\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\nSELECT 'doesn't' AS ret\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\nSELECT 'doesn''t' AS ret\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\n\"SELECT '[ quote $val ]' AS ret\"\n", "source": "https://www.postgresql.org/docs/current/pltcl-dbaccess.html"},
{"sql": "\nCREATE TABLE test (\n    i int,\n    v varchar\n);\n\nCREATE OR REPLACE FUNCTION valid_id() RETURNS trigger AS $$\n    if (($_TD->{new}{i} >= 100) || ($_TD->{new}{i} <= 0)) {\n        return \"SKIP\";    # skip INSERT/UPDATE command\n    } elsif ($_TD->{new}{v} ne \"immortal\") {\n        $_TD->{new}{v} .= \"(modified by trigger)\";\n        return \"MODIFY\";  # modify row and execute INSERT/UPDATE command\n    } else {\n        return;           # execute INSERT/UPDATE command\n    }\n$$ LANGUAGE plperl;\n\nCREATE TRIGGER test_valid_id_trig\n    BEFORE INSERT OR UPDATE ON test\n    FOR EACH ROW EXECUTE FUNCTION valid_id();\n", "source": "https://www.postgresql.org/docs/current/plperl-triggers.html"},
{"sql": "\nCREATE FUNCTION ", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": ") RETURNS ", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": " AS $$\n    # PL/Tcl function body\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION tcl_max(integer, integer) RETURNS integer AS $$\n    if {$1 > $2} {return $1}\n    return $2\n$$ LANGUAGE pltcl STRICT;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION tcl_max(integer, integer) RETURNS integer AS $$\n    if {[argisnull 1]} {\n        if {[argisnull 2]} { return_null }\n        return $2\n    }\n    if {[argisnull 2]} { return $1 }\n    if {$1 > $2} {return $1}\n    return $2\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE TABLE employee (\n    name text,\n    salary integer,\n    age integer\n);\n\nCREATE FUNCTION overpaid(employee) RETURNS boolean AS $$\n    if {200000.0 < $1(salary)} {\n        return \"t\"\n    }\n    if {$1(age) < 30 && 100000.0 < $1(salary)} {\n        return \"t\"\n    }\n    return \"f\"\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION square_cube(in int, out squared int, out cubed int) AS $$\n    return [list squared [expr {$1 * $1}] cubed [expr {$1 * $1 * $1}]]\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE PROCEDURE tcl_triple(INOUT a integer, INOUT b integer) AS $$\n    return [list a [expr {$1 * 3}] b [expr {$2 * 3}]]\n$$ LANGUAGE pltcl;\n\nCALL tcl_triple(5, 10);\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION raise_pay(employee, delta int) RETURNS employee AS $$\n    set 1(salary) [expr {$1(salary) + $2}]\n    return [array get 1]\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION sequence(int, int) RETURNS SETOF int AS $$\n    for {set i $1} {$i < $2} {incr i} {\n        return_next $i\n    }\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nCREATE FUNCTION table_of_squares(int, int) RETURNS TABLE (x int, x2 int) AS $$\n    for {set i $1} {$i < $2} {incr i} {\n        return_next [list x $i x2 [expr {$i * $i}]]\n    }\n$$ LANGUAGE pltcl;\n", "source": "https://www.postgresql.org/docs/current/pltcl-functions.html"},
{"sql": "\nplperl.on_init = 'require \"plperlinit.pl\"'\nplperl.on_init = 'use lib \"/my/app\"; use MyApp::PgInit;'\n", "source": "https://www.postgresql.org/docs/current/plperl-under-the-hood.html"},
{"sql": "\nDO 'elog(WARNING, join \", \", sort keys %INC)' LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-under-the-hood.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION perlsnitch() RETURNS event_trigger AS $$\n  elog(NOTICE, \"perlsnitch: \" . $_TD->{event} . \" \" . $_TD->{tag} . \" \");\n$$ LANGUAGE plperl;\n\nCREATE EVENT TRIGGER perl_a_snitch\n    ON ddl_command_start\n    EXECUTE FUNCTION perlsnitch();\n", "source": "https://www.postgresql.org/docs/current/plperl-event-triggers.html"},
{"sql": "\nCREATE FUNCTION badfunc() RETURNS integer AS $$\n    my $tmpfile = \"/tmp/badfile\";\n    open my $fh, '>', $tmpfile\n        or elog(ERROR, qq{could not open the file \"$tmpfile\": $!});\n    print $fh \"Testing writing to a file\\n\";\n    close $fh or elog(ERROR, qq{could not close the file \"$tmpfile\": $!});\n    return 1;\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-trusted.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION set_var(name text, val text) RETURNS text AS $$\n    if ($_SHARED{$_[0]} = $_[1]) {\n        return 'ok';\n    } else {\n        return \"cannot set shared variable $_[0] to $_[1]\";\n    }\n$$ LANGUAGE plperl;\n\nCREATE OR REPLACE FUNCTION get_var(name text) RETURNS text AS $$\n    return $_SHARED{$_[0]};\n$$ LANGUAGE plperl;\n\nSELECT set_var('sample', 'Hello, PL/Perl!  How''s tricks?');\nSELECT get_var('sample');\n", "source": "https://www.postgresql.org/docs/current/plperl-global.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION myfuncs() RETURNS void AS $$\n    $_SHARED{myquote} = sub {\n        my $arg = shift;\n        $arg =~ s/(['\\\\])/\\\\$1/g;\n        return \"'$arg'\";\n    };\n$$ LANGUAGE plperl;\n\nSELECT myfuncs(); /* initializes the function */\n\n/* Set up a function that uses the quote function */\n\nCREATE OR REPLACE FUNCTION use_quote(TEXT) RETURNS text AS $$\n    my $text_to_quote = shift;\n    my $qfunc = $_SHARED{myquote};\n    return &$qfunc($text_to_quote);\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-global.html"},
{"sql": "\n$rv = spi_exec_query('SELECT * FROM my_table', 5);\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$foo = $rv->{rows}[$i]->{my_column};\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$nrows = $rv->{processed}\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$query = \"INSERT INTO my_table VALUES (1, 'test')\";\n$rv = spi_exec_query($query);\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$res = $rv->{status};\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$nrows = $rv->{processed};\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE TABLE test (\n    i int,\n    v varchar\n);\n\nINSERT INTO test (i, v) VALUES (1, 'first line');\nINSERT INTO test (i, v) VALUES (2, 'second line');\nINSERT INTO test (i, v) VALUES (3, 'third line');\nINSERT INTO test (i, v) VALUES (4, 'immortal');\n\nCREATE OR REPLACE FUNCTION test_munge() RETURNS SETOF test AS $$\n    my $rv = spi_exec_query('select i, v from test;');\n    my $status = $rv->{status};\n    my $nrows = $rv->{processed};\n    foreach my $rn (0 .. $nrows - 1) {\n        my $row = $rv->{rows}[$rn];\n        $row->{i} += 200 if defined($row->{i});\n        $row->{v} =~ tr/A-Za-z/a-zA-Z/ if (defined($row->{v}));\n        return_next($row);\n    }\n    return undef;\n$$ LANGUAGE plperl;\n\nSELECT * FROM test_munge();\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE TYPE foo_type AS (the_num INTEGER, the_text TEXT);\n\nCREATE OR REPLACE FUNCTION lotsa_md5 (INTEGER) RETURNS SETOF foo_type AS $$\n    use Digest::MD5 qw(md5_hex);\n    my $file = '/usr/share/dict/words';\n    my $t = localtime;\n    elog(NOTICE, \"opening file $file at $t\" );\n    open my $fh, '<', $file # ooh, it's a file access!\n        or elog(ERROR, \"cannot open $file for reading: $!\");\n    my @words = <$fh>;\n    close $fh;\n    $t = localtime;\n    elog(NOTICE, \"closed file $file at $t\");\n    chomp(@words);\n    my $row;\n    my $sth = spi_query(\"SELECT * FROM generate_series(1,$_[0]) AS b(a)\");\n    while (defined ($row = spi_fetchrow($sth))) {\n        return_next({\n            the_num => $row->{a},\n            the_text => md5_hex($words[rand @words])\n        });\n    }\n    return;\n$$ LANGUAGE plperlu;\n\nSELECT * from lotsa_md5(500);\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\n$plan = spi_prepare('SELECT * FROM test WHERE id > $1 AND name = $2',\n                                                     'INTEGER', 'TEXT');\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION init() RETURNS VOID AS $$\n        $_SHARED{my_plan} = spi_prepare('SELECT (now() + $1)::date AS now',\n                                        'INTERVAL');\n$$ LANGUAGE plperl;\n\nCREATE OR REPLACE FUNCTION add_time( INTERVAL ) RETURNS TEXT AS $$\n        return spi_exec_prepared(\n                $_SHARED{my_plan},\n                $_[0]\n        )->{rows}->[0]->{now};\n$$ LANGUAGE plperl;\n\nCREATE OR REPLACE FUNCTION done() RETURNS VOID AS $$\n        spi_freeplan( $_SHARED{my_plan});\n        undef $_SHARED{my_plan};\n$$ LANGUAGE plperl;\n\nSELECT init();\nSELECT add_time('1 day'), add_time('2 days'), add_time('3 days');\nSELECT done();\n\n  add_time  |  add_time  |  add_time\n------------+------------+------------\n 2005-12-10 | 2005-12-11 | 2005-12-12\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE TABLE hosts AS SELECT id, ('192.168.1.'||id)::inet AS address\n                      FROM generate_series(1,3) AS id;\n\nCREATE OR REPLACE FUNCTION init_hosts_query() RETURNS VOID AS $$\n        $_SHARED{plan} = spi_prepare('SELECT * FROM hosts\n                                      WHERE address << $1', 'inet');\n$$ LANGUAGE plperl;\n\nCREATE OR REPLACE FUNCTION query_hosts(inet) RETURNS SETOF hosts AS $$\n        return spi_exec_prepared(\n                $_SHARED{plan},\n                {limit => 2},\n                $_[0]\n        )->{rows};\n$$ LANGUAGE plperl;\n\nCREATE OR REPLACE FUNCTION release_hosts_query() RETURNS VOID AS $$\n        spi_freeplan($_SHARED{plan});\n        undef $_SHARED{plan};\n$$ LANGUAGE plperl;\n\nSELECT init_hosts_query();\nSELECT query_hosts('192.168.1.0/30');\nSELECT release_hosts_query();\n\n    query_hosts    \n-----------------\n (1,192.168.1.1)\n (2,192.168.1.2)\n(2 rows)\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE PROCEDURE transaction_test1()\nLANGUAGE plperl\nAS $$\nforeach my $i (0..9) {\n    spi_exec_query(\"INSERT INTO test1 (a) VALUES ($i)\");\n    if ($i % 2 == 0) {\n        spi_commit();\n    } else {\n        spi_rollback();\n    }\n}\n$$;\n\nCALL transaction_test1();\n", "source": "https://www.postgresql.org/docs/current/plperl-builtins.html"},
{"sql": "\nCREATE FUNCTION raise_custom_exception() RETURNS void AS $$\nplpy.error(\"custom exception message\",\n           detail=\"some info about exception\",\n           hint=\"hint for users\")\n$$ LANGUAGE plpythonu;\n\n=# SELECT raise_custom_exception();\nERROR:  plpy.Error: custom exception message\nDETAIL:  some info about exception\nHINT:  hint for users\nCONTEXT:  Traceback (most recent call last):\n  PL/Python function \"raise_custom_exception\", line 4, in <module>\n    hint=\"hint for users\")\nPL/Python function \"raise_custom_exception\"\n", "source": "https://www.postgresql.org/docs/current/plpython-util.html"},
{"sql": "\nplpy.execute(\"UPDATE tbl SET %s = %s WHERE key = %s\" % (\n    plpy.quote_ident(colname),\n    plpy.quote_nullable(newvalue),\n    plpy.quote_literal(keyvalue)))\n", "source": "https://www.postgresql.org/docs/current/plpython-util.html"},
{"sql": "\nCREATE FUNCTION ", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": ")\nRETURNS ", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\n-- function attributes can go here\nAS $$\n    # PL/Perl function body goes here\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nDO $$\n    # PL/Perl code\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE FUNCTION perl_max (integer, integer) RETURNS integer AS $$\n    if ($_[0] > $_[1]) { return $_[0]; }\n    return $_[1];\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE FUNCTION perl_max (integer, integer) RETURNS integer AS $$\n    my ($x, $y) = @_;\n    if (not defined $x) {\n        return undef if not defined $y;\n        return $y;\n    }\n    return $x if not defined $y;\n    return $x if $x > $y;\n    return $y;\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE EXTENSION bool_plperl;  -- or bool_plperlu for PL/PerlU\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE FUNCTION perl_and(bool, bool) RETURNS bool\nTRANSFORM FOR TYPE bool\nAS $$\n  my ($a, $b) = @_;\n  return $a && $b;\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE OR REPLACE function returns_array()\nRETURNS text[][] AS $$\n    return [['a\"b','c,d'],['e\\\\f','g']];\n$$ LANGUAGE plperl;\n\nselect returns_array();\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION concat_array_elements(text[]) RETURNS TEXT AS $$\n    my $arg = shift;\n    my $result = \"\";\n    return undef if (!defined $arg);\n\n    # as an array reference\n    for (@$arg) {\n        $result .= $_;\n    }\n\n    # also works as a string\n    $result .= $arg;\n\n    return $result;\n$$ LANGUAGE plperl;\n\nSELECT concat_array_elements(ARRAY['PL','/','Perl']);\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE TABLE employee (\n    name text,\n    basesalary integer,\n    bonus integer\n);\n\nCREATE FUNCTION empcomp(employee) RETURNS integer AS $$\n    my ($emp) = @_;\n    return $emp->{basesalary} + $emp->{bonus};\n$$ LANGUAGE plperl;\n\nSELECT name, empcomp(employee.*) FROM employee;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE TYPE testrowperl AS (f1 integer, f2 text, f3 text);\n\nCREATE OR REPLACE FUNCTION perl_row() RETURNS testrowperl AS $$\n    return {f2 => 'hello', f1 => 1, f3 => 'world'};\n$$ LANGUAGE plperl;\n\nSELECT * FROM perl_row();\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE PROCEDURE perl_triple(INOUT a integer, INOUT b integer) AS $$\n    my ($a, $b) = @_;\n    return {a => $a * 3, b => $b * 3};\n$$ LANGUAGE plperl;\n\nCALL perl_triple(5, 10);\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION perl_set_int(int)\nRETURNS SETOF INTEGER AS $$\n    foreach (0..$_[0]) {\n        return_next($_);\n    }\n    return undef;\n$$ LANGUAGE plperl;\n\nSELECT * FROM perl_set_int(5);\n\nCREATE OR REPLACE FUNCTION perl_set()\nRETURNS SETOF testrowperl AS $$\n    return_next({ f1 => 1, f2 => 'Hello', f3 => 'World' });\n    return_next({ f1 => 2, f2 => 'Hello', f3 => 'PostgreSQL' });\n    return_next({ f1 => 3, f2 => 'Hello', f3 => 'PL/Perl' });\n    return undef;\n$$ LANGUAGE plperl;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE OR REPLACE FUNCTION perl_set_int(int) RETURNS SETOF INTEGER AS $$\n    return [0..$_[0]];\n$$ LANGUAGE plperl;\n\nSELECT * FROM perl_set_int(5);\n\nCREATE OR REPLACE FUNCTION perl_set() RETURNS SETOF testrowperl AS $$\n    return [\n        { f1 => 1, f2 => 'Hello', f3 => 'World' },\n        { f1 => 2, f2 => 'Hello', f3 => 'PostgreSQL' },\n        { f1 => 3, f2 => 'Hello', f3 => 'PL/Perl' }\n    ];\n$$ LANGUAGE plperl;\n\nSELECT * FROM perl_set();\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nuse strict;\n", "source": "https://www.postgresql.org/docs/current/plperl-funcs.html"},
{"sql": "\nCREATE PROCEDURE transaction_test1()\nLANGUAGE plpythonu\nAS $$\nfor i in range(0, 10):\n    plpy.execute(\"INSERT INTO test1 (a) VALUES (%d)\" % i)\n    if i % 2 == 0:\n        plpy.commit()\n    else:\n        plpy.rollback()\n$$;\n\nCALL transaction_test1();\n", "source": "https://www.postgresql.org/docs/current/plpython-transactions.html"},
{"sql": "\nCREATE FUNCTION transfer_funds() RETURNS void AS $$\ntry:\n    plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n    plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError as e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-subtransaction.html"},
{"sql": "\nCREATE FUNCTION transfer_funds2() RETURNS void AS $$\ntry:\n    with plpy.subtransaction():\n        plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n        plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError as e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-subtransaction.html"},
{"sql": "\nCREATE FUNCTION transfer_funds_old() RETURNS void AS $$\ntry:\n    subxact = plpy.subtransaction()\n    subxact.enter()\n    try:\n        plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n        plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\n    except:\n        import sys\n        subxact.exit(*sys.exc_info())\n        raise\n    else:\n        subxact.exit(None, None, None)\nexcept plpy.SPIError as e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\n\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-subtransaction.html"},
{"sql": "\nrv = plpy.execute(\"SELECT * FROM my_table\", 5)\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nfoo = rv[i][\"my_column\"]\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nplan = plpy.prepare(\"SELECT last_name FROM my_users WHERE first_name = $1\", [\"text\"])\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nrv = plpy.execute(plan, [\"name\"], 5)\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nrv = plan.execute([\"name\"], 5)\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nCREATE FUNCTION usesavedplan() RETURNS trigger AS $$\n    if \"plan\" in SD:\n        plan = SD[\"plan\"]\n    else:\n        plan = plpy.prepare(\"SELECT 1\")\n        SD[\"plan\"] = plan\n    # rest of function\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nCREATE FUNCTION count_odd_iterator() RETURNS integer AS $$\nodd = 0\nfor row in plpy.cursor(\"select num from largetable\"):\n    if row['num'] % 2:\n         odd += 1\nreturn odd\n$$ LANGUAGE plpythonu;\n\nCREATE FUNCTION count_odd_fetch(batch_size integer) RETURNS integer AS $$\nodd = 0\ncursor = plpy.cursor(\"select num from largetable\")\nwhile True:\n    rows = cursor.fetch(batch_size)\n    if not rows:\n        break\n    for row in rows:\n        if row['num'] % 2:\n            odd += 1\nreturn odd\n$$ LANGUAGE plpythonu;\n\nCREATE FUNCTION count_odd_prepared() RETURNS integer AS $$\nodd = 0\nplan = plpy.prepare(\"select num from largetable where num % $1 <> 0\", [\"integer\"])\nrows = list(plpy.cursor(plan, [2]))  # or: = list(plan.cursor([2]))\n\nreturn len(rows)\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nCREATE FUNCTION try_adding_joe() RETURNS text AS $$\n    try:\n        plpy.execute(\"INSERT INTO users(username) VALUES ('joe')\")\n    except plpy.SPIError:\n        return \"something went wrong\"\n    else:\n        return \"Joe added\"\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nCREATE FUNCTION insert_fraction(numerator int, denominator int) RETURNS text AS $$\nfrom plpy import spiexceptions\ntry:\n    plan = plpy.prepare(\"INSERT INTO fractions (frac) VALUES ($1 / $2)\", [\"int\", \"int\"])\n    plpy.execute(plan, [numerator, denominator])\nexcept spiexceptions.DivisionByZero:\n    return \"denominator cannot equal zero\"\nexcept spiexceptions.UniqueViolation:\n    return \"already have that fraction\"\nexcept plpy.SPIError as e:\n    return \"other error, SQLSTATE %s\" % e.sqlstate\nelse:\n    return \"fraction inserted\"\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-database.html"},
{"sql": "\nDO $$\n    # PL/Python code\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-do.html"},
{"sql": "\nCREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if (a is None) or (b is None):\n    return None\n  if a > b:\n    return a\n  return b\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION return_arr()\n  RETURNS int[]\nAS $$\nreturn [1, 2, 3, 4, 5]\n$$ LANGUAGE plpythonu;\n\nSELECT return_arr();\n return_arr  \n-------------\n {1,2,3,4,5}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION test_type_conversion_array_int4(x int4[]) RETURNS int4[] AS $$\nplpy.info(x, type(x))\nreturn x\n$$ LANGUAGE plpythonu;\n\nSELECT * FROM test_type_conversion_array_int4(ARRAY[[1,2,3],[4,5,6]]);\nINFO:  ([[1, 2, 3], [4, 5, 6]], <type 'list'>)\n test_type_conversion_array_int4 \n---------------------------------\n {{1,2,3},{4,5,6}}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION return_str_arr()\n  RETURNS varchar[]\nAS $$\nreturn \"hello\"\n$$ LANGUAGE plpythonu;\n\nSELECT return_str_arr();\n return_str_arr\n----------------\n {h,e,l,l,o}\n(1 row)\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE TABLE employee (\n  name text,\n  salary integer,\n  age integer\n);\n\nCREATE FUNCTION overpaid (e employee)\n  RETURNS boolean\nAS $$\n  if e[\"salary\"] > 200000:\n    return True\n  if (e[\"age\"] < 30) and (e[\"salary\"] > 100000):\n    return True\n  return False\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE TYPE named_value AS (\n  name   text,\n  value  integer\n);\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return ( name, value )\n  # or alternatively, as list: return [ name, value ]\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return { \"name\": name, \"value\": value }\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  class named_value:\n    def __init__ (self, n, v):\n      self.name = n\n      self.value = v\n  return named_value(name, value)\n\n  # or simply\n  class nv: pass\n  nv.name = name\n  nv.value = value\n  return nv\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION multiout_simple(OUT i integer, OUT j integer) AS $$\nreturn (1, 2)\n$$ LANGUAGE plpythonu;\n\nSELECT * FROM multiout_simple();\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE PROCEDURE python_triple(INOUT a integer, INOUT b integer) AS $$\nreturn (a * 3, b * 3)\n$$ LANGUAGE plpythonu;\n\nCALL python_triple(5, 10);\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE TYPE greeting AS (\n  how text,\n  who text\n);\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  # return tuple containing lists as composite types\n  # all other combinations work also\n  return ( [ how, \"World\" ], [ how, \"PostgreSQL\" ], [ how, \"PL/Python\" ] )\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  class producer:\n    def __init__ (self, how, who):\n      self.how = how\n      self.who = who\n      self.ndx = -1\n\n    def __iter__ (self):\n      return self\n\n    def next (self):\n      self.ndx += 1\n      if self.ndx == len(self.who):\n        raise StopIteration\n      return ( self.how, self.who[self.ndx] )\n\n  return producer(how, [ \"World\", \"PostgreSQL\", \"PL/Python\" ])\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  for who in [ \"World\", \"PostgreSQL\", \"PL/Python\" ]:\n    yield ( how, who )\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION multiout_simple_setof(n integer, OUT integer, OUT integer) RETURNS SETOF record AS $$\nreturn [(1, 2)] * n\n$$ LANGUAGE plpythonu;\n\nSELECT * FROM multiout_simple_setof(3);\n", "source": "https://www.postgresql.org/docs/current/plpython-data.html"},
{"sql": "\nCREATE FUNCTION ", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": ")\n  RETURNS ", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": "\nAS $$\n  # PL/Python function body\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": "\nCREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if a > b:\n    return a\n  return b\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": "\ndef __plpython_procedure_pymax_23456():\n  if a > b:\n    return a\n  return b\n", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": "\nCREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  x = x.strip()  # error\n  return x\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"},
{"sql": "\nCREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  global x\n  x = x.strip()  # ok now\n  return x\n$$ LANGUAGE plpythonu;\n", "source": "https://www.postgresql.org/docs/current/plpython-funcs.html"}
]